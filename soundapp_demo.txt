
#include <_xeneva.h>
#include <sys\_keproc.h>
#include <sys\_kefile.h>
#include <stdlib.h>
#include <sys\iocodes.h>
#include <string.h>

/*
 * main -- sound app demo, note that
 * here all direct xeneva related api are
 * used, no third party api is used
 */
int main(int argc, char* arv[]) {
	_KePrint("Sound demo \n");
	
	/* open the sound device-file, it is in /dev directory */
	int snd = _KeOpenFile("/dev/sound", FILE_OPEN_WRITE);

	/* allocate an ioctl structure where required information
	 * will be putted */
	XEFileIOControl ioctl;
	memset(&ioctl, 0, sizeof(XEFileIOControl));

	/* uint_1 holds the millisecond to sleep after 
	 * one frame playback */
	ioctl.uint_1 = 10;

	/* most important aurora_syscall_magic number, without
	 * this, iocontrol system call will not work */
	ioctl.syscall_magic = AURORA_SYSCALL_MAGIC;

	/* register the app to sound layer, as it will create
	 * a private dsp-box for this app */
	_KeFileIoControl(snd, SOUND_REGISTER_SNDPLR, &ioctl);
	
	/* now open your sound file, note that here demo is playing
	 * a raw wave file with 48kHZ-16bit format, to play mp3 or
	 * other format, one needs another conversion layer of samples */

	int song = _KeOpenFile("/snd.wav", FILE_OPEN_READ_ONLY);
	void* songbuf = malloc(4096);
	memset(songbuf, 0, 4096);
	_KeReadFile(song, songbuf, 4096);
	XEFileStatus fs;
	_KeFileStat(song, &fs);

	while (1) {
	    /* with each frame read the sound, write it
		 * to sound device, the sound device will automatically
		 * put the app to sleep for smooth playback for some
		 * milli-seconds
		 */
		_KeWriteFile(snd, songbuf, 4096);
		_KeReadFile(song, songbuf, 4096);
		_KeFileStat(song, &fs);

		/* after we finish playing the sound, we exit */
		if (fs.eof) {
			_KeCloseFile(song);
			_KeProcessExit();
		}
	}
}