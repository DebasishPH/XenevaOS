/**
* BSD 2-Clause License
*
* Copyright (c) 2022-2023, Manas Kamal Choudhury
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice, this
*    list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
**/

#ifndef _ISTREAM_HPP
#define _ISTREAM_HPP

#include <ios>

namespace std {

	class ios_base
	{
	public:
		class Init
		{
			friend class ios_base;

		public:
			Init();
			~Init();

		private:
			static int refCount;
		};

	protected:
		ios_base();
	};

	template <class charT, class traits = char_traits<charT> >
	class basic_ios : ios_base
	{
	public:
		typedef charT						char_type;
		typedef traits						traits_type;
		typedef typename traits::int_type	int_type;
		typedef typename traits::pos_type	streampos;
		typedef typename traits::off_type	streamoff;

		// Const/dest
		explicit basic_ios(basic_streambuf<charT, traits> *);

	protected:
		basic_ios();
	};

	typedef basic_ios<char> ios;

	template <class charT, class traits = char_traits<charT> >
	class basic_istream : basic_ios<charT, traits>
	{
	public:
		// Const/dest
		explicit basic_istream(basic_streambuf<charT, traits> *);
		virtual ~basic_istream();

		// Member functions
		basic_istream& operator>>(charT&);
		basic_istream& operator>>(charT *);
	};

	typedef basic_istream<char> istream;

	template <class charT, class traits = char_traits<charT> >
	class basic_iostream :
		basic_istream<charT, traits>, basic_ostream<charT, traits>
	{
	public:
		// Const/dest
		explicit basic_iostream(basic_streambuf<charT, traits> *);
		virtual ~basic_iostream();
	};

	typedef basic_iostream<char> iostream;
}

#endif

