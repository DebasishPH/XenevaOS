; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__C072D151_circbuf@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z	; AuAdvancePointer
PUBLIC	?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z	; AuRetreatPointer
PUBLIC	?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z		; AuCircBufReset
PUBLIC	?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z ; AuCircBufInitialise
PUBLIC	?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z		; AuCircBufFree
PUBLIC	?AuCircBufSize@@YA_KPEAU_circ_buf_@@@Z		; AuCircBufSize
PUBLIC	?AuCircBufCapacity@@YA_KPEAU_circ_buf_@@@Z	; AuCircBufCapacity
PUBLIC	?AuCircBufPutData@@YAXPEAU_circ_buf_@@E@Z	; AuCircBufPutData
PUBLIC	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z		; AuCircBufPut
PUBLIC	?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z	; AuCircBufGet
PUBLIC	?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z		; CircBufEmpty
PUBLIC	?CircBufFull@@YA_NPEAU_circ_buf_@@@Z		; CircBufFull
PUBLIC	__JustMyCode_Default
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z DD imagerel $LN6
	DD	imagerel $LN6+154
	DD	imagerel $unwind$?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufSize@@YA_KPEAU_circ_buf_@@@Z DD imagerel $LN6
	DD	imagerel $LN6+132
	DD	imagerel $unwind$?AuCircBufSize@@YA_KPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufCapacity@@YA_KPEAU_circ_buf_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?AuCircBufCapacity@@YA_KPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufPutData@@YAXPEAU_circ_buf_@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?AuCircBufPutData@@YAXPEAU_circ_buf_@@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z DD imagerel $LN5
	DD	imagerel $LN5+83
	DD	imagerel $unwind$?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CircBufFull@@YA_NPEAU_circ_buf_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?CircBufFull@@YA_NPEAU_circ_buf_@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CircBufFull@@YA_NPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z DD 025031301H
	DD	0d20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufPutData@@YAXPEAU_circ_buf_@@E@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufCapacity@@YA_KPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufSize@@YA_KPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?CircBufFull@@YA_NPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
cbuf$ = 80
?CircBufFull@@YA_NPEAU_circ_buf_@@@Z PROC		; CircBufFull, COMDAT

; 177  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 178  : 	return cbuf->full;

	mov	rax, QWORD PTR cbuf$[rbp]
	movzx	eax, BYTE PTR [rax+32]

; 179  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?CircBufFull@@YA_NPEAU_circ_buf_@@@Z ENDP		; CircBufFull
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
tv70 = 64
cbuf$ = 96
?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z PROC		; CircBufEmpty, COMDAT

; 166  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 167  : 	return (!cbuf->full && (cbuf->head == cbuf->tail));

	mov	rax, QWORD PTR cbuf$[rbp]
	movzx	eax, BYTE PTR [rax+32]
	test	eax, eax
	jne	SHORT $LN3@CircBufEmp
	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN3@CircBufEmp
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN4@CircBufEmp
$LN3@CircBufEmp:
	mov	DWORD PTR tv70[rbp], 0
$LN4@CircBufEmp:
	movzx	eax, BYTE PTR tv70[rbp]

; 168  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z ENDP		; CircBufEmpty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z
_TEXT	SEGMENT
r$ = 0
cbuf$ = 96
data$ = 104
?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z PROC		; AuCircBufGet, COMDAT

; 148  : {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 149  : 	int r = -1;

	mov	DWORD PTR r$[rbp], -1

; 150  : 
; 151  : 	if (!CircBufEmpty(cbuf)){

	mov	rcx, QWORD PTR cbuf$[rbp]
	call	?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z	; CircBufEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@AuCircBufG

; 152  : 		*data = cbuf->buffer[cbuf->tail];

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR data$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR [rdx], al

; 153  : 		AuRetreatPointer(cbuf);

	mov	rcx, QWORD PTR cbuf$[rbp]
	call	?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z ; AuRetreatPointer

; 154  : 		r = 0;

	mov	DWORD PTR r$[rbp], 0
$LN2@AuCircBufG:

; 155  : 	}
; 156  : 	return r;

	mov	eax, DWORD PTR r$[rbp]

; 157  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z ENDP		; AuCircBufGet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z
_TEXT	SEGMENT
r$ = 0
cbuf$ = 96
data$ = 104
?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z PROC		; AuCircBufPut, COMDAT

; 129  : int AuCircBufPut(CircBuffer* cbuf, uint8_t data) {

$LN4:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 130  : 	int r = -1;

	mov	DWORD PTR r$[rbp], -1

; 131  : 	if (!CircBufFull(cbuf)) {

	mov	rcx, QWORD PTR cbuf$[rbp]
	call	?CircBufFull@@YA_NPEAU_circ_buf_@@@Z	; CircBufFull
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@AuCircBufP

; 132  : 		cbuf->buffer[cbuf->head] = data;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR [rcx]
	movzx	edx, BYTE PTR data$[rbp]
	mov	BYTE PTR [rcx+rax], dl

; 133  : 		AuAdvancePointer(cbuf);

	mov	rcx, QWORD PTR cbuf$[rbp]
	call	?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z ; AuAdvancePointer

; 134  : 		r = 0;

	mov	DWORD PTR r$[rbp], 0
$LN2@AuCircBufP:

; 135  : 	}
; 136  : 
; 137  : 	return r;

	mov	eax, DWORD PTR r$[rbp]

; 138  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z ENDP		; AuCircBufPut
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufPutData@@YAXPEAU_circ_buf_@@E@Z
_TEXT	SEGMENT
cbuf$ = 80
data$ = 88
?AuCircBufPutData@@YAXPEAU_circ_buf_@@E@Z PROC		; AuCircBufPutData, COMDAT

; 119  : void AuCircBufPutData(CircBuffer* cbuf, uint8_t data) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 120  : 	cbuf->buffer[cbuf->head] = data;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR [rcx]
	movzx	edx, BYTE PTR data$[rbp]
	mov	BYTE PTR [rcx+rax], dl

; 121  : 	AuAdvancePointer(cbuf);

	mov	rcx, QWORD PTR cbuf$[rbp]
	call	?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z ; AuAdvancePointer

; 122  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuCircBufPutData@@YAXPEAU_circ_buf_@@E@Z ENDP		; AuCircBufPutData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufCapacity@@YA_KPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
cbuf$ = 80
?AuCircBufCapacity@@YA_KPEAU_circ_buf_@@@Z PROC		; AuCircBufCapacity, COMDAT

; 110  : size_t AuCircBufCapacity(CircBuffer *cbuf) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 111  : 	return cbuf->max;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+24]

; 112  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuCircBufCapacity@@YA_KPEAU_circ_buf_@@@Z ENDP		; AuCircBufCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufSize@@YA_KPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
sz$ = 0
cbuf$ = 96
?AuCircBufSize@@YA_KPEAU_circ_buf_@@@Z PROC		; AuCircBufSize, COMDAT

; 94   : size_t AuCircBufSize(CircBuffer *cbuf) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 95   : 	size_t sz = cbuf->max;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR sz$[rbp], rax

; 96   : 
; 97   : 	if (!cbuf->full) {

	mov	rax, QWORD PTR cbuf$[rbp]
	movzx	eax, BYTE PTR [rax+32]
	test	eax, eax
	jne	SHORT $LN2@AuCircBufS

; 98   : 		if (cbuf->head >= cbuf->tail)

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+8], rcx
	jb	SHORT $LN3@AuCircBufS

; 99   : 			sz = (cbuf->head - cbuf->tail);

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	mov	QWORD PTR sz$[rbp], rax
	jmp	SHORT $LN4@AuCircBufS
$LN3@AuCircBufS:

; 100  : 		else
; 101  : 			sz = (cbuf->max + cbuf->head - cbuf->tail);

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR cbuf$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR cbuf$[rbp]
	sub	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR sz$[rbp], rax
$LN4@AuCircBufS:
$LN2@AuCircBufS:

; 102  : 	}
; 103  : 	return sz;

	mov	rax, QWORD PTR sz$[rbp]

; 104  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuCircBufSize@@YA_KPEAU_circ_buf_@@@Z ENDP		; AuCircBufSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
cbuf$ = 80
?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z PROC		; AuCircBufFree, COMDAT

; 84   : void AuCircBufFree(CircBuffer *cbuf) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 85   : 	kfree(cbuf);

	mov	rcx, QWORD PTR cbuf$[rbp]
	call	kfree

; 86   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z ENDP		; AuCircBufFree
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z
_TEXT	SEGMENT
cbuf$ = 0
buffer$ = 96
sz$ = 104
?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z PROC	; AuCircBufInitialise, COMDAT

; 71   : CircBuffer* AuCircBufInitialise(uint8_t* buffer, size_t sz) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 72   : 	CircBuffer *cbuf = (CircBuffer*)kmalloc(sizeof(CircBuffer));

	mov	ecx, 40					; 00000028H
	call	kmalloc
	mov	QWORD PTR cbuf$[rbp], rax

; 73   : 	cbuf->buffer = buffer;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	QWORD PTR [rax], rcx

; 74   : 	cbuf->max = sz;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR sz$[rbp]
	mov	QWORD PTR [rax+24], rcx

; 75   : 	AuCircBufReset(cbuf);

	mov	rcx, QWORD PTR cbuf$[rbp]
	call	?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z	; AuCircBufReset

; 76   : 	return cbuf;

	mov	rax, QWORD PTR cbuf$[rbp]

; 77   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z ENDP	; AuCircBufInitialise
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
cbuf$ = 80
?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z PROC		; AuCircBufReset, COMDAT

; 60   : void AuCircBufReset(CircBuffer *cbuf) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 61   : 	cbuf->head = 0;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	QWORD PTR [rax+8], 0

; 62   : 	cbuf->tail = 0;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	QWORD PTR [rax+16], 0

; 63   : 	cbuf->full = false;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	BYTE PTR [rax+32], 0

; 64   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuCircBufReset@@YAXPEAU_circ_buf_@@@Z ENDP		; AuCircBufReset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
cbuf$ = 80
?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z PROC		; AuRetreatPointer, COMDAT

; 51   : void AuRetreatPointer(CircBuffer *cbuf) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 52   : 	cbuf->full = false;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	BYTE PTR [rax+32], 0

; 53   : 	cbuf->tail = (cbuf->tail + 1) % cbuf->max;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	xor	edx, edx
	mov	rcx, QWORD PTR cbuf$[rbp]
	div	QWORD PTR [rcx+24]
	mov	rax, rdx
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	QWORD PTR [rcx+16], rax

; 54   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuRetreatPointer@@YAXPEAU_circ_buf_@@@Z ENDP		; AuRetreatPointer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\circbuf.cpp
;	COMDAT ?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z
_TEXT	SEGMENT
tv81 = 64
cbuf$ = 96
?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z PROC		; AuAdvancePointer, COMDAT

; 38   : void AuAdvancePointer(CircBuffer *cbuf) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__C072D151_circbuf@cpp
	call	__CheckForDebuggerJustMyCode

; 39   : 	if (cbuf->full)

	mov	rax, QWORD PTR cbuf$[rbp]
	movzx	eax, BYTE PTR [rax+32]
	test	eax, eax
	je	SHORT $LN2@AuAdvanceP

; 40   : 		cbuf->tail = (cbuf->tail + 1) % cbuf->max;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	xor	edx, edx
	mov	rcx, QWORD PTR cbuf$[rbp]
	div	QWORD PTR [rcx+24]
	mov	rax, rdx
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	QWORD PTR [rcx+16], rax
$LN2@AuAdvanceP:

; 41   : 
; 42   : 	cbuf->head = (cbuf->head + 1) % cbuf->max;

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rax, QWORD PTR [rax+8]
	inc	rax
	xor	edx, edx
	mov	rcx, QWORD PTR cbuf$[rbp]
	div	QWORD PTR [rcx+24]
	mov	rax, rdx
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	QWORD PTR [rcx+8], rax

; 43   : 	cbuf->full = (cbuf->head == cbuf->tail);

	mov	rax, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR cbuf$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN4@AuAdvanceP
	mov	DWORD PTR tv81[rbp], 1
	jmp	SHORT $LN5@AuAdvanceP
$LN4@AuAdvanceP:
	mov	DWORD PTR tv81[rbp], 0
$LN5@AuAdvanceP:
	mov	rax, QWORD PTR cbuf$[rbp]
	movzx	ecx, BYTE PTR tv81[rbp]
	mov	BYTE PTR [rax+32], cl

; 44   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuAdvancePointer@@YAXPEAU_circ_buf_@@@Z ENDP		; AuAdvancePointer
_TEXT	ENDS
END
