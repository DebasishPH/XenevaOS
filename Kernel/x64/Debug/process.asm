; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?proc_first@@3PEAU_au_proc_@@EA			; proc_first
PUBLIC	?proc_last@@3PEAU_au_proc_@@EA			; proc_last
PUBLIC	?root_proc@@3PEAU_au_proc_@@EA			; root_proc
PUBLIC	?process_mutex@@3PEAU_mutex_@@EA		; process_mutex
_BSS	SEGMENT
?proc_first@@3PEAU_au_proc_@@EA DQ 01H DUP (?)		; proc_first
?proc_last@@3PEAU_au_proc_@@EA DQ 01H DUP (?)		; proc_last
?root_proc@@3PEAU_au_proc_@@EA DQ 01H DUP (?)		; root_proc
?process_mutex@@3PEAU_mutex_@@EA DQ 01H DUP (?)		; process_mutex
_BSS	ENDS
_DATA	SEGMENT
pid	DD	01H
_DATA	ENDS
CONST	SEGMENT
$SG4152	DB	'_root', 00H
	ORG $+2
$SG4179	DB	'-about', 00H
	ORG $+1
$SG4184	DB	'/init.exe', 00H
	ORG $+6
$SG4228	DB	'[aurora]: cannot exit root process ', 0dH, 0aH, 00H
	ORG $+2
$SG4241	DB	'Closing file -> %s , address -> %x ', 0dH, 0aH, 00H
CONST	ENDS
PUBLIC	?AuAddProcess@@YAXPEAU_au_proc_@@0@Z		; AuAddProcess
PUBLIC	?AuRemoveProcess@@YAXPEAU_au_proc_@@0@Z		; AuRemoveProcess
PUBLIC	?CreateKernelStack@@YA_KPEAU_au_proc_@@PEA_K@Z	; CreateKernelStack
PUBLIC	?KernelStackFree@@YAXPEAU_au_proc_@@PEAXPEA_K@Z	; KernelStackFree
PUBLIC	?AuProcessFindPID@@YAPEAU_au_proc_@@H@Z		; AuProcessFindPID
PUBLIC	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
PUBLIC	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
PUBLIC	?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z	; CreateUserStack
PUBLIC	?AuStartRootProc@@YAXXZ				; AuStartRootProc
PUBLIC	?AuGetRootProcess@@YAPEAU_au_proc_@@XZ		; AuGetRootProcess
PUBLIC	?AuCreateProcessSlot@@YAPEAU_au_proc_@@PEAU1@PEAD@Z ; AuCreateProcessSlot
PUBLIC	?AuProcessExit@@YAXPEAU_au_proc_@@@Z		; AuProcessExit
PUBLIC	?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z	; AuProcessGetFileDesc
PUBLIC	?AuProcessWaitForTermination@@YAXPEAU_au_proc_@@H@Z ; AuProcessWaitForTermination
PUBLIC	?AuProcessGetMutex@@YAPEAU_mutex_@@XZ		; AuProcessGetMutex
PUBLIC	?AuCreateUserthread@@YAHPEAU_au_proc_@@P6AXPEAX@ZPEAD@Z ; AuCreateUserthread
PUBLIC	?AuProcessFindByPID@@YAPEAU_au_proc_@@PEAU1@H@Z	; AuProcessFindByPID
PUBLIC	?AuProcessFindByThread@@YAPEAU_au_proc_@@PEAU1@PEAU_au_thread_@@@Z ; AuProcessFindByThread
PUBLIC	?AuAllocateProcessID@@YAHXZ			; AuAllocateProcessID
PUBLIC	?AuCreateRootProc@@YAPEAU_au_proc_@@XZ		; AuCreateRootProc
PUBLIC	?AuGetKillableProcess@@YAPEAU_au_proc_@@XZ	; AuGetKillableProcess
PUBLIC	?AuProcessHeapMemDestroy@@YAXPEAU_au_proc_@@@Z	; AuProcessHeapMemDestroy
EXTRN	initialize_list:PROC
EXTRN	AuCreateKthread:PROC
EXTRN	AuBlockThread:PROC
EXTRN	AuSleepThread:PROC
EXTRN	?AuThreadMoveToTrash@@YAXPEAU_au_thread_@@@Z:PROC ; AuThreadMoveToTrash
EXTRN	AuCreateMutex:PROC
EXTRN	AuVmmngrGetPage:PROC
EXTRN	AuMapPageEx:PROC
EXTRN	AuCreateVirtualAddressSpace:PROC
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	memset:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuPmmngrFree:PROC
EXTRN	P2V:PROC
EXTRN	V2P:PROC
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	kmalloc_debug_on:PROC
EXTRN	?UnmapMemMapping@@YAXPEAX_K@Z:PROC		; UnmapMemMapping
EXTRN	x64_cli:PROC
EXTRN	x64_force_sched:PROC
EXTRN	SeTextOut:PROC
EXTRN	?AuLoadExecToProcess@@YAXPEAU_au_proc_@@PEADHPEAPEAD@Z:PROC ; AuLoadExecToProcess
EXTRN	?AuProcessEntUser@@YAX_K@Z:PROC			; AuProcessEntUser
EXTRN	?AuProcessClean@@YAXPEAU_au_proc_@@0@Z:PROC	; AuProcessClean
EXTRN	?AuSHMUnmapAll@@YAXPEAU_au_proc_@@@Z:PROC	; AuSHMUnmapAll
EXTRN	AuSoundRemoveDSP:PROC
EXTRN	?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z:PROC	; AuSignalRemoveAll
EXTRN	?PostBoxDestroyByID@@YAXG@Z:PROC		; PostBoxDestroyByID
pdata	SEGMENT
$pdata$?AuRemoveProcess@@YAXPEAU_au_proc_@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+178
	DD	imagerel $unwind$?AuRemoveProcess@@YAXPEAU_au_proc_@@0@Z
$pdata$?CreateKernelStack@@YA_KPEAU_au_proc_@@PEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+175
	DD	imagerel $unwind$?CreateKernelStack@@YA_KPEAU_au_proc_@@PEA_K@Z
$pdata$?KernelStackFree@@YAXPEAU_au_proc_@@PEAXPEA_K@Z DD imagerel $LN7
	DD	imagerel $LN7+203
	DD	imagerel $unwind$?KernelStackFree@@YAXPEAU_au_proc_@@PEAXPEA_K@Z
$pdata$?AuProcessFindPID@@YAPEAU_au_proc_@@H@Z DD imagerel $LN7
	DD	imagerel $LN7+70
	DD	imagerel $unwind$?AuProcessFindPID@@YAPEAU_au_proc_@@H@Z
$pdata$?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+74
	DD	imagerel $unwind$?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z
$pdata$?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z
$pdata$?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+204
	DD	imagerel $unwind$?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z
$pdata$?AuStartRootProc@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+205
	DD	imagerel $unwind$?AuStartRootProc@@YAXXZ
$pdata$?AuCreateProcessSlot@@YAPEAU_au_proc_@@PEAU1@PEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+345
	DD	imagerel $unwind$?AuCreateProcessSlot@@YAPEAU_au_proc_@@PEAU1@PEAD@Z
$pdata$?AuProcessExit@@YAXPEAU_au_proc_@@@Z DD imagerel $LN15
	DD	imagerel $LN15+442
	DD	imagerel $unwind$?AuProcessExit@@YAXPEAU_au_proc_@@@Z
$pdata$?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+69
	DD	imagerel $unwind$?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z
$pdata$?AuProcessWaitForTermination@@YAXPEAU_au_proc_@@H@Z DD imagerel $LN8
	DD	imagerel $LN8+119
	DD	imagerel $unwind$?AuProcessWaitForTermination@@YAXPEAU_au_proc_@@H@Z
$pdata$?AuCreateUserthread@@YAHPEAU_au_proc_@@P6AXPEAX@ZPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+393
	DD	imagerel $unwind$?AuCreateUserthread@@YAHPEAU_au_proc_@@P6AXPEAX@ZPEAD@Z
$pdata$?AuProcessFindByPID@@YAPEAU_au_proc_@@PEAU1@H@Z DD imagerel $LN7
	DD	imagerel $LN7+75
	DD	imagerel $unwind$?AuProcessFindByPID@@YAPEAU_au_proc_@@PEAU1@H@Z
$pdata$?AuProcessFindByThread@@YAPEAU_au_proc_@@PEAU1@PEAU_au_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+79
	DD	imagerel $unwind$?AuProcessFindByThread@@YAPEAU_au_proc_@@PEAU1@PEAU_au_thread_@@@Z
$pdata$?AuAllocateProcessID@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?AuAllocateProcessID@@YAHXZ
$pdata$?AuCreateRootProc@@YAPEAU_au_proc_@@XZ DD imagerel $LN6
	DD	imagerel $LN6+321
	DD	imagerel $unwind$?AuCreateRootProc@@YAPEAU_au_proc_@@XZ
$pdata$?AuGetKillableProcess@@YAPEAU_au_proc_@@XZ DD imagerel $LN7
	DD	imagerel $LN7+69
	DD	imagerel $unwind$?AuGetKillableProcess@@YAPEAU_au_proc_@@XZ
$pdata$?AuProcessHeapMemDestroy@@YAXPEAU_au_proc_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+228
	DD	imagerel $unwind$?AuProcessHeapMemDestroy@@YAXPEAU_au_proc_@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuRemoveProcess@@YAXPEAU_au_proc_@@0@Z DD 010e01H
	DD	0420eH
$unwind$?CreateKernelStack@@YA_KPEAU_au_proc_@@PEA_K@Z DD 010e01H
	DD	0820eH
$unwind$?KernelStackFree@@YAXPEAU_au_proc_@@PEAXPEA_K@Z DD 011301H
	DD	08213H
$unwind$?AuProcessFindPID@@YAPEAU_au_proc_@@H@Z DD 010801H
	DD	02208H
$unwind$?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z DD 010901H
	DD	02209H
$unwind$?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z DD 010901H
	DD	02209H
$unwind$?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z DD 010e01H
	DD	0820eH
$unwind$?AuStartRootProc@@YAXXZ DD 010401H
	DD	08204H
$unwind$?AuCreateProcessSlot@@YAPEAU_au_proc_@@PEAU1@PEAD@Z DD 010e01H
	DD	0820eH
$unwind$?AuProcessExit@@YAXPEAU_au_proc_@@@Z DD 010901H
	DD	08209H
$unwind$?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z DD 010901H
	DD	02209H
$unwind$?AuProcessWaitForTermination@@YAXPEAU_au_proc_@@H@Z DD 010d01H
	DD	0620dH
$unwind$?AuCreateUserthread@@YAHPEAU_au_proc_@@P6AXPEAX@ZPEAD@Z DD 011301H
	DD	08213H
$unwind$?AuProcessFindByPID@@YAPEAU_au_proc_@@PEAU1@H@Z DD 010d01H
	DD	0220dH
$unwind$?AuProcessFindByThread@@YAPEAU_au_proc_@@PEAU1@PEAU_au_thread_@@@Z DD 010e01H
	DD	0220eH
$unwind$?AuAllocateProcessID@@YAHXZ DD 010401H
	DD	02204H
$unwind$?AuCreateRootProc@@YAPEAU_au_proc_@@XZ DD 010401H
	DD	08204H
$unwind$?AuGetKillableProcess@@YAPEAU_au_proc_@@XZ DD 010401H
	DD	02204H
$unwind$?AuProcessHeapMemDestroy@@YAXPEAU_au_proc_@@@Z DD 010901H
	DD	0a209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 32
page$2 = 40
phys$3 = 48
proc_mem_diff$ = 56
tv67 = 64
proc$ = 96
?AuProcessHeapMemDestroy@@YAXPEAU_au_proc_@@@Z PROC	; AuProcessHeapMemDestroy

; 401  : void AuProcessHeapMemDestroy(AuProcess* proc) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 402  : 	size_t proc_mem_diff = proc->proc_mem_heap - PROCESS_BREAK_ADDRESS;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+1096]
	sub	rax, 805306368				; 30000000H
	mov	QWORD PTR proc_mem_diff$[rsp], rax

; 403  : 	for (int i = 0; i < proc_mem_diff / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@AuProcessH
$LN3@AuProcessH:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@AuProcessH:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	QWORD PTR tv67[rsp], rax
	xor	edx, edx
	mov	rax, QWORD PTR proc_mem_diff$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv67[rsp]
	cmp	rcx, rax
	jae	$LN2@AuProcessH

; 404  : 		AuVPage* page = AuVmmngrGetPage(PROCESS_BREAK_ADDRESS + i * PAGE_SIZE, VIRT_GETPAGE_ONLY_RET, VIRT_GETPAGE_ONLY_RET);

	imul	eax, DWORD PTR i$1[rsp], 4096		; 00001000H
	add	eax, 805306368				; 30000000H
	cdqe
	mov	r8b, 2
	mov	dl, 2
	mov	rcx, rax
	call	AuVmmngrGetPage
	mov	QWORD PTR page$2[rsp], rax

; 405  : 		uint64_t phys = page->bits.page << PAGE_SHIFT;

	mov	rax, QWORD PTR page$2[rsp]
	mov	rax, QWORD PTR [rax]
	shr	rax, 12
	and	rax, 268435455				; 0fffffffH
	shl	rax, 12
	mov	QWORD PTR phys$3[rsp], rax

; 406  : 		if (phys) 

	cmp	QWORD PTR phys$3[rsp], 0
	je	SHORT $LN1@AuProcessH

; 407  : 			AuPmmngrFree((void*)phys);

	mov	rcx, QWORD PTR phys$3[rsp]
	call	AuPmmngrFree
$LN1@AuProcessH:

; 408  : 		page->bits.page = 0;

	mov	rax, QWORD PTR page$2[rsp]
	mov	rcx, -1099511623681			; ffffff0000000fffH
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	mov	rcx, QWORD PTR page$2[rsp]
	mov	QWORD PTR [rcx], rax

; 409  : 		page->bits.present = 0;

	mov	rax, QWORD PTR page$2[rsp]
	mov	rax, QWORD PTR [rax]
	and	rax, -2
	mov	rcx, QWORD PTR page$2[rsp]
	mov	QWORD PTR [rcx], rax

; 410  : 	}

	jmp	$LN3@AuProcessH
$LN2@AuProcessH:

; 411  : }

	add	rsp, 88					; 00000058H
	ret	0
?AuProcessHeapMemDestroy@@YAXPEAU_au_proc_@@@Z ENDP	; AuProcessHeapMemDestroy
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
proc_$1 = 0
?AuGetKillableProcess@@YAPEAU_au_proc_@@XZ PROC		; AuGetKillableProcess

; 346  : AuProcess* AuGetKillableProcess() {

$LN7:
	sub	rsp, 24

; 347  : 	for (AuProcess* proc_ = proc_first; proc_ != NULL; proc_ = proc_->next) {

	mov	rax, QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA ; proc_first
	mov	QWORD PTR proc_$1[rsp], rax
	jmp	SHORT $LN4@AuGetKilla
$LN3@AuGetKilla:
	mov	rax, QWORD PTR proc_$1[rsp]
	mov	rax, QWORD PTR [rax+1112]
	mov	QWORD PTR proc_$1[rsp], rax
$LN4@AuGetKilla:
	cmp	QWORD PTR proc_$1[rsp], 0
	je	SHORT $LN2@AuGetKilla

; 348  : 		if (proc_->state & PROCESS_STATE_DIED)

	mov	rax, QWORD PTR proc_$1[rsp]
	movzx	eax, BYTE PTR [rax+20]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN1@AuGetKilla

; 349  : 			return proc_;

	mov	rax, QWORD PTR proc_$1[rsp]
	jmp	SHORT $LN5@AuGetKilla
$LN1@AuGetKilla:

; 350  : 	}

	jmp	SHORT $LN3@AuGetKilla
$LN2@AuGetKilla:

; 351  : 
; 352  : 	return NULL;

	xor	eax, eax
$LN5@AuGetKilla:

; 353  : }

	add	rsp, 24
	ret	0
?AuGetKillableProcess@@YAPEAU_au_proc_@@XZ ENDP		; AuGetKillableProcess
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 32
proc$ = 40
cr3$ = 48
main_thr_stack$ = 56
?AuCreateRootProc@@YAPEAU_au_proc_@@XZ PROC		; AuCreateRootProc

; 241  : AuProcess* AuCreateRootProc() {

$LN6:
	sub	rsp, 72					; 00000048H

; 242  : 	AuProcess *proc = (AuProcess*)kmalloc(sizeof(AuProcess));

	mov	ecx, 1128				; 00000468H
	call	kmalloc
	mov	QWORD PTR proc$[rsp], rax

; 243  : 	memset(proc, 0, sizeof(AuProcess));

	mov	r8d, 1128				; 00000468H
	xor	edx, edx
	mov	rcx, QWORD PTR proc$[rsp]
	call	memset

; 244  : 
; 245  : 	proc->proc_id = AuAllocateProcessID();

	call	?AuAllocateProcessID@@YAHXZ		; AuAllocateProcessID
	mov	rcx, QWORD PTR proc$[rsp]
	mov	DWORD PTR [rcx], eax

; 246  : 	memset(proc->name, 0, 16);

	mov	rax, QWORD PTR proc$[rsp]
	add	rax, 4
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, rax
	call	memset

; 247  : 	strcpy(proc->name, "_root");

	mov	rax, QWORD PTR proc$[rsp]
	add	rax, 4
	lea	rdx, OFFSET FLAT:$SG4152
	mov	rcx, rax
	call	strcpy

; 248  : 
; 249  : 	/* create empty virtual address space */
; 250  : 	uint64_t* cr3 = AuCreateVirtualAddressSpace();

	call	AuCreateVirtualAddressSpace
	mov	QWORD PTR cr3$[rsp], rax

; 251  : 	/* create the process main thread stack */
; 252  : 	uint64_t  main_thr_stack = (uint64_t)CreateUserStack(proc,cr3);

	mov	rdx, QWORD PTR cr3$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	call	?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z ; CreateUserStack
	mov	QWORD PTR main_thr_stack$[rsp], rax

; 253  : 	proc->state = PROCESS_STATE_NOT_READY;

	mov	rax, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rax+20], 1

; 254  : 	proc->cr3 = cr3;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 255  : 	proc->_main_stack_ = main_thr_stack;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR main_thr_stack$[rsp]
	mov	QWORD PTR [rax+48], rcx

; 256  : 	
; 257  : 	proc->vmareas = initialize_list();

	call	initialize_list
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+1072], rax

; 258  : 	proc->shmmaps = initialize_list();

	call	initialize_list
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+1080], rax

; 259  : 	proc->shm_break = USER_SHARED_MEM_START;

	mov	rax, QWORD PTR proc$[rsp]
	mov	ecx, -2147483648			; 80000000H
	mov	QWORD PTR [rax+1088], rcx

; 260  : 	proc->proc_mem_heap = PROCESS_BREAK_ADDRESS;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+1096], 805306368		; 30000000H

; 261  : 	proc->proc_mmap_len = 0;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+1104], 0

; 262  : 	for (int i = 0; i < FILE_DESC_PER_PROCESS; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuCreateRo
$LN2@AuCreateRo:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuCreateRo:
	cmp	DWORD PTR i$1[rsp], 60			; 0000003cH
	jge	SHORT $LN1@AuCreateRo

; 263  : 		proc->fds[i] = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], 0
	jmp	SHORT $LN2@AuCreateRo
$LN1@AuCreateRo:

; 264  : 
; 265  : 	/* create the main thread after loading the
; 266  : 	 * image file to process, because just after
; 267  : 	 * creating the thread, scheduler starts
; 268  : 	 * scheduling that thread
; 269  : 	 */
; 270  : 	AuAddProcess(NULL,proc);

	mov	rdx, QWORD PTR proc$[rsp]
	xor	ecx, ecx
	call	?AuAddProcess@@YAXPEAU_au_proc_@@0@Z	; AuAddProcess

; 271  : 	return proc;

	mov	rax, QWORD PTR proc$[rsp]

; 272  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuCreateRootProc@@YAPEAU_au_proc_@@XZ ENDP		; AuCreateRootProc
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
_pid$ = 0
?AuAllocateProcessID@@YAHXZ PROC			; AuAllocateProcessID

; 232  : int AuAllocateProcessID() {

$LN3:
	sub	rsp, 24

; 233  : 	size_t _pid = pid;

	movsxd	rax, DWORD PTR pid
	mov	QWORD PTR _pid$[rsp], rax

; 234  : 	pid = pid + 1;

	mov	eax, DWORD PTR pid
	inc	eax
	mov	DWORD PTR pid, eax

; 235  : 	return _pid;

	mov	eax, DWORD PTR _pid$[rsp]

; 236  : }

	add	rsp, 24
	ret	0
?AuAllocateProcessID@@YAHXZ ENDP			; AuAllocateProcessID
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
proc_$1 = 0
proc$ = 32
thread$ = 40
?AuProcessFindByThread@@YAPEAU_au_proc_@@PEAU1@PEAU_au_thread_@@@Z PROC ; AuProcessFindByThread

; 123  : AuProcess* AuProcessFindByThread(AuProcess* proc, AuThread* thread) {

$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 124  : 	for (AuProcess *proc_ = proc_first; proc_ != NULL; proc_ = proc_->next) {

	mov	rax, QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA ; proc_first
	mov	QWORD PTR proc_$1[rsp], rax
	jmp	SHORT $LN4@AuProcessF
$LN3@AuProcessF:
	mov	rax, QWORD PTR proc_$1[rsp]
	mov	rax, QWORD PTR [rax+1112]
	mov	QWORD PTR proc_$1[rsp], rax
$LN4@AuProcessF:
	cmp	QWORD PTR proc_$1[rsp], 0
	je	SHORT $LN2@AuProcessF

; 125  : 		if (proc_->main_thread == thread) {

	mov	rax, QWORD PTR proc_$1[rsp]
	mov	rcx, QWORD PTR thread$[rsp]
	cmp	QWORD PTR [rax+72], rcx
	jne	SHORT $LN1@AuProcessF

; 126  : 			return proc_;

	mov	rax, QWORD PTR proc_$1[rsp]
	jmp	SHORT $LN5@AuProcessF
$LN1@AuProcessF:

; 127  : 		}
; 128  : 	}

	jmp	SHORT $LN3@AuProcessF
$LN2@AuProcessF:

; 129  : 
; 130  : 	return NULL;

	xor	eax, eax
$LN5@AuProcessF:

; 131  : }

	add	rsp, 24
	ret	0
?AuProcessFindByThread@@YAPEAU_au_proc_@@PEAU1@PEAU_au_thread_@@@Z ENDP ; AuProcessFindByThread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
proc_$1 = 0
proc$ = 32
pid$ = 40
?AuProcessFindByPID@@YAPEAU_au_proc_@@PEAU1@H@Z PROC	; AuProcessFindByPID

; 110  : AuProcess* AuProcessFindByPID(AuProcess* proc, int pid) {

$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 111  : 	for (AuProcess *proc_ = proc_first; proc_ != NULL; proc_ = proc_->next) {

	mov	rax, QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA ; proc_first
	mov	QWORD PTR proc_$1[rsp], rax
	jmp	SHORT $LN4@AuProcessF
$LN3@AuProcessF:
	mov	rax, QWORD PTR proc_$1[rsp]
	mov	rax, QWORD PTR [rax+1112]
	mov	QWORD PTR proc_$1[rsp], rax
$LN4@AuProcessF:
	cmp	QWORD PTR proc_$1[rsp], 0
	je	SHORT $LN2@AuProcessF

; 112  : 		if (proc_->proc_id == pid)

	mov	rax, QWORD PTR proc_$1[rsp]
	mov	ecx, DWORD PTR pid$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@AuProcessF

; 113  : 			return proc_;

	mov	rax, QWORD PTR proc_$1[rsp]
	jmp	SHORT $LN5@AuProcessF
$LN1@AuProcessF:

; 114  : 	}

	jmp	SHORT $LN3@AuProcessF
$LN2@AuProcessF:

; 115  : 	return NULL;

	xor	eax, eax
$LN5@AuProcessF:

; 116  : }

	add	rsp, 24
	ret	0
?AuProcessFindByPID@@YAPEAU_au_proc_@@PEAU1@H@Z ENDP	; AuProcessFindByPID
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
thread_indx$ = 32
uentry$ = 40
thr$ = 48
tv66 = 56
proc$ = 80
entry$ = 88
name$ = 96
?AuCreateUserthread@@YAHPEAU_au_proc_@@P6AXPEAX@ZPEAD@Z PROC ; AuCreateUserthread

; 496  : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 497  : 	AuThread* thr = AuCreateKthread(AuProcessEntUser, CreateKernelStack(proc, proc->cr3), V2P((size_t)proc->cr3), name);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	V2P
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR proc$[rsp]
	call	?CreateKernelStack@@YA_KPEAU_au_proc_@@PEA_K@Z ; CreateKernelStack
	mov	r9, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?AuProcessEntUser@@YAX_K@Z ; AuProcessEntUser
	call	AuCreateKthread
	mov	QWORD PTR thr$[rsp], rax

; 498  : 	thr->frame.rsp -= 32;

	mov	rax, QWORD PTR thr$[rsp]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, 32					; 00000020H
	mov	rcx, QWORD PTR thr$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 499  : 	thr->priviledge |= THREAD_LEVEL_USER | THREAD_LEVEL_SUBTHREAD | ~THREAD_LEVEL_MAIN_THREAD;

	mov	rax, QWORD PTR thr$[rsp]
	movzx	eax, BYTE PTR [rax+305]
	or	eax, -9
	mov	rcx, QWORD PTR thr$[rsp]
	mov	BYTE PTR [rcx+305], al

; 500  : 	thr->procSlot = proc;

	mov	rax, QWORD PTR thr$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+643], rcx

; 501  : 	AuUserEntry *uentry = (AuUserEntry*)kmalloc(sizeof(AuUserEntry));

	mov	ecx, 60					; 0000003cH
	call	kmalloc
	mov	QWORD PTR uentry$[rsp], rax

; 502  : 	memset(uentry, 0, sizeof(AuUserEntry));

	mov	r8d, 60					; 0000003cH
	xor	edx, edx
	mov	rcx, QWORD PTR uentry$[rsp]
	call	memset

; 503  : 	uentry->argvaddr = 0;

	mov	rax, QWORD PTR uentry$[rsp]
	mov	QWORD PTR [rax+36], 0

; 504  : 	uentry->entrypoint = (uint64_t)entry;

	mov	rax, QWORD PTR uentry$[rsp]
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rax], rcx

; 505  : 	uentry->argvs = 0;

	mov	rax, QWORD PTR uentry$[rsp]
	mov	QWORD PTR [rax+44], 0

; 506  : 	uentry->cs = SEGVAL(GDT_ENTRY_USER_CODE, 3);

	mov	rax, QWORD PTR uentry$[rsp]
	mov	QWORD PTR [rax+16], 43			; 0000002bH

; 507  : 	uentry->ss = SEGVAL(GDT_ENTRY_USER_DATA, 3);

	mov	rax, QWORD PTR uentry$[rsp]
	mov	QWORD PTR [rax+24], 35			; 00000023H

; 508  : 	uentry->num_args = 0;

	mov	rax, QWORD PTR uentry$[rsp]
	mov	DWORD PTR [rax+32], 0

; 509  : 	uentry->rsp = (uint64_t)CreateUserStack(proc, proc->cr3);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR proc$[rsp]
	call	?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z ; CreateUserStack
	mov	rcx, QWORD PTR uentry$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 510  : 	uentry->stackBase = uentry->rsp;

	mov	rax, QWORD PTR uentry$[rsp]
	mov	rcx, QWORD PTR uentry$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+52], rcx

; 511  : 	thr->uentry = uentry;

	mov	rax, QWORD PTR thr$[rsp]
	mov	rcx, QWORD PTR uentry$[rsp]
	mov	QWORD PTR [rax+635], rcx

; 512  : 	int thread_indx = proc->num_thread;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+80]
	mov	DWORD PTR thread_indx$[rsp], eax

; 513  : 	proc->threads[proc->num_thread] = thr;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+80]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR thr$[rsp]
	mov	QWORD PTR [rcx+rax*8+96], rdx

; 514  : 	proc->num_thread++;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+80]
	inc	al
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+80], al

; 515  : 	return thread_indx;

	mov	eax, DWORD PTR thread_indx$[rsp]

; 516  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuCreateUserthread@@YAHPEAU_au_proc_@@P6AXPEAX@ZPEAD@Z ENDP ; AuCreateUserthread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
?AuProcessGetMutex@@YAPEAU_mutex_@@XZ PROC		; AuProcessGetMutex

; 481  : 	return process_mutex;

	mov	rax, QWORD PTR ?process_mutex@@3PEAU_mutex_@@EA ; process_mutex

; 482  : }

	ret	0
?AuProcessGetMutex@@YAPEAU_mutex_@@XZ ENDP		; AuProcessGetMutex
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
killable$1 = 32
proc$ = 64
pid$ = 72
?AuProcessWaitForTermination@@YAXPEAU_au_proc_@@H@Z PROC ; AuProcessWaitForTermination

; 365  : void AuProcessWaitForTermination(AuProcess *proc, int pid) {

$LN8:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN5@AuProcessW:

; 366  : 	do {
; 367  : 		AuProcess *killable = AuGetKillableProcess();

	call	?AuGetKillableProcess@@YAPEAU_au_proc_@@XZ ; AuGetKillableProcess
	mov	QWORD PTR killable$1[rsp], rax

; 368  : 
; 369  : 		if (killable) {

	cmp	QWORD PTR killable$1[rsp], 0
	je	SHORT $LN2@AuProcessW

; 370  : 			AuProcessClean(0, killable);

	mov	rdx, QWORD PTR killable$1[rsp]
	xor	ecx, ecx
	call	?AuProcessClean@@YAXPEAU_au_proc_@@0@Z	; AuProcessClean

; 371  : 			killable = NULL;

	mov	QWORD PTR killable$1[rsp], 0
$LN2@AuProcessW:

; 372  : 		}
; 373  : 
; 374  : 
; 375  : 		if (!killable){

	cmp	QWORD PTR killable$1[rsp], 0
	jne	SHORT $LN1@AuProcessW

; 376  : 			AuBlockThread(proc->main_thread);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	AuBlockThread

; 377  : 			AuSleepThread(proc->main_thread, 10000);

	mov	edx, 10000				; 00002710H
	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	AuSleepThread

; 378  : 			proc->state = PROCESS_STATE_SUSPENDED;

	mov	rax, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rax+20], 4

; 379  : 			x64_force_sched();

	call	x64_force_sched
$LN1@AuProcessW:

; 380  : 		}
; 381  : 	} while (1);

	xor	eax, eax
	cmp	eax, 1
	jne	SHORT $LN5@AuProcessW

; 382  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuProcessWaitForTermination@@YAXPEAU_au_proc_@@H@Z ENDP ; AuProcessWaitForTermination
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 0
proc$ = 32
?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z PROC	; AuProcessGetFileDesc

; 389  : int AuProcessGetFileDesc(AuProcess* proc) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 390  : 	for (int i = 0; i < FILE_DESC_PER_PROCESS; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@AuProcessG
$LN3@AuProcessG:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@AuProcessG:
	cmp	DWORD PTR i$1[rsp], 60			; 0000003cH
	jge	SHORT $LN2@AuProcessG

; 391  : 		if (!proc->fds[i])

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	cmp	QWORD PTR [rcx+rax*8+576], 0
	jne	SHORT $LN1@AuProcessG

; 392  : 			return i;

	mov	eax, DWORD PTR i$1[rsp]
	jmp	SHORT $LN5@AuProcessG
$LN1@AuProcessG:

; 393  : 	}

	jmp	SHORT $LN3@AuProcessG
$LN2@AuProcessG:

; 394  : 	return -1;

	mov	eax, -1
$LN5@AuProcessG:

; 395  : }

	add	rsp, 24
	ret	0
?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z ENDP	; AuProcessGetFileDesc
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
file$3 = 40
killable$4 = 48
proc$ = 80
?AuProcessExit@@YAXPEAU_au_proc_@@@Z PROC		; AuProcessExit

; 417  : void AuProcessExit(AuProcess* proc) {

$LN15:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 418  : 	x64_cli();

	call	x64_cli

; 419  : 	if (proc == root_proc) {

	mov	rax, QWORD PTR ?root_proc@@3PEAU_au_proc_@@EA ; root_proc
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN12@AuProcessE

; 420  : 		SeTextOut("[aurora]: cannot exit root process \r\n");

	lea	rcx, OFFSET FLAT:$SG4228
	call	SeTextOut

; 421  : 		return;

	jmp	$LN13@AuProcessE
$LN12@AuProcessE:

; 422  : 	}
; 423  : 
; 424  : 	kmalloc_debug_on(true);

	mov	cl, 1
	call	kmalloc_debug_on

; 425  : 
; 426  : 	proc->state = PROCESS_STATE_DIED;

	mov	rax, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rax+20], 8

; 427  : 
; 428  : 	/* free-up all allocated kernel resources */
; 429  : 
; 430  : 	AuSoundRemoveDSP(proc->main_thread->id);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+72]
	movzx	ecx, WORD PTR [rax+301]
	call	AuSoundRemoveDSP

; 431  : 
; 432  : 	/* close allocated signals */
; 433  : 	AuSignalRemoveAll(proc->main_thread);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z ; AuSignalRemoveAll

; 434  : 
; 435  : 	/* remove allocated postbox*/
; 436  : 	PostBoxDestroyByID(proc->main_thread->id);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+72]
	movzx	ecx, WORD PTR [rax+301]
	call	?PostBoxDestroyByID@@YAXG@Z		; PostBoxDestroyByID

; 437  : 
; 438  : 	/* mark all the threads as blocked */
; 439  : 	for (int i = 1; i < proc->num_thread - 1; i++) {

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN11@AuProcessE
$LN10@AuProcessE:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN11@AuProcessE:
	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+80]
	dec	eax
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN9@AuProcessE

; 440  : 		AuThread *killable = proc->threads[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+96]
	mov	QWORD PTR killable$4[rsp], rax

; 441  : 		if (killable) {

	cmp	QWORD PTR killable$4[rsp], 0
	je	SHORT $LN8@AuProcessE

; 442  : 			AuSignalRemoveAll(killable);

	mov	rcx, QWORD PTR killable$4[rsp]
	call	?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z ; AuSignalRemoveAll

; 443  : 			AuThreadMoveToTrash(killable);

	mov	rcx, QWORD PTR killable$4[rsp]
	call	?AuThreadMoveToTrash@@YAXPEAU_au_thread_@@@Z ; AuThreadMoveToTrash
$LN8@AuProcessE:

; 444  : 		}
; 445  : 	}

	jmp	SHORT $LN10@AuProcessE
$LN9@AuProcessE:

; 446  : 
; 447  : 
; 448  : 	/* here we free almost every possible
; 449  : 	 * data, that we can free
; 450  : 	 */
; 451  : 	for (int i = 0; i < FILE_DESC_PER_PROCESS; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@AuProcessE
$LN6@AuProcessE:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@AuProcessE:
	cmp	DWORD PTR i$2[rsp], 60			; 0000003cH
	jge	SHORT $LN5@AuProcessE

; 452  : 		AuVFSNode *file = proc->fds[i];

	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$3[rsp], rax

; 453  : 		if (file) {

	cmp	QWORD PTR file$3[rsp], 0
	je	SHORT $LN4@AuProcessE

; 454  : 			SeTextOut("Closing file -> %s , address -> %x \r\n", file->filename, file);

	mov	rax, QWORD PTR file$3[rsp]
	mov	r8, QWORD PTR file$3[rsp]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG4241
	call	SeTextOut

; 455  : 			if (file->flags & FS_FLAG_DEVICE || file->flags & FS_FLAG_FILE_SYSTEM)

	mov	rax, QWORD PTR file$3[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN2@AuProcessE
	mov	rax, QWORD PTR file$3[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN3@AuProcessE
$LN2@AuProcessE:

; 456  : 				continue;

	jmp	SHORT $LN6@AuProcessE
$LN3@AuProcessE:

; 457  : 			if (file->flags & FS_FLAG_GENERAL)  {

	mov	rax, QWORD PTR file$3[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN1@AuProcessE

; 458  : 				kfree(file);

	mov	rcx, QWORD PTR file$3[rsp]
	call	kfree
$LN1@AuProcessE:
$LN4@AuProcessE:

; 459  : 			}
; 460  : 		}
; 461  : 	}

	jmp	$LN6@AuProcessE
$LN5@AuProcessE:

; 462  : 
; 463  : 	UnmapMemMapping((void*)PROCESS_MMAP_ADDRESS, proc->proc_mmap_len);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+1104]
	mov	ecx, -1073741824			; ffffffffc0000000H
	call	?UnmapMemMapping@@YAXPEAX_K@Z		; UnmapMemMapping

; 464  : 
; 465  : 	/*unmap all shared memory mappings */
; 466  : 	AuSHMUnmapAll(proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?AuSHMUnmapAll@@YAXPEAU_au_proc_@@@Z	; AuSHMUnmapAll

; 467  : 
; 468  : 	AuProcessHeapMemDestroy(proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?AuProcessHeapMemDestroy@@YAXPEAU_au_proc_@@@Z ; AuProcessHeapMemDestroy

; 469  : 
; 470  : 	kfree(proc->file);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+1056]
	call	kfree

; 471  : 
; 472  : 	AuThreadMoveToTrash(proc->main_thread);

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?AuThreadMoveToTrash@@YAXPEAU_au_thread_@@@Z ; AuThreadMoveToTrash

; 473  : 	
; 474  : 	kmalloc_debug_on(false);

	xor	ecx, ecx
	call	kmalloc_debug_on

; 475  : 
; 476  : 	x64_force_sched();

	call	x64_force_sched
$LN13@AuProcessE:

; 477  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuProcessExit@@YAXPEAU_au_proc_@@@Z ENDP		; AuProcessExit
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 32
proc$ = 40
cr3$ = 48
main_thr_stack$ = 56
parent$ = 80
name$ = 88
?AuCreateProcessSlot@@YAPEAU_au_proc_@@PEAU1@PEAD@Z PROC ; AuCreateProcessSlot

; 279  : AuProcess* AuCreateProcessSlot(AuProcess* parent, char* name) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 280  : 	AuProcess* proc = (AuProcess*)kmalloc(sizeof(AuProcess));

	mov	ecx, 1128				; 00000468H
	call	kmalloc
	mov	QWORD PTR proc$[rsp], rax

; 281  : 	memset(proc, 0, sizeof(AuProcess));

	mov	r8d, 1128				; 00000468H
	xor	edx, edx
	mov	rcx, QWORD PTR proc$[rsp]
	call	memset

; 282  : 
; 283  : 	proc->proc_id = AuAllocateProcessID();

	call	?AuAllocateProcessID@@YAHXZ		; AuAllocateProcessID
	mov	rcx, QWORD PTR proc$[rsp]
	mov	DWORD PTR [rcx], eax

; 284  : 	memset(proc->name, 0, 16);

	mov	rax, QWORD PTR proc$[rsp]
	add	rax, 4
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, rax
	call	memset

; 285  : 	strcpy(proc->name, name);

	mov	rax, QWORD PTR proc$[rsp]
	add	rax, 4
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, rax
	call	strcpy

; 286  : 
; 287  : 	/* create empty virtual address space */
; 288  : 	uint64_t* cr3 = AuCreateVirtualAddressSpace();

	call	AuCreateVirtualAddressSpace
	mov	QWORD PTR cr3$[rsp], rax

; 289  : 	/* create the process main thread stack */
; 290  : 	uint64_t  main_thr_stack = (uint64_t)CreateUserStack(proc,cr3);

	mov	rdx, QWORD PTR cr3$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	call	?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z ; CreateUserStack
	mov	QWORD PTR main_thr_stack$[rsp], rax

; 291  : 	proc->state = PROCESS_STATE_NOT_READY;

	mov	rax, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rax+20], 1

; 292  : 	proc->cr3 = cr3;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 293  : 	proc->_main_stack_ = main_thr_stack;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR main_thr_stack$[rsp]
	mov	QWORD PTR [rax+48], rcx

; 294  : 
; 295  : 	proc->vmareas = initialize_list();

	call	initialize_list
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+1072], rax

; 296  : 	proc->shmmaps = initialize_list();

	call	initialize_list
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+1080], rax

; 297  : 	proc->shm_break = USER_SHARED_MEM_START;

	mov	rax, QWORD PTR proc$[rsp]
	mov	ecx, -2147483648			; 80000000H
	mov	QWORD PTR [rax+1088], rcx

; 298  : 	proc->proc_mem_heap = PROCESS_BREAK_ADDRESS;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+1096], 805306368		; 30000000H

; 299  : 	proc->proc_mmap_len = 0;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+1104], 0

; 300  : 
; 301  : 	for (int i = 0; i < FILE_DESC_PER_PROCESS; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuCreatePr
$LN2@AuCreatePr:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuCreatePr:
	cmp	DWORD PTR i$1[rsp], 60			; 0000003cH
	jge	SHORT $LN1@AuCreatePr

; 302  : 		proc->fds[i] = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], 0
	jmp	SHORT $LN2@AuCreatePr
$LN1@AuCreatePr:

; 303  : 
; 304  : 	proc->main_thread = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+72], 0

; 305  : 
; 306  : 	/* create the main thread after loading the
; 307  : 	* image file to process, because just after
; 308  : 	* creating the thread, scheduler starts
; 309  : 	* scheduling that thread
; 310  : 	*/
; 311  : 	AuAddProcess(parent, proc);

	mov	rdx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	call	?AuAddProcess@@YAXPEAU_au_proc_@@0@Z	; AuAddProcess

; 312  : 	return proc;

	mov	rax, QWORD PTR proc$[rsp]

; 313  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuCreateProcessSlot@@YAPEAU_au_proc_@@PEAU1@PEAD@Z ENDP ; AuCreateProcessSlot
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
?AuGetRootProcess@@YAPEAU_au_proc_@@XZ PROC		; AuGetRootProcess

; 339  : 	return root_proc;

	mov	rax, QWORD PTR ?root_proc@@3PEAU_au_proc_@@EA ; root_proc

; 340  : }

	ret	0
?AuGetRootProcess@@YAPEAU_au_proc_@@XZ ENDP		; AuGetRootProcess
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
num_args$ = 32
argvs$ = 40
about_str$ = 48
about$ = 56
?AuStartRootProc@@YAXXZ PROC				; AuStartRootProc

; 319  : void AuStartRootProc() {

$LN3:
	sub	rsp, 72					; 00000048H

; 320  : 	proc_first = NULL;

	mov	QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA, 0 ; proc_first

; 321  : 	proc_last = NULL;

	mov	QWORD PTR ?proc_last@@3PEAU_au_proc_@@EA, 0 ; proc_last

; 322  : 	pid = 1;

	mov	DWORD PTR pid, 1

; 323  : 	process_mutex = AuCreateMutex();

	call	AuCreateMutex
	mov	QWORD PTR ?process_mutex@@3PEAU_mutex_@@EA, rax ; process_mutex

; 324  : 	root_proc = AuCreateRootProc();

	call	?AuCreateRootProc@@YAPEAU_au_proc_@@XZ	; AuCreateRootProc
	mov	QWORD PTR ?root_proc@@3PEAU_au_proc_@@EA, rax ; root_proc

; 325  : 	int num_args = 1;

	mov	DWORD PTR num_args$[rsp], 1

; 326  : 	char* about_str = "-about";

	lea	rax, OFFSET FLAT:$SG4179
	mov	QWORD PTR about_str$[rsp], rax

; 327  : 	char* about = (char*)kmalloc(strlen(about_str));

	mov	rcx, QWORD PTR about_str$[rsp]
	call	strlen
	mov	ecx, eax
	call	kmalloc
	mov	QWORD PTR about$[rsp], rax

; 328  : 	strcpy(about, about_str);

	mov	rdx, QWORD PTR about_str$[rsp]
	mov	rcx, QWORD PTR about$[rsp]
	call	strcpy

; 329  : 	char** argvs = (char**)kmalloc(num_args);

	mov	ecx, DWORD PTR num_args$[rsp]
	call	kmalloc
	mov	QWORD PTR argvs$[rsp], rax

; 330  : 	memset(argvs, 0, num_args);

	mov	r8d, DWORD PTR num_args$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR argvs$[rsp]
	call	memset

; 331  : 	argvs[0] = about;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR argvs$[rsp]
	mov	rdx, QWORD PTR about$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 332  : 	AuLoadExecToProcess(root_proc, "/init.exe",num_args,argvs);

	mov	r9, QWORD PTR argvs$[rsp]
	mov	r8d, DWORD PTR num_args$[rsp]
	lea	rdx, OFFSET FLAT:$SG4184
	mov	rcx, QWORD PTR ?root_proc@@3PEAU_au_proc_@@EA ; root_proc
	call	?AuLoadExecToProcess@@YAXPEAU_au_proc_@@PEADHPEAPEAD@Z ; AuLoadExecToProcess

; 333  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuStartRootProc@@YAXXZ ENDP				; AuStartRootProc
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 32
location$ = 40
blk$2 = 48
tv75 = 56
proc$ = 80
cr3$ = 88
?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z PROC	; CreateUserStack

; 178  : uint64_t* CreateUserStack(AuProcess *proc, uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 179  : #define USER_STACK 0x0000700000000000 
; 180  : 	uint64_t location = USER_STACK;

	mov	rax, 123145302310912			; 0000700000000000H
	mov	QWORD PTR location$[rsp], rax

; 181  : 	location += proc->_user_stack_index_;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR location$[rsp], rax

; 182  : 	for (int i = 0; i < PROCESS_USER_STACK_SZ / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@CreateUser
$LN2@CreateUser:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@CreateUser:
	cmp	DWORD PTR i$1[rsp], 128			; 00000080H
	jge	SHORT $LN1@CreateUser

; 183  : 		uint64_t* blk = (uint64_t*)P2V((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	P2V
	mov	QWORD PTR blk$2[rsp], rax

; 184  : 		AuMapPageEx(cr3, V2P((size_t)blk), location + i * PAGE_SIZE, X86_64_PAGING_USER);

	imul	eax, DWORD PTR i$1[rsp], 4096		; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv75[rsp], rax
	mov	rcx, QWORD PTR blk$2[rsp]
	call	V2P
	mov	r9b, 4
	mov	rcx, QWORD PTR tv75[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	AuMapPageEx

; 185  : 	}

	jmp	SHORT $LN2@CreateUser
$LN1@CreateUser:

; 186  : 
; 187  : 	proc->_user_stack_index_ += PROCESS_USER_STACK_SZ;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+56]
	add	rax, 524288				; 00080000H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+56], rax

; 188  : 	return (uint64_t*)(location + (PROCESS_USER_STACK_SZ));

	mov	rax, QWORD PTR location$[rsp]
	add	rax, 524288				; 00080000H

; 189  : }

	add	rsp, 72					; 00000048H
	ret	0
?CreateUserStack@@YAPEA_KPEAU_au_proc_@@PEA_K@Z ENDP	; CreateUserStack
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
proc$ = 0
thread$ = 32
?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z PROC ; AuProcessFindSubThread

; 167  : AuProcess* AuProcessFindSubThread(AuThread* thread) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 168  : 	AuProcess* proc = (AuProcess*)thread->procSlot;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+643]
	mov	QWORD PTR proc$[rsp], rax

; 169  : 	return proc;

	mov	rax, QWORD PTR proc$[rsp]

; 170  : }

	add	rsp, 24
	ret	0
?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ENDP ; AuProcessFindSubThread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
proc_$1 = 0
thread$ = 32
?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z PROC ; AuProcessFindThread

; 151  : AuProcess *AuProcessFindThread(AuThread* thread) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 152  : 	for (AuProcess *proc_ = proc_first; proc_ != NULL; proc_ = proc_->next) {

	mov	rax, QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA ; proc_first
	mov	QWORD PTR proc_$1[rsp], rax
	jmp	SHORT $LN4@AuProcessF
$LN3@AuProcessF:
	mov	rax, QWORD PTR proc_$1[rsp]
	mov	rax, QWORD PTR [rax+1112]
	mov	QWORD PTR proc_$1[rsp], rax
$LN4@AuProcessF:
	cmp	QWORD PTR proc_$1[rsp], 0
	je	SHORT $LN2@AuProcessF

; 153  : 		if (proc_->main_thread == thread) {

	mov	rax, QWORD PTR proc_$1[rsp]
	mov	rcx, QWORD PTR thread$[rsp]
	cmp	QWORD PTR [rax+72], rcx
	jne	SHORT $LN1@AuProcessF

; 154  : 			return proc_;

	mov	rax, QWORD PTR proc_$1[rsp]
	jmp	SHORT $LN5@AuProcessF
$LN1@AuProcessF:

; 155  : 		}
; 156  : 	}

	jmp	SHORT $LN3@AuProcessF
$LN2@AuProcessF:

; 157  : 
; 158  : 	return NULL;

	xor	eax, eax
$LN5@AuProcessF:

; 159  : }

	add	rsp, 24
	ret	0
?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ENDP ; AuProcessFindThread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
proc_$1 = 0
pid$ = 32
?AuProcessFindPID@@YAPEAU_au_proc_@@H@Z PROC		; AuProcessFindPID

; 138  : AuProcess *AuProcessFindPID(int pid) {

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 139  : 	for (AuProcess *proc_ = proc_first; proc_ != NULL; proc_ = proc_->next) {

	mov	rax, QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA ; proc_first
	mov	QWORD PTR proc_$1[rsp], rax
	jmp	SHORT $LN4@AuProcessF
$LN3@AuProcessF:
	mov	rax, QWORD PTR proc_$1[rsp]
	mov	rax, QWORD PTR [rax+1112]
	mov	QWORD PTR proc_$1[rsp], rax
$LN4@AuProcessF:
	cmp	QWORD PTR proc_$1[rsp], 0
	je	SHORT $LN2@AuProcessF

; 140  : 		if (proc_->proc_id == pid)

	mov	rax, QWORD PTR proc_$1[rsp]
	mov	ecx, DWORD PTR pid$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@AuProcessF

; 141  : 			return proc_;

	mov	rax, QWORD PTR proc_$1[rsp]
	jmp	SHORT $LN5@AuProcessF
$LN1@AuProcessF:

; 142  : 	}

	jmp	SHORT $LN3@AuProcessF
$LN2@AuProcessF:

; 143  : 	return NULL;

	xor	eax, eax
$LN5@AuProcessF:

; 144  : }

	add	rsp, 24
	ret	0
?AuProcessFindPID@@YAPEAU_au_proc_@@H@Z ENDP		; AuProcessFindPID
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 32
page$2 = 40
phys$3 = 48
location$ = 56
proc$ = 80
ptr$ = 88
cr3$ = 96
?KernelStackFree@@YAXPEAU_au_proc_@@PEAXPEA_K@Z PROC	; KernelStackFree

; 216  : void KernelStackFree(AuProcess* proc,void* ptr, uint64_t *cr3) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 217  : 	uint64_t location = (uint64_t)ptr;

	mov	rax, QWORD PTR ptr$[rsp]
	mov	QWORD PTR location$[rsp], rax

; 218  : 	for (int i = 0; i < 8192 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@KernelStac
$LN3@KernelStac:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@KernelStac:
	cmp	DWORD PTR i$1[rsp], 2
	jge	SHORT $LN2@KernelStac

; 219  : 		AuVPage* page = AuVmmngrGetPage(location + i * PAGE_SIZE, VIRT_GETPAGE_ONLY_RET, VIRT_GETPAGE_ONLY_RET);

	imul	eax, DWORD PTR i$1[rsp], 4096		; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8b, 2
	mov	dl, 2
	mov	rcx, rax
	call	AuVmmngrGetPage
	mov	QWORD PTR page$2[rsp], rax

; 220  : 		uint64_t phys = page->bits.page << PAGE_SHIFT;

	mov	rax, QWORD PTR page$2[rsp]
	mov	rax, QWORD PTR [rax]
	shr	rax, 12
	and	rax, 268435455				; 0fffffffH
	shl	rax, 12
	mov	QWORD PTR phys$3[rsp], rax

; 221  : 		if (phys) {

	cmp	QWORD PTR phys$3[rsp], 0
	je	SHORT $LN1@KernelStac

; 222  : 			AuPmmngrFree((void*)phys);

	mov	rcx, QWORD PTR phys$3[rsp]
	call	AuPmmngrFree
$LN1@KernelStac:

; 223  : 		}
; 224  : 		page->bits.page = 0;

	mov	rax, QWORD PTR page$2[rsp]
	mov	rcx, -1099511623681			; ffffff0000000fffH
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	mov	rcx, QWORD PTR page$2[rsp]
	mov	QWORD PTR [rcx], rax

; 225  : 	}

	jmp	$LN3@KernelStac
$LN2@KernelStac:

; 226  : 	proc->_kstack_index_ -= 8192;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+64]
	sub	rax, 8192				; 00002000H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+64], rax

; 227  : }

	add	rsp, 72					; 00000048H
	ret	0
?KernelStackFree@@YAXPEAU_au_proc_@@PEAXPEA_K@Z ENDP	; KernelStackFree
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
i$1 = 32
location$ = 40
p$2 = 48
proc$ = 80
cr3$ = 88
?CreateKernelStack@@YA_KPEAU_au_proc_@@PEA_K@Z PROC	; CreateKernelStack

; 197  : uint64_t CreateKernelStack(AuProcess* proc, uint64_t *cr3) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 198  : 	uint64_t location = KERNEL_STACK_LOCATION;

	mov	rax, -5497558138880			; fffffb0000000000H
	mov	QWORD PTR location$[rsp], rax

; 199  : 	location += proc->_kstack_index_;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR location$[rsp], rax

; 200  : 
; 201  : 	for (int i = 0; i < 8192 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@CreateKern
$LN2@CreateKern:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@CreateKern:
	cmp	DWORD PTR i$1[rsp], 2
	jge	SHORT $LN1@CreateKern

; 202  : 		void* p = AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR p$2[rsp], rax

; 203  : 		AuMapPageEx(cr3, (uint64_t)p, location + i * PAGE_SIZE, X86_64_PAGING_USER);

	imul	eax, DWORD PTR i$1[rsp], 4096		; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9b, 4
	mov	r8, rax
	mov	rdx, QWORD PTR p$2[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	AuMapPageEx

; 204  : 	}

	jmp	SHORT $LN2@CreateKern
$LN1@CreateKern:

; 205  : 
; 206  : 	proc->_kstack_index_ += 8192;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+64]
	add	rax, 8192				; 00002000H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+64], rax

; 207  : 	return (location + 8192);

	mov	rax, QWORD PTR location$[rsp]
	add	rax, 8192				; 00002000H

; 208  : }

	add	rsp, 72					; 00000048H
	ret	0
?CreateKernelStack@@YA_KPEAU_au_proc_@@PEA_K@Z ENDP	; CreateKernelStack
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
parent$ = 48
proc$ = 56
?AuRemoveProcess@@YAXPEAU_au_proc_@@0@Z PROC		; AuRemoveProcess

; 85   : void AuRemoveProcess(AuProcess* parent, AuProcess* proc) {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 86   : 	if (proc_first == NULL)

	cmp	QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA, 0 ; proc_first
	jne	SHORT $LN5@AuRemovePr

; 87   : 		return;

	jmp	$LN6@AuRemovePr
$LN5@AuRemovePr:

; 88   : 
; 89   : 	if (proc == proc_first) {

	mov	rax, QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA ; proc_first
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN4@AuRemovePr

; 90   : 		proc_first = proc_first->next;

	mov	rax, QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA ; proc_first
	mov	rax, QWORD PTR [rax+1112]
	mov	QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA, rax ; proc_first

; 91   : 	}
; 92   : 	else {

	jmp	SHORT $LN3@AuRemovePr
$LN4@AuRemovePr:

; 93   : 		proc->prev->next = proc->next;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+1120]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+1112]
	mov	QWORD PTR [rax+1112], rcx
$LN3@AuRemovePr:

; 94   : 	}
; 95   : 
; 96   : 	if (proc == proc_last) {

	mov	rax, QWORD PTR ?proc_last@@3PEAU_au_proc_@@EA ; proc_last
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN2@AuRemovePr

; 97   : 		proc_last = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+1120]
	mov	QWORD PTR ?proc_last@@3PEAU_au_proc_@@EA, rax ; proc_last

; 98   : 	}
; 99   : 	else {

	jmp	SHORT $LN1@AuRemovePr
$LN2@AuRemovePr:

; 100  : 		proc->next->prev = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+1112]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+1120]
	mov	QWORD PTR [rax+1120], rcx
$LN1@AuRemovePr:

; 101  : 	}
; 102  : 	kfree(proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	kfree
$LN6@AuRemovePr:

; 103  : }

	add	rsp, 40					; 00000028H
	ret	0
?AuRemoveProcess@@YAXPEAU_au_proc_@@0@Z ENDP		; AuRemoveProcess
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\process.cpp
_TEXT	SEGMENT
parent$ = 8
proc$ = 16
?AuAddProcess@@YAXPEAU_au_proc_@@0@Z PROC		; AuAddProcess

; 63   : void AuAddProcess(AuProcess* parent, AuProcess *proc) {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 64   : 	proc->next = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+1112], 0

; 65   : 	proc->prev = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+1120], 0

; 66   : 
; 67   : 	if (proc_first == NULL) {

	cmp	QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA, 0 ; proc_first
	jne	SHORT $LN2@AuAddProce

; 68   : 		proc_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?proc_last@@3PEAU_au_proc_@@EA, rax ; proc_last

; 69   : 		proc_first = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?proc_first@@3PEAU_au_proc_@@EA, rax ; proc_first

; 70   : 	}
; 71   : 	else {

	jmp	SHORT $LN1@AuAddProce
$LN2@AuAddProce:

; 72   : 		proc_last->next = proc;

	mov	rax, QWORD PTR ?proc_last@@3PEAU_au_proc_@@EA ; proc_last
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+1112], rcx

; 73   : 		proc->prev = proc_last;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR ?proc_last@@3PEAU_au_proc_@@EA ; proc_last
	mov	QWORD PTR [rax+1120], rcx
$LN1@AuAddProce:

; 74   : 	}
; 75   : 	proc_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?proc_last@@3PEAU_au_proc_@@EA, rax ; proc_last

; 76   : 	//proc->parent = parent;
; 77   : }

	ret	0
?AuAddProcess@@YAXPEAU_au_proc_@@0@Z ENDP		; AuAddProcess
_TEXT	ENDS
END
