; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?last_mark@@3_KA				; last_mark
PUBLIC	?_debug_on@@3_NA				; _debug_on
_BSS	SEGMENT
?last_mark@@3_KA DQ 01H DUP (?)				; last_mark
?_debug_on@@3_NA DB 01H DUP (?)				; _debug_on
_BSS	ENDS
CONST	SEGMENT
$SG2920	DB	'Prev -> %x || Current -> %x | Next -> %x ', 0dH, 0aH, 00H
	ORG $+4
$SG2939	DB	'Meta found corrupted block ', 0dH, 0aH, 00H
CONST	ENDS
PUBLIC	AuHeapInitialize
PUBLIC	kmalloc
PUBLIC	krealloc
PUBLIC	kcalloc
PUBLIC	kfree
PUBLIC	kmalloc_debug_on
PUBLIC	?au_free_page@@YAXPEAXH@Z			; au_free_page
PUBLIC	?au_request_page@@YAPEAXH@Z			; au_request_page
PUBLIC	?au_split_block@@YA_NPEAU_meta_data_@@_K@Z	; au_split_block
PUBLIC	?au_expand_kmalloc@@YAX_K@Z			; au_expand_kmalloc
PUBLIC	?kheap_debug@@YAXXZ				; kheap_debug
PUBLIC	?merge_next@@YAXPEAU_meta_data_@@@Z		; merge_next
PUBLIC	?merge_prev@@YAXPEAU_meta_data_@@@Z		; merge_prev
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	AuMapPage:PROC
EXTRN	AuGetFreePage:PROC
EXTRN	AuFreePages:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuTextOut:PROC
EXTRN	SeTextOut:PROC
_BSS	SEGMENT
	ALIGN	8

first_block DQ	01H DUP (?)
last_block DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$AuHeapInitialize DD imagerel $LN3
	DD	imagerel $LN3+201
	DD	imagerel $unwind$AuHeapInitialize
$pdata$kmalloc DD imagerel $LN11
	DD	imagerel $LN11+240
	DD	imagerel $unwind$kmalloc
$pdata$krealloc DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$krealloc
$pdata$kcalloc DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$kcalloc
$pdata$kfree DD	imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$kfree
$pdata$?au_free_page@@YAXPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?au_free_page@@YAXPEAXH@Z
$pdata$?au_request_page@@YAPEAXH@Z DD imagerel $LN6
	DD	imagerel $LN6+126
	DD	imagerel $unwind$?au_request_page@@YAPEAXH@Z
$pdata$?au_split_block@@YA_NPEAU_meta_data_@@_K@Z DD imagerel $LN7
	DD	imagerel $LN7+267
	DD	imagerel $unwind$?au_split_block@@YA_NPEAU_meta_data_@@_K@Z
$pdata$?au_expand_kmalloc@@YAX_K@Z DD imagerel $LN6
	DD	imagerel $LN6+345
	DD	imagerel $unwind$?au_expand_kmalloc@@YAX_K@Z
$pdata$?kheap_debug@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+82
	DD	imagerel $unwind$?kheap_debug@@YAXXZ
$pdata$?merge_next@@YAXPEAU_meta_data_@@@Z DD imagerel $LN10
	DD	imagerel $LN10+246
	DD	imagerel $unwind$?merge_next@@YAXPEAU_meta_data_@@@Z
$pdata$?merge_prev@@YAXPEAU_meta_data_@@@Z DD imagerel $LN6
	DD	imagerel $LN6+147
	DD	imagerel $unwind$?merge_prev@@YAXPEAU_meta_data_@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$AuHeapInitialize DD 010401H
	DD	08204H
$unwind$kmalloc DD 010801H
	DD	08208H
$unwind$krealloc DD 010d01H
	DD	0620dH
$unwind$kcalloc DD 010e01H
	DD	0620eH
$unwind$kfree DD 010901H
	DD	06209H
$unwind$?au_free_page@@YAXPEAXH@Z DD 010d01H
	DD	0420dH
$unwind$?au_request_page@@YAPEAXH@Z DD 010801H
	DD	08208H
$unwind$?au_split_block@@YA_NPEAU_meta_data_@@_K@Z DD 010e01H
	DD	0620eH
$unwind$?au_expand_kmalloc@@YAX_K@Z DD 010901H
	DD	0a209H
$unwind$?kheap_debug@@YAXXZ DD 010401H
	DD	06204H
$unwind$?merge_next@@YAXPEAU_meta_data_@@@Z DD 010901H
	DD	02209H
$unwind$?merge_prev@@YAXPEAU_meta_data_@@@Z DD 010901H
	DD	06209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta_prev$1 = 32
meta$ = 64
?merge_prev@@YAXPEAU_meta_data_@@@Z PROC		; merge_prev

; 239  : void merge_prev(meta_data_t* meta) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 240  : 	if (meta->prev != NULL) {

	mov	rax, QWORD PTR meta$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN3@merge_prev

; 241  : 		uint64_t meta_prev = (uint64_t)meta->prev;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR meta_prev$1[rsp], rax

; 242  : 		if (meta_prev < 0xFFFFE00000000000){

	mov	rax, -35184372088832			; ffffe00000000000H
	cmp	QWORD PTR meta_prev$1[rsp], rax
	jae	SHORT $LN2@merge_prev

; 243  : 			//this block is corrupted
; 244  : 			SeTextOut("Meta found corrupted block \r\n");

	lea	rcx, OFFSET FLAT:$SG2939
	call	SeTextOut

; 245  : 			last_block->next = meta;

	mov	rax, QWORD PTR last_block
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 246  : 			meta->prev = last_block;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR last_block
	mov	QWORD PTR [rax+16], rcx

; 247  : 			meta->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+8], 0

; 248  : 			return;

	jmp	SHORT $LN4@merge_prev
$LN2@merge_prev:

; 249  : 		}
; 250  : 		if (meta->prev->magic == MAGIC_FREE)

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+16]
	cmp	DWORD PTR [rax], 86056995		; 05212023H
	jne	SHORT $LN1@merge_prev

; 251  : 			merge_next(meta->prev);

	mov	rax, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?merge_next@@YAXPEAU_meta_data_@@@Z	; merge_next
$LN1@merge_prev:
$LN3@merge_prev:
$LN4@merge_prev:

; 252  : 	}
; 253  : }

	add	rsp, 56					; 00000038H
	ret	0
?merge_prev@@YAXPEAU_meta_data_@@@Z ENDP		; merge_prev
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
tv72 = 0
addr_valid$ = 8
meta$ = 32
?merge_next@@YAXPEAU_meta_data_@@@Z PROC		; merge_next

; 208  : void merge_next(meta_data_t *meta) {

$LN10:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 209  : 	if (meta->next == NULL)

	mov	rax, QWORD PTR meta$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN5@merge_next

; 210  : 		return;

	jmp	$LN6@merge_next
$LN5@merge_next:

; 211  : 	uint64_t addr_valid = (uint64_t)meta->next;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR addr_valid$[rsp], rax

; 212  : 	if (addr_valid < 0xFFFFE00000000000) {

	mov	rax, -35184372088832			; ffffe00000000000H
	cmp	QWORD PTR addr_valid$[rsp], rax
	jae	SHORT $LN4@merge_next

; 213  : 		meta->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+8], 0

; 214  : 		return;

	jmp	$LN6@merge_next
$LN4@merge_next:

; 215  : 	}
; 216  : 
; 217  : 	if (!meta->next->magic == MAGIC_FREE)

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN8@merge_next
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN9@merge_next
$LN8@merge_next:
	mov	DWORD PTR tv72[rsp], 0
$LN9@merge_next:
	cmp	DWORD PTR tv72[rsp], 86056995		; 05212023H
	jne	SHORT $LN3@merge_next

; 218  : 		return;

	jmp	SHORT $LN6@merge_next
$LN3@merge_next:

; 219  : 	
; 220  : 	
; 221  : 	if (last_block == meta->next)

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR last_block, rax
	jne	SHORT $LN2@merge_next

; 222  : 		last_block = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR last_block, rax
$LN2@merge_next:

; 223  : 
; 224  : 	
; 225  : 
; 226  : 	meta->size += meta->next->size + sizeof(meta_data_t);

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR meta$[rsp]
	movsxd	rcx, DWORD PTR [rcx+4]
	lea	rax, QWORD PTR [rcx+rax+24]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 227  : 
; 228  : 	if (meta->next->next != NULL)

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN1@merge_next

; 229  : 		meta->next->next->prev = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN1@merge_next:

; 230  : 
; 231  : 	meta->next = meta->next->next;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx+8], rax
$LN6@merge_next:

; 232  : }

	add	rsp, 24
	ret	0
?merge_next@@YAXPEAU_meta_data_@@@Z ENDP		; merge_next
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
block$1 = 32
?kheap_debug@@YAXXZ PROC				; kheap_debug

; 197  : void kheap_debug() {

$LN6:
	sub	rsp, 56					; 00000038H

; 198  : 	for (meta_data_t *block = first_block; block != NULL; block = block->next) {

	mov	rax, QWORD PTR first_block
	mov	QWORD PTR block$1[rsp], rax
	jmp	SHORT $LN3@kheap_debu
$LN2@kheap_debu:
	mov	rax, QWORD PTR block$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR block$1[rsp], rax
$LN3@kheap_debu:
	cmp	QWORD PTR block$1[rsp], 0
	je	SHORT $LN1@kheap_debu

; 199  : 		AuTextOut("Prev -> %x || Current -> %x | Next -> %x \r\n", block->prev, block, block->next);

	mov	rax, QWORD PTR block$1[rsp]
	mov	r9, QWORD PTR [rax+8]
	mov	r8, QWORD PTR block$1[rsp]
	mov	rax, QWORD PTR block$1[rsp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:$SG2920
	call	AuTextOut

; 200  : 	}

	jmp	SHORT $LN2@kheap_debu
$LN1@kheap_debu:

; 201  : }

	add	rsp, 56					; 00000038H
	ret	0
?kheap_debug@@YAXXZ ENDP				; kheap_debug
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
tv67 = 32
meta$ = 40
req_pages$ = 48
page$ = 56
desc_addr$ = 64
lm$ = 72
req_size$ = 96
?au_expand_kmalloc@@YAX_K@Z PROC			; au_expand_kmalloc

; 121  : void au_expand_kmalloc(size_t req_size) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 122  : 	size_t req_pages = (req_size / 0x1000) + ((req_size % 0x1000) ? 1 : 0);

	xor	edx, edx
	mov	rax, QWORD PTR req_size$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN4@au_expand_
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN5@au_expand_
$LN4@au_expand_:
	mov	DWORD PTR tv67[rsp], 0
$LN5@au_expand_:
	xor	edx, edx
	mov	rax, QWORD PTR req_size$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	movsxd	rcx, DWORD PTR tv67[rsp]
	add	rax, rcx
	mov	QWORD PTR req_pages$[rsp], rax

; 123  : 	//req_pages = (req_size + sizeof(meta_data_t)) / 4096 + 1;
; 124  : 
; 125  : 	void* page = au_request_page(req_pages);

	mov	ecx, DWORD PTR req_pages$[rsp]
	call	?au_request_page@@YAPEAXH@Z		; au_request_page
	mov	QWORD PTR page$[rsp], rax

; 126  : 	uint8_t* desc_addr = (uint8_t*)page;

	mov	rax, QWORD PTR page$[rsp]
	mov	QWORD PTR desc_addr$[rsp], rax

; 127  : 	/* setup the first meta data block */
; 128  : 	meta_data_t *meta = (meta_data_t*)desc_addr;

	mov	rax, QWORD PTR desc_addr$[rsp]
	mov	QWORD PTR meta$[rsp], rax

; 129  : 
; 130  : 	//meta->free = true;
; 131  : 	meta->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+8], 0

; 132  : 	meta->prev = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+16], 0

; 133  : 	meta->magic = MAGIC_FREE;

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax], 86056995		; 05212023H

; 134  : 	
; 135  : 	/* meta->size holds only the usable area size for user */
; 136  : 	meta->size = (req_pages * 4096) - sizeof(meta_data_t);

	imul	rax, QWORD PTR req_pages$[rsp], 4096	; 00001000H
	sub	rax, 24
	mov	rcx, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 137  : 	meta->prev = last_block;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR last_block
	mov	QWORD PTR [rax+16], rcx

; 138  : 	last_block->next = meta;

	mov	rax, QWORD PTR last_block
	mov	rcx, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 139  : 	last_block = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR last_block, rax

; 140  : 
; 141  : 	
; 142  : 
; 143  : 	/* now check if we can merge the last block and this
; 144  : 	* into one
; 145  : 	*/
; 146  : 	if (meta->prev->magic == MAGIC_FREE) {

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+16]
	cmp	DWORD PTR [rax], 86056995		; 05212023H
	jne	SHORT $LN1@au_expand_

; 147  : 		meta->prev->size += meta->size - sizeof(meta_data_t);

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR meta$[rsp]
	movsxd	rcx, DWORD PTR [rcx+4]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rax, QWORD PTR [rax+rcx-24]
	mov	rcx, QWORD PTR meta$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	DWORD PTR [rcx+4], eax

; 148  : 		meta->prev->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rax+8], 0

; 149  : 		last_block = meta->prev;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR last_block, rax
$LN1@au_expand_:

; 150  : 	}
; 151  : 
; 152  : 	uint64_t lm = (uint64_t)page;

	mov	rax, QWORD PTR page$[rsp]
	mov	QWORD PTR lm$[rsp], rax

; 153  : 	last_mark = (uint64_t)(lm + (req_pages * 4096));

	imul	rax, QWORD PTR req_pages$[rsp], 4096	; 00001000H
	mov	rcx, QWORD PTR lm$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?last_mark@@3_KA, rax		; last_mark

; 154  : 
; 155  : }

	add	rsp, 88					; 00000058H
	ret	0
?au_expand_kmalloc@@YAX_K@Z ENDP			; au_expand_kmalloc
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
new_block_m$ = 0
new_block$ = 8
size$ = 16
meta_block_a$ = 24
new_block_pos$ = 32
splitable$ = 64
req_size$ = 72
?au_split_block@@YA_NPEAU_meta_data_@@_K@Z PROC		; au_split_block

; 78   : bool au_split_block(meta_data_t* splitable, size_t req_size) {

$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 79   : 
; 80   : 	uint8_t* meta_block_a = (uint8_t*)splitable;

	mov	rax, QWORD PTR splitable$[rsp]
	mov	QWORD PTR meta_block_a$[rsp], rax

; 81   : 	size_t size = splitable->size - req_size - sizeof(meta_data_t);

	mov	rax, QWORD PTR splitable$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	sub	rax, QWORD PTR req_size$[rsp]
	sub	rax, 24
	mov	QWORD PTR size$[rsp], rax

; 82   : 
; 83   : 	if (size <= sizeof(meta_data_t))

	cmp	QWORD PTR size$[rsp], 24
	ja	SHORT $LN4@au_split_b

; 84   : 		return 1;

	mov	al, 1
	jmp	$LN5@au_split_b
$LN4@au_split_b:

; 85   : 
; 86   : 	uint8_t* new_block = (uint8_t*)(meta_block_a + sizeof(meta_data_t)+req_size);

	mov	rax, QWORD PTR meta_block_a$[rsp]
	mov	rcx, QWORD PTR req_size$[rsp]
	lea	rax, QWORD PTR [rax+rcx+24]
	mov	QWORD PTR new_block$[rsp], rax

; 87   : 	meta_data_t* new_block_m = (meta_data_t*)new_block;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	QWORD PTR new_block_m$[rsp], rax

; 88   : 	
; 89   : 
; 90   : 	uint64_t new_block_pos = (uint64_t)new_block;

	mov	rax, QWORD PTR new_block$[rsp]
	mov	QWORD PTR new_block_pos$[rsp], rax

; 91   : 	if ((new_block_pos + req_size + sizeof(meta_data_t)) > last_mark)

	mov	rax, QWORD PTR new_block_pos$[rsp]
	mov	rcx, QWORD PTR req_size$[rsp]
	lea	rax, QWORD PTR [rax+rcx+24]
	cmp	rax, QWORD PTR ?last_mark@@3_KA		; last_mark
	jbe	SHORT $LN3@au_split_b

; 92   : 		return 0;

	xor	al, al
	jmp	$LN5@au_split_b
$LN3@au_split_b:

; 93   : 
; 94   : 
; 95   : 	//new_block->free = true;
; 96   : 	new_block_m->magic = MAGIC_FREE;

	mov	rax, QWORD PTR new_block_m$[rsp]
	mov	DWORD PTR [rax], 86056995		; 05212023H

; 97   : 	new_block_m->prev = splitable;

	mov	rax, QWORD PTR new_block_m$[rsp]
	mov	rcx, QWORD PTR splitable$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 98   : 	new_block_m->next = splitable->next;

	mov	rax, QWORD PTR new_block_m$[rsp]
	mov	rcx, QWORD PTR splitable$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 99   : 	if (new_block_m->next != NULL)

	mov	rax, QWORD PTR new_block_m$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@au_split_b

; 100  : 		new_block_m->next->prev = new_block_m;

	mov	rax, QWORD PTR new_block_m$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR new_block_m$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN2@au_split_b:

; 101  : 
; 102  : 
; 103  : 	new_block_m->size = size;

	mov	rax, QWORD PTR new_block_m$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 104  : 
; 105  : 
; 106  : 	splitable->size = req_size;

	mov	rax, QWORD PTR splitable$[rsp]
	mov	ecx, DWORD PTR req_size$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 107  : 	splitable->next = new_block_m;

	mov	rax, QWORD PTR splitable$[rsp]
	mov	rcx, QWORD PTR new_block_m$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 108  : 
; 109  : 
; 110  : 	if (last_block == splitable)

	mov	rax, QWORD PTR splitable$[rsp]
	cmp	QWORD PTR last_block, rax
	jne	SHORT $LN1@au_split_b

; 111  : 		last_block = new_block_m;

	mov	rax, QWORD PTR new_block_m$[rsp]
	mov	QWORD PTR last_block, rax
$LN1@au_split_b:

; 112  : 
; 113  : 
; 114  : 	return 1;

	mov	al, 1
$LN5@au_split_b:

; 115  : }

	add	rsp, 56					; 00000038H
	ret	0
?au_split_block@@YA_NPEAU_meta_data_@@_K@Z ENDP		; au_split_block
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
i$1 = 32
page$ = 40
page_$ = 48
p$2 = 56
pages$ = 80
?au_request_page@@YAPEAXH@Z PROC			; au_request_page

; 305  : void* au_request_page(int pages) {

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 306  : 	uint64_t* page = AuGetFreePage(0, false);

	xor	edx, edx
	xor	ecx, ecx
	call	AuGetFreePage
	mov	QWORD PTR page$[rsp], rax

; 307  : 	uint64_t page_ = (uint64_t)page;

	mov	rax, QWORD PTR page$[rsp]
	mov	QWORD PTR page_$[rsp], rax

; 308  : 
; 309  : 	for (size_t i = 0; i < pages; i++) {

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@au_request
$LN2@au_request:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN3@au_request:
	movsxd	rax, DWORD PTR pages$[rsp]
	cmp	QWORD PTR i$1[rsp], rax
	jae	SHORT $LN1@au_request

; 310  : 		void* p = AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR p$2[rsp], rax

; 311  : 		AuMapPage((uint64_t)p, page_ + i * 4096, 0);

	imul	rax, QWORD PTR i$1[rsp], 4096		; 00001000H
	mov	rcx, QWORD PTR page_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR p$2[rsp]
	call	AuMapPage

; 312  : 	}

	jmp	SHORT $LN2@au_request
$LN1@au_request:

; 313  : 	return page;

	mov	rax, QWORD PTR page$[rsp]

; 314  : }

	add	rsp, 72					; 00000048H
	ret	0
?au_request_page@@YAPEAXH@Z ENDP			; au_request_page
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
ptr$ = 48
pages$ = 56
?au_free_page@@YAXPEAXH@Z PROC				; au_free_page

; 322  : void au_free_page(void* ptr, int pages) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 323  : 	AuFreePages((uint64_t)ptr, true, pages);

	movsxd	rax, DWORD PTR pages$[rsp]
	mov	r8, rax
	mov	dl, 1
	mov	rcx, QWORD PTR ptr$[rsp]
	call	AuFreePages

; 324  : }

	add	rsp, 40					; 00000028H
	ret	0
?au_free_page@@YAXPEAXH@Z ENDP				; au_free_page
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
bit$ = 8
kmalloc_debug_on PROC

; 327  : void kmalloc_debug_on(bool bit) {

	mov	BYTE PTR [rsp+8], cl

; 328  : 	_debug_on = bit;

	movzx	eax, BYTE PTR bit$[rsp]
	mov	BYTE PTR ?_debug_on@@3_NA, al		; _debug_on

; 329  : }

	ret	0
kmalloc_debug_on ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta$ = 32
actual_addr$ = 40
ptr$ = 64
kfree	PROC

; 259  : void kfree(void* ptr) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 260  : 	uint8_t* actual_addr = (uint8_t*)ptr;

	mov	rax, QWORD PTR ptr$[rsp]
	mov	QWORD PTR actual_addr$[rsp], rax

; 261  : 	meta_data_t *meta = (meta_data_t*)(actual_addr - sizeof(meta_data_t));

	mov	rax, QWORD PTR actual_addr$[rsp]
	sub	rax, 24
	mov	QWORD PTR meta$[rsp], rax

; 262  : 	meta->magic = MAGIC_FREE;

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax], 86056995		; 05212023H

; 263  : 
; 264  : 	/* merge it with 3 near blocks if they are free*/
; 265  : 	
; 266  : 	merge_prev(meta);

	mov	rcx, QWORD PTR meta$[rsp]
	call	?merge_prev@@YAXPEAU_meta_data_@@@Z	; merge_prev

; 267  : 	merge_next(meta);

	mov	rcx, QWORD PTR meta$[rsp]
	call	?merge_next@@YAXPEAU_meta_data_@@@Z	; merge_next

; 268  : }

	add	rsp, 56					; 00000038H
	ret	0
kfree	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
ptr$ = 32
total$ = 40
n_item$ = 64
size$ = 72
kcalloc	PROC

; 293  : void* kcalloc(size_t n_item, size_t size) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 294  : 	size_t total = n_item * size;

	mov	rax, QWORD PTR n_item$[rsp]
	imul	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR total$[rsp], rax

; 295  : 
; 296  : 	void* ptr = kmalloc(total);

	mov	ecx, DWORD PTR total$[rsp]
	call	kmalloc
	mov	QWORD PTR ptr$[rsp], rax

; 297  : 	if (ptr)

	cmp	QWORD PTR ptr$[rsp], 0
	je	SHORT $LN1@kcalloc

; 298  : 		memset(ptr, 0, total);

	mov	r8d, DWORD PTR total$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR ptr$[rsp]
	call	memset
$LN1@kcalloc:

; 299  : 	return ptr;

	mov	rax, QWORD PTR ptr$[rsp]

; 300  : }

	add	rsp, 56					; 00000038H
	ret	0
kcalloc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
result$ = 32
ptr$ = 64
new_size$ = 72
krealloc PROC

; 275  : void* krealloc(void* ptr, unsigned int new_size) {

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 276  : 	void* result = kmalloc(new_size);

	mov	ecx, DWORD PTR new_size$[rsp]
	call	kmalloc
	mov	QWORD PTR result$[rsp], rax

; 277  : 	if (ptr) {

	cmp	QWORD PTR ptr$[rsp], 0
	je	SHORT $LN1@krealloc

; 278  : 		/* here we can check the size difference
; 279  : 		* of new_size and old size from internal
; 280  : 		* data structure of kmalloc */
; 281  : 		memcpy(result, ptr, new_size);

	mov	eax, DWORD PTR new_size$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR ptr$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	memcpy
$LN1@krealloc:

; 282  : 	}
; 283  : 
; 284  : 	kfree(ptr);

	mov	rcx, QWORD PTR ptr$[rsp]
	call	kfree

; 285  : 	return result;

	mov	rax, QWORD PTR result$[rsp]

; 286  : }

	add	rsp, 56					; 00000038H
	ret	0
krealloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta$ = 32
ret$ = 40
meta_addr$1 = 48
addr$2 = 56
size$ = 80
kmalloc	PROC

; 161  : void* kmalloc(unsigned int size) {

$LN11:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 162  : 	meta_data_t *meta = first_block;

	mov	rax, QWORD PTR first_block
	mov	QWORD PTR meta$[rsp], rax

; 163  : 	uint8_t* ret = 0;

	mov	QWORD PTR ret$[rsp], 0
$LN8@kmalloc:

; 164  : 	/* now search begins */
; 165  : 	while (meta){

	cmp	QWORD PTR meta$[rsp], 0
	je	$LN7@kmalloc

; 166  : 		if (meta->magic == MAGIC_FREE) {

	mov	rax, QWORD PTR meta$[rsp]
	cmp	DWORD PTR [rax], 86056995		; 05212023H
	jne	SHORT $LN6@kmalloc

; 167  : 			if (meta->size > size) {

	mov	rax, QWORD PTR meta$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	cmp	DWORD PTR [rax+4], ecx
	jbe	SHORT $LN5@kmalloc

; 168  : 				if (au_split_block(meta, size)){

	mov	eax, DWORD PTR size$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR meta$[rsp]
	call	?au_split_block@@YA_NPEAU_meta_data_@@_K@Z ; au_split_block
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@kmalloc

; 169  : 					meta->magic = MAGIC_USED;

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax], 369500162		; 16062002H

; 170  : 					size_t meta_addr = (size_t)meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR meta_addr$1[rsp], rax

; 171  : 					ret = ((uint8_t*)meta_addr + sizeof(meta_data_t));

	mov	rax, QWORD PTR meta_addr$1[rsp]
	add	rax, 24
	mov	QWORD PTR ret$[rsp], rax

; 172  : 					break;

	jmp	SHORT $LN7@kmalloc
$LN4@kmalloc:
$LN5@kmalloc:

; 173  : 				}
; 174  : 			}
; 175  : 
; 176  : 			if (meta->size == size) {

	mov	rax, QWORD PTR meta$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@kmalloc

; 177  : 				meta->magic = MAGIC_USED;

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax], 369500162		; 16062002H

; 178  : 				size_t addr = (size_t)meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR addr$2[rsp], rax

; 179  : 				ret = ((uint8_t*)addr + sizeof(meta_data_t));

	mov	rax, QWORD PTR addr$2[rsp]
	add	rax, 24
	mov	QWORD PTR ret$[rsp], rax

; 180  : 				break;

	jmp	SHORT $LN7@kmalloc
$LN3@kmalloc:
$LN6@kmalloc:

; 181  : 			}
; 182  : 		}
; 183  : 
; 184  : 		meta = meta->next;

	mov	rax, QWORD PTR meta$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR meta$[rsp], rax

; 185  : 	}

	jmp	$LN8@kmalloc
$LN7@kmalloc:

; 186  : 
; 187  : 	if (ret) {

	cmp	QWORD PTR ret$[rsp], 0
	je	SHORT $LN2@kmalloc

; 188  : 		return ret;

	mov	rax, QWORD PTR ret$[rsp]
	jmp	SHORT $LN9@kmalloc

; 189  : 	}
; 190  : 	else{

	jmp	SHORT $LN1@kmalloc
$LN2@kmalloc:

; 191  : 		au_expand_kmalloc(size);

	mov	eax, DWORD PTR size$[rsp]
	mov	ecx, eax
	call	?au_expand_kmalloc@@YAX_K@Z		; au_expand_kmalloc
$LN1@kmalloc:

; 192  : 
; 193  : 	}
; 194  : 	return kmalloc(size);

	mov	ecx, DWORD PTR size$[rsp]
	call	kmalloc
$LN9@kmalloc:

; 195  : }

	add	rsp, 72					; 00000048H
	ret	0
kmalloc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\kmalloc.cpp
_TEXT	SEGMENT
meta$ = 32
page$ = 40
desc_addr$ = 48
AuHeapInitialize PROC

; 52   : void AuHeapInitialize() {

$LN3:
	sub	rsp, 72					; 00000048H

; 53   : 	last_block = NULL;

	mov	QWORD PTR last_block, 0

; 54   : 	first_block = NULL;

	mov	QWORD PTR first_block, 0

; 55   : 	last_mark = 0;

	mov	QWORD PTR ?last_mark@@3_KA, 0		; last_mark

; 56   : 	_debug_on = false;

	mov	BYTE PTR ?_debug_on@@3_NA, 0		; _debug_on

; 57   : 	void* page = au_request_page(1);

	mov	ecx, 1
	call	?au_request_page@@YAPEAXH@Z		; au_request_page
	mov	QWORD PTR page$[rsp], rax

; 58   : 	memset(page, 0, (1 * 4096));

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR page$[rsp]
	call	memset

; 59   : 	/* setup the first meta data block */
; 60   : 	uint8_t* desc_addr = (uint8_t*)page;

	mov	rax, QWORD PTR page$[rsp]
	mov	QWORD PTR desc_addr$[rsp], rax

; 61   : 	meta_data_t *meta = (meta_data_t*)desc_addr;

	mov	rax, QWORD PTR desc_addr$[rsp]
	mov	QWORD PTR meta$[rsp], rax

; 62   : 	meta->next = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+8], 0

; 63   : 	meta->prev = NULL;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR [rax+16], 0

; 64   : 	meta->magic = MAGIC_FREE;

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax], 86056995		; 05212023H

; 65   : 
; 66   : 	/* meta->size holds only the usable area size for user */
; 67   : 	meta->size = (1 * 4096) - sizeof(meta_data_t);

	mov	rax, QWORD PTR meta$[rsp]
	mov	DWORD PTR [rax+4], 4072			; 00000fe8H

; 68   : 	first_block = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR first_block, rax

; 69   : 	last_block = meta;

	mov	rax, QWORD PTR meta$[rsp]
	mov	QWORD PTR last_block, rax

; 70   : 	
; 71   : 	last_mark = ((uint64_t)page + (meta->size + sizeof(meta_data_t)));

	mov	rax, QWORD PTR meta$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR page$[rsp]
	lea	rax, QWORD PTR [rcx+rax+24]
	mov	QWORD PTR ?last_mark@@3_KA, rax		; last_mark

; 72   : }

	add	rsp, 72					; 00000048H
	ret	0
AuHeapInitialize ENDP
_TEXT	ENDS
END
