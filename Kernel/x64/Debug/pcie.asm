; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F4982F6F_pcie@cpp DB 01H
__303BDA61_stdint@h DB 01H
msvcjmc	ENDS
PUBLIC	?AuPCIEGetDevice@@YA_KGHHH@Z			; AuPCIEGetDevice
PUBLIC	AuPCIEAllocMSI
PUBLIC	AuPCIEScanClassIF
PUBLIC	AuPCIEScanClass
PUBLIC	AuPCIEWrite
PUBLIC	AuPCIERead
PUBLIC	AuPCIERead64
PUBLIC	AuPCIEWrite64
PUBLIC	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
PUBLIC	??$raw_offset@PECE_K@@YAPECE_KH@Z		; raw_offset<unsigned char volatile *,unsigned __int64>
PUBLIC	??$raw_offset@PECG_K@@YAPECG_KH@Z		; raw_offset<unsigned short volatile *,unsigned __int64>
PUBLIC	??$raw_offset@PECI_K@@YAPECI_KH@Z		; raw_offset<unsigned int volatile *,unsigned __int64>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0P@OALOLLDO@MSI?9X?5found?5?$AN?6@	; `string'
EXTRN	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ:PROC		; AuACPIGetMCFG
EXTRN	?AuACPIPCIESupported@@YA_NXZ:PROC		; AuACPIPCIESupported
EXTRN	?x86_64_cpu_msi_address@@YA_KPEA_K_KIEE@Z:PROC	; x86_64_cpu_msi_address
EXTRN	AuTextOut:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPCIEGetDevice@@YA_KGHHH@Z DD imagerel $LN7
	DD	imagerel $LN7+234
	DD	imagerel $unwind$?AuPCIEGetDevice@@YA_KGHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuPCIEAllocMSI DD imagerel $LN16
	DD	imagerel $LN16+990
	DD	imagerel $unwind$AuPCIEAllocMSI
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuPCIEScanClassIF DD imagerel $LN18
	DD	imagerel $LN18+478
	DD	imagerel $unwind$AuPCIEScanClassIF
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuPCIEScanClass DD imagerel $LN19
	DD	imagerel $LN19+442
	DD	imagerel $unwind$AuPCIEScanClass
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuPCIEWrite DD imagerel $LN37
	DD	imagerel $LN37+722
	DD	imagerel $unwind$AuPCIEWrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuPCIERead DD imagerel $LN37
	DD	imagerel $LN37+770
	DD	imagerel $unwind$AuPCIERead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuPCIERead64 DD imagerel $LN11
	DD	imagerel $LN11+339
	DD	imagerel $unwind$AuPCIERead64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuPCIEWrite64 DD imagerel $LN10
	DD	imagerel $LN10+296
	DD	imagerel $unwind$AuPCIEWrite64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PECE_K@@YAPECE_KH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PECE_K@@YAPECE_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PECG_K@@YAPECG_KH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PECG_K@@YAPECG_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PECI_K@@YAPECI_KH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PECI_K@@YAPECI_KH@Z
pdata	ENDS
;	COMDAT ??_C@_0P@OALOLLDO@MSI?9X?5found?5?$AN?6@
CONST	SEGMENT
??_C@_0P@OALOLLDO@MSI?9X?5found?5?$AN?6@ DB 'MSI-X found ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PECI_K@@YAPECI_KH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PECG_K@@YAPECG_KH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PECE_K@@YAPECE_KH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0e0H
	DW	0100H
	DW	0120H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuPCIEWrite64 DD 025032001H
	DD	0f21b2320H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0eaH
	DW	0111H
	DW	0138H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuPCIERead64 DD 025032001H
	DD	0f21b2320H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0200H
	DW	0229H
	DW	0252H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuPCIERead DD 025042001H
	DD	011b2320H
	DD	050140012H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01f7H
	DW	0214H
	DW	0231H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuPCIEWrite DD 025032001H
	DD	0f21b2320H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuPCIEScanClass DD 035041f01H
	DD	011a331fH
	DD	050130014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuPCIEScanClassIF DD 035041f01H
	DD	011a331fH
	DD	050130014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuPCIEAllocMSI DD 045042101H
	DD	011c4321H
	DD	050150018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPCIEGetDevice@@YA_KGHHH@Z DD 025032001H
	DD	0f21b2320H
	DD	05014H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PECI_K@@YAPECI_KH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PECI_K@@YAPECI_KH@Z PROC			; raw_offset<unsigned int volatile *,unsigned __int64>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PECI_K@@YAPECI_KH@Z ENDP			; raw_offset<unsigned int volatile *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PECG_K@@YAPECG_KH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PECG_K@@YAPECG_KH@Z PROC			; raw_offset<unsigned short volatile *,unsigned __int64>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PECG_K@@YAPECG_KH@Z ENDP			; raw_offset<unsigned short volatile *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PECE_K@@YAPECE_KH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PECE_K@@YAPECE_KH@Z PROC			; raw_offset<unsigned char volatile *,unsigned __int64>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PECE_K@@YAPECE_KH@Z ENDP			; raw_offset<unsigned char volatile *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z
_TEXT	SEGMENT
p1$ = 80
??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z PROC ; mem_after<acpiMcfgAlloc *,acpiMcfg>, COMDAT

; 211  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 212  : 		return (T)(&p1[1]);

	mov	eax, 44					; 0000002cH
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 213  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ENDP ; mem_after<acpiMcfgAlloc *,acpiMcfg>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT AuPCIEWrite64
_TEXT	SEGMENT
address$ = 0
mcfg$ = 8
allocs$ = 16
device$ = 112
reg$ = 120
size$ = 128
val$ = 136
bus$ = 144
dev$ = 152
func$ = 160
AuPCIEWrite64 PROC					; COMDAT

; 326  : void AuPCIEWrite64(uint64_t device, int reg, int size, uint64_t val, int bus, int dev, int func) {

$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 327  : 	if (!AuACPIPCIESupported()) {

	call	?AuACPIPCIESupported@@YA_NXZ		; AuACPIPCIESupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@AuPCIEWrit

; 328  : 		return; //pci_write(device,reg, val);

	jmp	$LN1@AuPCIEWrit
$LN2@AuPCIEWrit:

; 329  : 	}
; 330  : 
; 331  : 	size_t address = 0;

	mov	QWORD PTR address$[rbp], 0

; 332  : 	acpiMcfg *mcfg = AuACPIGetMCFG();

	call	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ	; AuACPIGetMCFG
	mov	QWORD PTR mcfg$[rbp], rax

; 333  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rbp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
	mov	QWORD PTR allocs$[rbp], rax

; 334  : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum)

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rbp]
	jg	SHORT $LN3@AuPCIEWrit
	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rbp], eax
	jg	SHORT $LN3@AuPCIEWrit

; 335  : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (func << 12) | (reg);

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR device$[rbp]
	shl	rcx, 15
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rbp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	movsxd	rcx, DWORD PTR reg$[rbp]
	or	rax, rcx
	mov	QWORD PTR address$[rbp], rax
$LN3@AuPCIEWrit:

; 336  : 
; 337  : 
; 338  : 	if (size == 1){

	cmp	DWORD PTR size$[rbp], 1
	jne	SHORT $LN4@AuPCIEWrit

; 339  : 		*raw_offset<volatile uint8_t*>(device, reg) = (uint8_t)val;

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile *,unsigned __int64>
	movzx	ecx, BYTE PTR val$[rbp]
	mov	BYTE PTR [rax], cl

; 340  : 	}

	jmp	SHORT $LN5@AuPCIEWrit
$LN4@AuPCIEWrit:

; 341  : 	else if (size == 2) {

	cmp	DWORD PTR size$[rbp], 2
	jne	SHORT $LN6@AuPCIEWrit

; 342  : 		*raw_offset<volatile uint16_t*>(device, reg) = (uint16_t)val;

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile *,unsigned __int64>
	movzx	ecx, WORD PTR val$[rbp]
	mov	WORD PTR [rax], cx

; 343  : 	}

	jmp	SHORT $LN7@AuPCIEWrit
$LN6@AuPCIEWrit:

; 344  : 	else if (size == 4) {

	cmp	DWORD PTR size$[rbp], 4
	jne	SHORT $LN8@AuPCIEWrit

; 345  : 		*raw_offset<volatile uint32_t*>(device, reg) = val;

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile *,unsigned __int64>
	mov	ecx, DWORD PTR val$[rbp]
	mov	DWORD PTR [rax], ecx
$LN8@AuPCIEWrit:
$LN7@AuPCIEWrit:
$LN5@AuPCIEWrit:
$LN1@AuPCIEWrit:

; 346  : 	}
; 347  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
AuPCIEWrite64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT AuPCIERead64
_TEXT	SEGMENT
address$ = 0
mcfg$ = 8
allocs$ = 16
result$ = 24
device$ = 112
reg$ = 120
size$ = 128
bus$ = 136
dev$ = 144
func$ = 152
AuPCIERead64 PROC					; COMDAT

; 183  : uint64_t AuPCIERead64(uint64_t device, int reg, int size, int bus, int dev, int func) {

$LN11:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 184  : 	if (!AuACPIPCIESupported()) {

	call	?AuACPIPCIESupported@@YA_NXZ		; AuACPIPCIESupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@AuPCIERead

; 185  : 		return 0;

	xor	eax, eax
	jmp	$LN1@AuPCIERead
$LN2@AuPCIERead:

; 186  : 	}
; 187  : 
; 188  : 	size_t address = 0;

	mov	QWORD PTR address$[rbp], 0

; 189  : 	acpiMcfg *mcfg = AuACPIGetMCFG();

	call	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ	; AuACPIGetMCFG
	mov	QWORD PTR mcfg$[rbp], rax

; 190  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rbp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
	mov	QWORD PTR allocs$[rbp], rax

; 191  : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum)

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rbp]
	jg	SHORT $LN3@AuPCIERead
	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rbp], eax
	jg	SHORT $LN3@AuPCIERead

; 192  : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (func << 12);

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR device$[rbp]
	shl	rcx, 15
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rbp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	QWORD PTR address$[rbp], rax
$LN3@AuPCIERead:

; 193  : 
; 194  : 	if (address == 0)

	cmp	QWORD PTR address$[rbp], 0
	jne	SHORT $LN4@AuPCIERead

; 195  : 		return 0;

	xor	eax, eax
	jmp	$LN1@AuPCIERead
$LN4@AuPCIERead:

; 196  : 
; 197  : 	uint64_t result = 0;

	mov	QWORD PTR result$[rbp], 0

; 198  : 
; 199  : 	if (size == 1){

	cmp	DWORD PTR size$[rbp], 1
	jne	SHORT $LN5@AuPCIERead

; 200  : 		result = *raw_offset<volatile uint8_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile *,unsigned __int64>
	movzx	eax, BYTE PTR [rax]
	movzx	eax, al
	mov	QWORD PTR result$[rbp], rax

; 201  : 		return result;

	mov	rax, QWORD PTR result$[rbp]
	jmp	SHORT $LN1@AuPCIERead

; 202  : 	}

	jmp	SHORT $LN6@AuPCIERead
$LN5@AuPCIERead:

; 203  : 	else if (size == 2) {

	cmp	DWORD PTR size$[rbp], 2
	jne	SHORT $LN7@AuPCIERead

; 204  : 		result = *raw_offset<volatile uint16_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile *,unsigned __int64>
	movzx	eax, WORD PTR [rax]
	movzx	eax, ax
	mov	QWORD PTR result$[rbp], rax

; 205  : 		return result;

	mov	rax, QWORD PTR result$[rbp]
	jmp	SHORT $LN1@AuPCIERead

; 206  : 	}

	jmp	SHORT $LN8@AuPCIERead
$LN7@AuPCIERead:

; 207  : 	else if (size == 4) {

	cmp	DWORD PTR size$[rbp], 4
	jne	SHORT $LN9@AuPCIERead

; 208  : 		result = *raw_offset<volatile uint32_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile *,unsigned __int64>
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	QWORD PTR result$[rbp], rax

; 209  : 		return result;

	mov	rax, QWORD PTR result$[rbp]
	jmp	SHORT $LN1@AuPCIERead
$LN9@AuPCIERead:
$LN8@AuPCIERead:
$LN6@AuPCIERead:

; 210  : 	}
; 211  : 
; 212  : 
; 213  : 	return UINT64_MAX;

	mov	rax, -1
$LN1@AuPCIERead:

; 214  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
AuPCIERead64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT AuPCIERead
_TEXT	SEGMENT
address$ = 0
mcfg$ = 8
allocs$ = 16
result$ = 24
size$ = 32
tv91 = 100
device$ = 128
reg$ = 136
bus$ = 144
dev$ = 152
func$ = 160
AuPCIERead PROC						; COMDAT

; 72   : uint32_t AuPCIERead(uint64_t device, int reg, int bus, int dev, int func) {

$LN37:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 	if (!AuACPIPCIESupported())

	call	?AuACPIPCIESupported@@YA_NXZ		; AuACPIPCIESupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@AuPCIERead

; 74   : 		return 0; //<- return AuPCIRead

	xor	eax, eax
	jmp	$LN1@AuPCIERead
$LN4@AuPCIERead:

; 75   : 
; 76   : 	uint32_t address = 0;

	mov	DWORD PTR address$[rbp], 0

; 77   : 	acpiMcfg *mcfg = AuACPIGetMCFG();

	call	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ	; AuACPIGetMCFG
	mov	QWORD PTR mcfg$[rbp], rax

; 78   : 	acpiMcfgAlloc* allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rbp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
	mov	QWORD PTR allocs$[rbp], rax

; 79   : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum)

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rbp]
	jg	SHORT $LN5@AuPCIERead
	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rbp], eax
	jg	SHORT $LN5@AuPCIERead

; 80   : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (dev << 15) |

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR dev$[rbp]
	shl	ecx, 15
	movsxd	rcx, ecx
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rbp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	DWORD PTR address$[rbp], eax
$LN5@AuPCIERead:

; 81   : 		(func << 12);
; 82   : 
; 83   : 	uint64_t result = 0;

	mov	QWORD PTR result$[rbp], 0

; 84   : 	if (address == 0)

	cmp	DWORD PTR address$[rbp], 0
	jne	SHORT $LN6@AuPCIERead

; 85   : 		return 0;

	xor	eax, eax
	jmp	$LN1@AuPCIERead
$LN6@AuPCIERead:

; 86   : 
; 87   : 	int size = 0;

	mov	DWORD PTR size$[rbp], 0

; 88   : 	switch (reg) {

	mov	eax, DWORD PTR reg$[rbp]
	mov	DWORD PTR tv91[rbp], eax
	cmp	DWORD PTR tv91[rbp], 61			; 0000003dH
	ja	$LN28@AuPCIERead
	movsxd	rax, DWORD PTR tv91[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN35@AuPCIERead[rcx+rax]
	mov	eax, DWORD PTR $LN36@AuPCIERead[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@AuPCIERead:

; 89   : 	case PCI_VENDOR_ID:
; 90   : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 91   : 		break;

	jmp	$LN2@AuPCIERead
$LN8@AuPCIERead:

; 92   : 	case PCI_DEVICE_ID:
; 93   : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 94   : 		break;

	jmp	$LN2@AuPCIERead
$LN9@AuPCIERead:

; 95   : 	case PCI_COMMAND:
; 96   : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 97   : 		break;

	jmp	$LN2@AuPCIERead
$LN10@AuPCIERead:

; 98   : 	case PCI_STATUS:
; 99   : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 100  : 		break;

	jmp	$LN2@AuPCIERead
$LN11@AuPCIERead:

; 101  : 	case PCI_REVISION_ID:
; 102  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 103  : 		break;

	jmp	$LN2@AuPCIERead
$LN12@AuPCIERead:

; 104  : 	case PCI_PROG_IF:
; 105  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 106  : 		break;

	jmp	$LN2@AuPCIERead
$LN13@AuPCIERead:

; 107  : 	case PCI_SUBCLASS:
; 108  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 109  : 		break;

	jmp	$LN2@AuPCIERead
$LN14@AuPCIERead:

; 110  : 	case PCI_CLASS:
; 111  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 112  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN15@AuPCIERead:

; 113  : 	case PCI_CACHE_LINE_SIZE:
; 114  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 115  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN16@AuPCIERead:

; 116  : 	case PCI_LATENCY_TIMER:
; 117  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 118  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN17@AuPCIERead:

; 119  : 	case PCI_HEADER_TYPE:
; 120  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 121  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN18@AuPCIERead:

; 122  : 	case PCI_BIST:
; 123  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 124  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN19@AuPCIERead:

; 125  : 	case PCI_BAR0:
; 126  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 127  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN20@AuPCIERead:

; 128  : 	case PCI_BAR1:
; 129  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 130  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN21@AuPCIERead:

; 131  : 	case PCI_BAR2:
; 132  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 133  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN22@AuPCIERead:

; 134  : 	case PCI_BAR3:
; 135  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 136  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN23@AuPCIERead:

; 137  : 	case PCI_BAR4:
; 138  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 139  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN24@AuPCIERead:

; 140  : 	case PCI_BAR5:
; 141  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 142  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN25@AuPCIERead:

; 143  : 	case PCI_CAPABILITIES_PTR:
; 144  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 145  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN26@AuPCIERead:

; 146  : 	case PCI_INTERRUPT_LINE:
; 147  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 148  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN27@AuPCIERead:

; 149  : 	case PCI_INTERRUPT_PIN:
; 150  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 151  : 		break;

	jmp	SHORT $LN2@AuPCIERead
$LN28@AuPCIERead:

; 152  : 	default:
; 153  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1
$LN2@AuPCIERead:

; 154  : 		break;
; 155  : 	}
; 156  : 
; 157  : 	if (size == 1){

	cmp	DWORD PTR size$[rbp], 1
	jne	SHORT $LN29@AuPCIERead

; 158  : 		result = *raw_offset<volatile uint8_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile *,unsigned __int64>
	movzx	eax, BYTE PTR [rax]
	movzx	eax, al
	mov	QWORD PTR result$[rbp], rax

; 159  : 		return result;

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@AuPCIERead

; 160  : 	}

	jmp	SHORT $LN30@AuPCIERead
$LN29@AuPCIERead:

; 161  : 	else if (size == 2) {

	cmp	DWORD PTR size$[rbp], 2
	jne	SHORT $LN31@AuPCIERead

; 162  : 		result = *raw_offset<volatile uint16_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile *,unsigned __int64>
	movzx	eax, WORD PTR [rax]
	movzx	eax, ax
	mov	QWORD PTR result$[rbp], rax

; 163  : 		return result;

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@AuPCIERead

; 164  : 	}

	jmp	SHORT $LN32@AuPCIERead
$LN31@AuPCIERead:

; 165  : 	else if (size == 4) {

	cmp	DWORD PTR size$[rbp], 4
	jne	SHORT $LN33@AuPCIERead

; 166  : 		result = *raw_offset<volatile uint32_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile *,unsigned __int64>
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	QWORD PTR result$[rbp], rax

; 167  : 		return result;

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@AuPCIERead
$LN33@AuPCIERead:
$LN32@AuPCIERead:
$LN30@AuPCIERead:

; 168  : 	}
; 169  : 
; 170  : 	return UINT32_MAX;

	mov	eax, -1					; ffffffffH
$LN1@AuPCIERead:

; 171  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
	npad	2
$LN36@AuPCIERead:
	DD	$LN7@AuPCIERead
	DD	$LN8@AuPCIERead
	DD	$LN9@AuPCIERead
	DD	$LN10@AuPCIERead
	DD	$LN11@AuPCIERead
	DD	$LN12@AuPCIERead
	DD	$LN13@AuPCIERead
	DD	$LN14@AuPCIERead
	DD	$LN15@AuPCIERead
	DD	$LN16@AuPCIERead
	DD	$LN17@AuPCIERead
	DD	$LN18@AuPCIERead
	DD	$LN19@AuPCIERead
	DD	$LN20@AuPCIERead
	DD	$LN21@AuPCIERead
	DD	$LN22@AuPCIERead
	DD	$LN23@AuPCIERead
	DD	$LN24@AuPCIERead
	DD	$LN25@AuPCIERead
	DD	$LN26@AuPCIERead
	DD	$LN27@AuPCIERead
	DD	$LN28@AuPCIERead
$LN35@AuPCIERead:
	DB	0
	DB	21
	DB	1
	DB	21
	DB	2
	DB	21
	DB	3
	DB	21
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	21
	DB	21
	DB	21
	DB	13
	DB	21
	DB	21
	DB	21
	DB	14
	DB	21
	DB	21
	DB	21
	DB	15
	DB	21
	DB	21
	DB	21
	DB	16
	DB	21
	DB	21
	DB	21
	DB	17
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	18
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	19
	DB	20
AuPCIERead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT AuPCIEWrite
_TEXT	SEGMENT
address$ = 0
mcfg$ = 8
allocs$ = 16
size$ = 24
tv89 = 92
device$ = 112
reg$ = 120
val$ = 128
bus$ = 136
dev$ = 144
func$ = 152
AuPCIEWrite PROC					; COMDAT

; 226  : void AuPCIEWrite(uint64_t device, int reg, uint32_t val, int bus, int dev, int func) {

$LN37:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 227  : 	if (!AuACPIPCIESupported()) {

	call	?AuACPIPCIESupported@@YA_NXZ		; AuACPIPCIESupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@AuPCIEWrit

; 228  : 		return; //pci_write(device,reg, val);

	jmp	$LN1@AuPCIEWrit
$LN4@AuPCIEWrit:

; 229  : 	}
; 230  : 
; 231  : 	size_t address = 0;

	mov	QWORD PTR address$[rbp], 0

; 232  : 
; 233  : 	acpiMcfg *mcfg = AuACPIGetMCFG();

	call	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ	; AuACPIGetMCFG
	mov	QWORD PTR mcfg$[rbp], rax

; 234  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rbp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
	mov	QWORD PTR allocs$[rbp], rax

; 235  : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum)

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rbp]
	jg	SHORT $LN5@AuPCIEWrit
	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rbp], eax
	jg	SHORT $LN5@AuPCIEWrit

; 236  : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (func << 12);

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR device$[rbp]
	shl	rcx, 15
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rbp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	QWORD PTR address$[rbp], rax
$LN5@AuPCIEWrit:

; 237  : 
; 238  : 
; 239  : 	if (address == 0)

	cmp	QWORD PTR address$[rbp], 0
	jne	SHORT $LN6@AuPCIEWrit

; 240  : 		return;

	jmp	$LN1@AuPCIEWrit
$LN6@AuPCIEWrit:

; 241  : 
; 242  : 	reg = reg;

	mov	eax, DWORD PTR reg$[rbp]
	mov	DWORD PTR reg$[rbp], eax

; 243  : 	int size = 0;

	mov	DWORD PTR size$[rbp], 0

; 244  : 	switch (reg) {

	mov	eax, DWORD PTR reg$[rbp]
	mov	DWORD PTR tv89[rbp], eax
	cmp	DWORD PTR tv89[rbp], 61			; 0000003dH
	ja	$LN28@AuPCIEWrit
	movsxd	rax, DWORD PTR tv89[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN35@AuPCIEWrit[rcx+rax]
	mov	eax, DWORD PTR $LN36@AuPCIEWrit[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@AuPCIEWrit:

; 245  : 	case PCI_VENDOR_ID:
; 246  : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 247  : 		break;

	jmp	$LN2@AuPCIEWrit
$LN8@AuPCIEWrit:

; 248  : 	case PCI_DEVICE_ID:
; 249  : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 250  : 		break;

	jmp	$LN2@AuPCIEWrit
$LN9@AuPCIEWrit:

; 251  : 	case PCI_COMMAND:
; 252  : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 253  : 		break;

	jmp	$LN2@AuPCIEWrit
$LN10@AuPCIEWrit:

; 254  : 	case PCI_STATUS:
; 255  : 		size = 2;

	mov	DWORD PTR size$[rbp], 2

; 256  : 		break;

	jmp	$LN2@AuPCIEWrit
$LN11@AuPCIEWrit:

; 257  : 	case PCI_REVISION_ID:
; 258  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 259  : 		break;

	jmp	$LN2@AuPCIEWrit
$LN12@AuPCIEWrit:

; 260  : 	case PCI_PROG_IF:
; 261  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 262  : 		break;

	jmp	$LN2@AuPCIEWrit
$LN13@AuPCIEWrit:

; 263  : 	case PCI_SUBCLASS:
; 264  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 265  : 		break;

	jmp	$LN2@AuPCIEWrit
$LN14@AuPCIEWrit:

; 266  : 	case PCI_CLASS:
; 267  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 268  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN15@AuPCIEWrit:

; 269  : 	case PCI_CACHE_LINE_SIZE:
; 270  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 271  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN16@AuPCIEWrit:

; 272  : 	case PCI_LATENCY_TIMER:
; 273  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 274  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN17@AuPCIEWrit:

; 275  : 	case PCI_HEADER_TYPE:
; 276  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 277  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN18@AuPCIEWrit:

; 278  : 	case PCI_BIST:
; 279  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 280  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN19@AuPCIEWrit:

; 281  : 	case PCI_BAR0:
; 282  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 283  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN20@AuPCIEWrit:

; 284  : 	case PCI_BAR1:
; 285  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 286  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN21@AuPCIEWrit:

; 287  : 	case PCI_BAR2:
; 288  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 289  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN22@AuPCIEWrit:

; 290  : 	case PCI_BAR3:
; 291  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 292  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN23@AuPCIEWrit:

; 293  : 	case PCI_BAR4:
; 294  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 295  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN24@AuPCIEWrit:

; 296  : 	case PCI_BAR5:
; 297  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4

; 298  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN25@AuPCIEWrit:

; 299  : 	case PCI_CAPABILITIES_PTR:
; 300  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 301  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN26@AuPCIEWrit:

; 302  : 	case PCI_INTERRUPT_LINE:
; 303  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 304  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN27@AuPCIEWrit:

; 305  : 	case PCI_INTERRUPT_PIN:
; 306  : 		size = 1;

	mov	DWORD PTR size$[rbp], 1

; 307  : 		break;

	jmp	SHORT $LN2@AuPCIEWrit
$LN28@AuPCIEWrit:

; 308  : 	default:
; 309  : 		size = 4;

	mov	DWORD PTR size$[rbp], 4
$LN2@AuPCIEWrit:

; 310  : 		break;
; 311  : 	}
; 312  : 
; 313  : 	if (size == 1){

	cmp	DWORD PTR size$[rbp], 1
	jne	SHORT $LN29@AuPCIEWrit

; 314  : 		*raw_offset<volatile uint8_t*>(device, reg) = (uint8_t)val;

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile *,unsigned __int64>
	movzx	ecx, BYTE PTR val$[rbp]
	mov	BYTE PTR [rax], cl

; 315  : 	}

	jmp	SHORT $LN30@AuPCIEWrit
$LN29@AuPCIEWrit:

; 316  : 	else if (size == 2) {

	cmp	DWORD PTR size$[rbp], 2
	jne	SHORT $LN31@AuPCIEWrit

; 317  : 		*raw_offset<volatile uint16_t*>(device, reg) = (uint16_t)val;

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile *,unsigned __int64>
	movzx	ecx, WORD PTR val$[rbp]
	mov	WORD PTR [rax], cx

; 318  : 	}

	jmp	SHORT $LN32@AuPCIEWrit
$LN31@AuPCIEWrit:

; 319  : 	else if (size == 4) {

	cmp	DWORD PTR size$[rbp], 4
	jne	SHORT $LN33@AuPCIEWrit

; 320  : 		*raw_offset<volatile uint32_t*>(device, reg) = (uint32_t)val;

	mov	edx, DWORD PTR reg$[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile *,unsigned __int64>
	mov	ecx, DWORD PTR val$[rbp]
	mov	DWORD PTR [rax], ecx
$LN33@AuPCIEWrit:
$LN32@AuPCIEWrit:
$LN30@AuPCIEWrit:
$LN1@AuPCIEWrit:

; 321  : 	}
; 322  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
	npad	3
$LN36@AuPCIEWrit:
	DD	$LN7@AuPCIEWrit
	DD	$LN8@AuPCIEWrit
	DD	$LN9@AuPCIEWrit
	DD	$LN10@AuPCIEWrit
	DD	$LN11@AuPCIEWrit
	DD	$LN12@AuPCIEWrit
	DD	$LN13@AuPCIEWrit
	DD	$LN14@AuPCIEWrit
	DD	$LN15@AuPCIEWrit
	DD	$LN16@AuPCIEWrit
	DD	$LN17@AuPCIEWrit
	DD	$LN18@AuPCIEWrit
	DD	$LN19@AuPCIEWrit
	DD	$LN20@AuPCIEWrit
	DD	$LN21@AuPCIEWrit
	DD	$LN22@AuPCIEWrit
	DD	$LN23@AuPCIEWrit
	DD	$LN24@AuPCIEWrit
	DD	$LN25@AuPCIEWrit
	DD	$LN26@AuPCIEWrit
	DD	$LN27@AuPCIEWrit
	DD	$LN28@AuPCIEWrit
$LN35@AuPCIEWrit:
	DB	0
	DB	21
	DB	1
	DB	21
	DB	2
	DB	21
	DB	3
	DB	21
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	21
	DB	21
	DB	21
	DB	13
	DB	21
	DB	21
	DB	21
	DB	14
	DB	21
	DB	21
	DB	21
	DB	15
	DB	21
	DB	21
	DB	21
	DB	16
	DB	21
	DB	21
	DB	21
	DB	17
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	18
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	19
	DB	20
AuPCIEWrite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT AuPCIEScanClass
_TEXT	SEGMENT
mcfg$ = 0
allocs$ = 8
pciSegment$ = 16
bus$1 = 20
dev$2 = 24
func$3 = 28
address$4 = 32
class_code$5 = 40
sub_ClassCode$6 = 41
classCode$ = 128
subClassCode$ = 136
bus_$ = 144
dev_$ = 152
func_$ = 160
AuPCIEScanClass PROC					; COMDAT

; 358  : uint64_t AuPCIEScanClass(uint8_t classCode, uint8_t subClassCode, int *bus_, int *dev_, int *func_) {

$LN19:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 160				; 000000a0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 359  : 	if (!AuACPIPCIESupported()) {

	call	?AuACPIPCIESupported@@YA_NXZ		; AuACPIPCIESupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@AuPCIEScan

; 360  : 		return 0; //pci_scan_class(classCode, subClassCode);

	xor	eax, eax
	jmp	$LN1@AuPCIEScan
$LN11@AuPCIEScan:

; 361  : 	}
; 362  : 
; 363  : 	acpiMcfg *mcfg = AuACPIGetMCFG();

	call	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ	; AuACPIGetMCFG
	mov	QWORD PTR mcfg$[rbp], rax

; 364  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rbp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
	mov	QWORD PTR allocs$[rbp], rax

; 365  : 	uint16_t pciSegment = 0;

	xor	eax, eax
	mov	WORD PTR pciSegment$[rbp], ax

; 366  : 	if (allocs->pciSegment <= 65535)

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, WORD PTR [rax+8]
	cmp	eax, 65535				; 0000ffffH
	jg	SHORT $LN12@AuPCIEScan

; 367  : 		pciSegment = allocs->pciSegment;

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, WORD PTR [rax+8]
	mov	WORD PTR pciSegment$[rbp], ax
	jmp	SHORT $LN13@AuPCIEScan
$LN12@AuPCIEScan:

; 368  : 	else
; 369  : 		pciSegment = 0;

	xor	eax, eax
	mov	WORD PTR pciSegment$[rbp], ax
$LN13@AuPCIEScan:

; 370  : 
; 371  : 	for (int bus = 0; bus < allocs->endBusNum; bus++){

	mov	DWORD PTR bus$1[rbp], 0
	jmp	SHORT $LN4@AuPCIEScan
$LN2@AuPCIEScan:
	mov	eax, DWORD PTR bus$1[rbp]
	inc	eax
	mov	DWORD PTR bus$1[rbp], eax
$LN4@AuPCIEScan:
	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$1[rbp], eax
	jge	$LN3@AuPCIEScan

; 372  : 		for (int dev = 0; dev < PCI_DEVICE_PER_BUS; dev++) {

	mov	DWORD PTR dev$2[rbp], 0
	jmp	SHORT $LN7@AuPCIEScan
$LN5@AuPCIEScan:
	mov	eax, DWORD PTR dev$2[rbp]
	inc	eax
	mov	DWORD PTR dev$2[rbp], eax
$LN7@AuPCIEScan:
	cmp	DWORD PTR dev$2[rbp], 32		; 00000020H
	jge	$LN6@AuPCIEScan

; 373  : 			for (int func = 0; func < PCI_FUNCTION_PER_DEVICE; func++) {

	mov	DWORD PTR func$3[rbp], 0
	jmp	SHORT $LN10@AuPCIEScan
$LN8@AuPCIEScan:
	mov	eax, DWORD PTR func$3[rbp]
	inc	eax
	mov	DWORD PTR func$3[rbp], eax
$LN10@AuPCIEScan:
	cmp	DWORD PTR func$3[rbp], 8
	jge	$LN9@AuPCIEScan

; 374  : 				uint64_t address = AuPCIEGetDevice(pciSegment, bus, dev, func);

	mov	r9d, DWORD PTR func$3[rbp]
	mov	r8d, DWORD PTR dev$2[rbp]
	mov	edx, DWORD PTR bus$1[rbp]
	movzx	ecx, WORD PTR pciSegment$[rbp]
	call	?AuPCIEGetDevice@@YA_KGHHH@Z		; AuPCIEGetDevice
	mov	QWORD PTR address$4[rbp], rax

; 375  : 
; 376  : 				if (address == 0xFFFFFFFF)

	mov	eax, -1					; ffffffffH
	cmp	QWORD PTR address$4[rbp], rax
	jne	SHORT $LN14@AuPCIEScan

; 377  : 					continue;

	jmp	SHORT $LN8@AuPCIEScan
$LN14@AuPCIEScan:

; 378  : 				uint8_t class_code = AuPCIERead(address, PCI_CLASS, bus, dev, func);

	mov	eax, DWORD PTR func$3[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR dev$2[rbp]
	mov	r8d, DWORD PTR bus$1[rbp]
	mov	edx, 11
	mov	rcx, QWORD PTR address$4[rbp]
	call	AuPCIERead
	mov	BYTE PTR class_code$5[rbp], al

; 379  : 				uint8_t sub_ClassCode = AuPCIERead(address, PCI_SUBCLASS, bus, dev, func);

	mov	eax, DWORD PTR func$3[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR dev$2[rbp]
	mov	r8d, DWORD PTR bus$1[rbp]
	mov	edx, 10
	mov	rcx, QWORD PTR address$4[rbp]
	call	AuPCIERead
	mov	BYTE PTR sub_ClassCode$6[rbp], al

; 380  : 				if (classCode == 0xFF || sub_ClassCode == 0xFF)

	movzx	eax, BYTE PTR classCode$[rbp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN16@AuPCIEScan
	movzx	eax, BYTE PTR sub_ClassCode$6[rbp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN15@AuPCIEScan
$LN16@AuPCIEScan:

; 381  : 					continue;

	jmp	$LN8@AuPCIEScan
$LN15@AuPCIEScan:

; 382  : 				if (class_code == classCode && sub_ClassCode == subClassCode) {

	movzx	eax, BYTE PTR class_code$5[rbp]
	movzx	ecx, BYTE PTR classCode$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN17@AuPCIEScan
	movzx	eax, BYTE PTR sub_ClassCode$6[rbp]
	movzx	ecx, BYTE PTR subClassCode$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN17@AuPCIEScan

; 383  : 					*bus_ = bus;

	mov	rax, QWORD PTR bus_$[rbp]
	mov	ecx, DWORD PTR bus$1[rbp]
	mov	DWORD PTR [rax], ecx

; 384  : 					*dev_ = dev;

	mov	rax, QWORD PTR dev_$[rbp]
	mov	ecx, DWORD PTR dev$2[rbp]
	mov	DWORD PTR [rax], ecx

; 385  : 					*func_ = func;

	mov	rax, QWORD PTR func_$[rbp]
	mov	ecx, DWORD PTR func$3[rbp]
	mov	DWORD PTR [rax], ecx

; 386  : 					return address;

	mov	rax, QWORD PTR address$4[rbp]
	jmp	SHORT $LN1@AuPCIEScan
$LN17@AuPCIEScan:

; 387  : 				}
; 388  : 			}

	jmp	$LN8@AuPCIEScan
$LN9@AuPCIEScan:

; 389  : 		}

	jmp	$LN5@AuPCIEScan
$LN6@AuPCIEScan:

; 390  : 	}

	jmp	$LN2@AuPCIEScan
$LN3@AuPCIEScan:

; 391  : 
; 392  : 	return 0xFFFFFFFF;

	mov	eax, -1					; ffffffffH
$LN1@AuPCIEScan:

; 393  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
AuPCIEScanClass ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT AuPCIEScanClassIF
_TEXT	SEGMENT
mcfg$ = 0
allocs$ = 8
pciSegment$ = 16
bus$1 = 20
dev$2 = 24
func$3 = 28
address$4 = 32
class_code$5 = 40
sub_ClassCode$6 = 41
prog_if$7 = 42
classCode$ = 128
subClassCode$ = 136
progIf$ = 144
bus_$ = 152
dev_$ = 160
func_$ = 168
AuPCIEScanClassIF PROC					; COMDAT

; 405  : uint64_t AuPCIEScanClassIF(uint8_t classCode, uint8_t subClassCode, uint8_t progIf, int *bus_, int *dev_, int *func_) {

$LN18:
	mov	QWORD PTR [rsp+32], r9
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 160				; 000000a0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 406  : 	if (!AuACPIPCIESupported()) {

	call	?AuACPIPCIESupported@@YA_NXZ		; AuACPIPCIESupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@AuPCIEScan

; 407  : 		return 0; //pci_scan_class(classCode, subClassCode);

	xor	eax, eax
	jmp	$LN1@AuPCIEScan
$LN11@AuPCIEScan:

; 408  : 	}
; 409  : 
; 410  : 	acpiMcfg *mcfg = AuACPIGetMCFG();

	call	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ	; AuACPIGetMCFG
	mov	QWORD PTR mcfg$[rbp], rax

; 411  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rbp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
	mov	QWORD PTR allocs$[rbp], rax

; 412  : 	uint16_t pciSegment = 0;

	xor	eax, eax
	mov	WORD PTR pciSegment$[rbp], ax

; 413  : 	if (allocs->pciSegment <= 65535)

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, WORD PTR [rax+8]
	cmp	eax, 65535				; 0000ffffH
	jg	SHORT $LN12@AuPCIEScan

; 414  : 		pciSegment = allocs->pciSegment;

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, WORD PTR [rax+8]
	mov	WORD PTR pciSegment$[rbp], ax
	jmp	SHORT $LN13@AuPCIEScan
$LN12@AuPCIEScan:

; 415  : 	else
; 416  : 		pciSegment = 0;

	xor	eax, eax
	mov	WORD PTR pciSegment$[rbp], ax
$LN13@AuPCIEScan:

; 417  : 
; 418  : 	for (int bus = 0; bus < allocs->endBusNum; bus++){

	mov	DWORD PTR bus$1[rbp], 0
	jmp	SHORT $LN4@AuPCIEScan
$LN2@AuPCIEScan:
	mov	eax, DWORD PTR bus$1[rbp]
	inc	eax
	mov	DWORD PTR bus$1[rbp], eax
$LN4@AuPCIEScan:
	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$1[rbp], eax
	jge	$LN3@AuPCIEScan

; 419  : 		for (int dev = 0; dev < PCI_DEVICE_PER_BUS; dev++) {

	mov	DWORD PTR dev$2[rbp], 0
	jmp	SHORT $LN7@AuPCIEScan
$LN5@AuPCIEScan:
	mov	eax, DWORD PTR dev$2[rbp]
	inc	eax
	mov	DWORD PTR dev$2[rbp], eax
$LN7@AuPCIEScan:
	cmp	DWORD PTR dev$2[rbp], 32		; 00000020H
	jge	$LN6@AuPCIEScan

; 420  : 			for (int func = 0; func < PCI_FUNCTION_PER_DEVICE; func++) {

	mov	DWORD PTR func$3[rbp], 0
	jmp	SHORT $LN10@AuPCIEScan
$LN8@AuPCIEScan:
	mov	eax, DWORD PTR func$3[rbp]
	inc	eax
	mov	DWORD PTR func$3[rbp], eax
$LN10@AuPCIEScan:
	cmp	DWORD PTR func$3[rbp], 8
	jge	$LN9@AuPCIEScan

; 421  : 				uint64_t address = AuPCIEGetDevice(pciSegment, bus, dev, func);

	mov	r9d, DWORD PTR func$3[rbp]
	mov	r8d, DWORD PTR dev$2[rbp]
	mov	edx, DWORD PTR bus$1[rbp]
	movzx	ecx, WORD PTR pciSegment$[rbp]
	call	?AuPCIEGetDevice@@YA_KGHHH@Z		; AuPCIEGetDevice
	mov	QWORD PTR address$4[rbp], rax

; 422  : 
; 423  : 				if (address == 0xFFFFFFFF)

	mov	eax, -1					; ffffffffH
	cmp	QWORD PTR address$4[rbp], rax
	jne	SHORT $LN14@AuPCIEScan

; 424  : 					continue;

	jmp	SHORT $LN8@AuPCIEScan
$LN14@AuPCIEScan:

; 425  : 				uint8_t class_code = AuPCIERead(address, PCI_CLASS, bus, dev, func);

	mov	eax, DWORD PTR func$3[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR dev$2[rbp]
	mov	r8d, DWORD PTR bus$1[rbp]
	mov	edx, 11
	mov	rcx, QWORD PTR address$4[rbp]
	call	AuPCIERead
	mov	BYTE PTR class_code$5[rbp], al

; 426  : 				uint8_t sub_ClassCode = AuPCIERead(address, PCI_SUBCLASS, bus, dev, func);

	mov	eax, DWORD PTR func$3[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR dev$2[rbp]
	mov	r8d, DWORD PTR bus$1[rbp]
	mov	edx, 10
	mov	rcx, QWORD PTR address$4[rbp]
	call	AuPCIERead
	mov	BYTE PTR sub_ClassCode$6[rbp], al

; 427  : 				uint8_t prog_if = AuPCIERead(address, PCI_PROG_IF, bus, dev, func);

	mov	eax, DWORD PTR func$3[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR dev$2[rbp]
	mov	r8d, DWORD PTR bus$1[rbp]
	mov	edx, 9
	mov	rcx, QWORD PTR address$4[rbp]
	call	AuPCIERead
	mov	BYTE PTR prog_if$7[rbp], al

; 428  : 				if (classCode == 0xFF)

	movzx	eax, BYTE PTR classCode$[rbp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN15@AuPCIEScan

; 429  : 					continue;

	jmp	$LN8@AuPCIEScan
$LN15@AuPCIEScan:

; 430  : 				if (class_code == classCode && sub_ClassCode == subClassCode && prog_if == progIf) {

	movzx	eax, BYTE PTR class_code$5[rbp]
	movzx	ecx, BYTE PTR classCode$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN16@AuPCIEScan
	movzx	eax, BYTE PTR sub_ClassCode$6[rbp]
	movzx	ecx, BYTE PTR subClassCode$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN16@AuPCIEScan
	movzx	eax, BYTE PTR prog_if$7[rbp]
	movzx	ecx, BYTE PTR progIf$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN16@AuPCIEScan

; 431  : 					*bus_ = bus;

	mov	rax, QWORD PTR bus_$[rbp]
	mov	ecx, DWORD PTR bus$1[rbp]
	mov	DWORD PTR [rax], ecx

; 432  : 					*dev_ = dev;

	mov	rax, QWORD PTR dev_$[rbp]
	mov	ecx, DWORD PTR dev$2[rbp]
	mov	DWORD PTR [rax], ecx

; 433  : 					*func_ = func;

	mov	rax, QWORD PTR func_$[rbp]
	mov	ecx, DWORD PTR func$3[rbp]
	mov	DWORD PTR [rax], ecx

; 434  : 					return address;

	mov	rax, QWORD PTR address$4[rbp]
	jmp	SHORT $LN1@AuPCIEScan
$LN16@AuPCIEScan:

; 435  : 				}
; 436  : 			}

	jmp	$LN8@AuPCIEScan
$LN9@AuPCIEScan:

; 437  : 		}

	jmp	$LN5@AuPCIEScan
$LN6@AuPCIEScan:

; 438  : 	}

	jmp	$LN2@AuPCIEScan
$LN3@AuPCIEScan:

; 439  : 
; 440  : 	return 0xFFFFFFFF;

	mov	eax, -1					; ffffffffH
$LN1@AuPCIEScan:

; 441  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
AuPCIEScanClassIF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT AuPCIEAllocMSI
_TEXT	SEGMENT
value$ = 0
status$ = 8
capptr$1 = 16
cap_reg$2 = 20
msi_reg$3 = 24
msctl$4 = 28
bit64_cap$5 = 32
maskcap$6 = 33
msi_data$7 = 40
msi_addr$8 = 48
cap_reg2$9 = 56
tv138 = 124
tv134 = 124
device$ = 144
vector$ = 152
bus$ = 160
dev$ = 168
func$ = 176
AuPCIEAllocMSI PROC					; COMDAT

; 454  : bool AuPCIEAllocMSI(uint64_t device, size_t vector, int bus, int dev, int func) {

$LN16:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 192				; 000000c0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 455  : 	if (!AuACPIPCIESupported())

	call	?AuACPIPCIESupported@@YA_NXZ		; AuACPIPCIESupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@AuPCIEAllo

; 456  : 		return false;

	xor	al, al
	jmp	$LN1@AuPCIEAllo
$LN4@AuPCIEAllo:

; 457  : 
; 458  : 	bool value = false;

	mov	BYTE PTR value$[rbp], 0

; 459  : 	uint64_t status = AuPCIERead64(device, PCI_COMMAND, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rbp]
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIERead64
	mov	QWORD PTR status$[rbp], rax

; 460  : 	status >>= 16;

	mov	rax, QWORD PTR status$[rbp]
	shr	rax, 16
	mov	QWORD PTR status$[rbp], rax

; 461  : 	if ((status & (1 << 4)) != 0) {

	mov	rax, QWORD PTR status$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN5@AuPCIEAllo

; 462  : 		uint32_t capptr = AuPCIERead64(device, PCI_CAPABILITIES_PTR, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rbp]
	mov	r8d, 4
	mov	edx, 52					; 00000034H
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIERead64
	mov	DWORD PTR capptr$1[rbp], eax

; 463  : 		capptr &= 0xFF;

	mov	eax, DWORD PTR capptr$1[rbp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR capptr$1[rbp], eax

; 464  : 		uint32_t cap_reg = 0;

	mov	DWORD PTR cap_reg$2[rbp], 0

; 465  : 		uint32_t msi_reg = 0;

	mov	DWORD PTR msi_reg$3[rbp], 0
$LN2@AuPCIEAllo:

; 466  : 		while (capptr != 0) {

	cmp	DWORD PTR capptr$1[rbp], 0
	je	$LN3@AuPCIEAllo

; 467  : 			cap_reg = AuPCIERead64(device, capptr, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rbp]
	mov	r8d, 4
	mov	edx, DWORD PTR capptr$1[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIERead64
	mov	DWORD PTR cap_reg$2[rbp], eax

; 468  : 			if ((cap_reg & 0xff) == 0x5) {

	mov	eax, DWORD PTR cap_reg$2[rbp]
	and	eax, 255				; 000000ffH
	cmp	eax, 5
	jne	$LN6@AuPCIEAllo

; 469  : 				msi_reg = cap_reg;

	mov	eax, DWORD PTR cap_reg$2[rbp]
	mov	DWORD PTR msi_reg$3[rbp], eax

; 470  : 				uint16_t msctl = msi_reg >> 16;

	mov	eax, DWORD PTR msi_reg$3[rbp]
	shr	eax, 16
	mov	WORD PTR msctl$4[rbp], ax

; 471  : 				bool bit64_cap = (msctl & (1 << 7));

	movzx	eax, WORD PTR msctl$4[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN12@AuPCIEAllo
	mov	BYTE PTR tv134[rbp], 1
	jmp	SHORT $LN13@AuPCIEAllo
$LN12@AuPCIEAllo:
	mov	BYTE PTR tv134[rbp], 0
$LN13@AuPCIEAllo:
	movzx	eax, BYTE PTR tv134[rbp]
	mov	BYTE PTR bit64_cap$5[rbp], al

; 472  : 				bool maskcap = (msctl & (1 << 8));

	movzx	eax, WORD PTR msctl$4[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN14@AuPCIEAllo
	mov	BYTE PTR tv138[rbp], 1
	jmp	SHORT $LN15@AuPCIEAllo
$LN14@AuPCIEAllo:
	mov	BYTE PTR tv138[rbp], 0
$LN15@AuPCIEAllo:
	movzx	eax, BYTE PTR tv138[rbp]
	mov	BYTE PTR maskcap$6[rbp], al

; 473  : 
; 474  : 				uint64_t msi_data = 0;

	mov	QWORD PTR msi_data$7[rbp], 0

; 475  : 
; 476  : 				uint64_t msi_addr = x86_64_cpu_msi_address(&msi_data, vector, 0, 1, 0);

	mov	BYTE PTR [rsp+32], 0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR vector$[rbp]
	lea	rcx, QWORD PTR msi_data$7[rbp]
	call	?x86_64_cpu_msi_address@@YA_KPEA_K_KIEE@Z ; x86_64_cpu_msi_address
	mov	QWORD PTR msi_addr$8[rbp], rax

; 477  : 				
; 478  : 
; 479  : 				AuPCIEWrite64(device, capptr + 0x4, 4, msi_addr & UINT32_MAX, bus, dev, func);

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR msi_addr$8[rbp]
	and	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR capptr$1[rbp]
	add	ecx, 4
	mov	edx, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rbp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, rax
	mov	r8d, 4
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIEWrite64

; 480  : 
; 481  : 				if (bit64_cap) {

	movzx	eax, BYTE PTR bit64_cap$5[rbp]
	test	eax, eax
	je	$LN7@AuPCIEAllo

; 482  : 					AuPCIEWrite64(device, capptr + 0x8, 4, msi_addr >> 32, bus, dev, func);

	mov	rax, QWORD PTR msi_addr$8[rbp]
	shr	rax, 32					; 00000020H
	mov	ecx, DWORD PTR capptr$1[rbp]
	add	ecx, 8
	mov	edx, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rbp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, rax
	mov	r8d, 4
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIEWrite64

; 483  : 					AuPCIEWrite64(device, capptr + 0xC, 2, msi_data & UINT16_MAX, bus, dev, func);

	mov	rax, QWORD PTR msi_data$7[rbp]
	and	rax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR capptr$1[rbp]
	add	ecx, 12
	mov	edx, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rbp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, rax
	mov	r8d, 2
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIEWrite64

; 484  : 				}

	jmp	SHORT $LN8@AuPCIEAllo
$LN7@AuPCIEAllo:

; 485  : 				else
; 486  : 					AuPCIEWrite64(device, capptr + 0x8, 2, msi_data & UINT16_MAX, bus, dev, func);

	mov	rax, QWORD PTR msi_data$7[rbp]
	and	rax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR capptr$1[rbp]
	add	ecx, 8
	mov	edx, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rbp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, rax
	mov	r8d, 2
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIEWrite64
$LN8@AuPCIEAllo:

; 487  : 
; 488  : 
; 489  : 				if (maskcap)

	movzx	eax, BYTE PTR maskcap$6[rbp]
	test	eax, eax
	je	SHORT $LN9@AuPCIEAllo

; 490  : 					AuPCIEWrite64(device, capptr + 0x10, 4, 0, bus, dev, func);

	mov	eax, DWORD PTR capptr$1[rbp]
	add	eax, 16
	mov	ecx, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR bus$[rbp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, eax
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIEWrite64
$LN9@AuPCIEAllo:

; 491  : 
; 492  : 
; 493  : 
; 494  : 				msctl |= 1;

	movzx	eax, WORD PTR msctl$4[rbp]
	or	eax, 1
	mov	WORD PTR msctl$4[rbp], ax

; 495  : 
; 496  : 				cap_reg = msi_reg & UINT16_MAX | msctl << 16;

	mov	eax, DWORD PTR msi_reg$3[rbp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, WORD PTR msctl$4[rbp]
	shl	ecx, 16
	or	eax, ecx
	mov	DWORD PTR cap_reg$2[rbp], eax

; 497  : 				AuPCIEWrite64(device, capptr, 4, cap_reg & UINT32_MAX, bus, dev, func);

	mov	eax, DWORD PTR cap_reg$2[rbp]
	mov	ecx, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR bus$[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, 4
	mov	edx, DWORD PTR capptr$1[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIEWrite64

; 498  : 				uint32_t cap_reg2 = AuPCIERead64(device, capptr, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rbp]
	mov	r8d, 4
	mov	edx, DWORD PTR capptr$1[rbp]
	mov	rcx, QWORD PTR device$[rbp]
	call	AuPCIERead64
	mov	DWORD PTR cap_reg2$9[rbp], eax

; 499  : 				value = true; //MSI Allocated

	mov	BYTE PTR value$[rbp], 1

; 500  : 				break;

	jmp	SHORT $LN3@AuPCIEAllo
$LN6@AuPCIEAllo:

; 501  : 			}
; 502  : 
; 503  : 			if ((cap_reg & 0xff) == 0x11) {

	mov	eax, DWORD PTR cap_reg$2[rbp]
	and	eax, 255				; 000000ffH
	cmp	eax, 17
	jne	SHORT $LN10@AuPCIEAllo

; 504  : 				value = false; //MSI-X Allocated: not implemented

	mov	BYTE PTR value$[rbp], 0

; 505  : 				AuTextOut("MSI-X found \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0P@OALOLLDO@MSI?9X?5found?5?$AN?6@
	call	AuTextOut

; 506  : 				break;

	jmp	SHORT $LN3@AuPCIEAllo
$LN10@AuPCIEAllo:

; 507  : 			}
; 508  : 			capptr = ((cap_reg >> 8) & 0xff);   //((cap_reg >> 8) & 0xFF) / 4;

	mov	eax, DWORD PTR cap_reg$2[rbp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	DWORD PTR capptr$1[rbp], eax

; 509  : 		}

	jmp	$LN2@AuPCIEAllo
$LN3@AuPCIEAllo:
$LN5@AuPCIEAllo:

; 510  : 	}
; 511  : 
; 512  : 	return value;

	movzx	eax, BYTE PTR value$[rbp]
$LN1@AuPCIEAllo:

; 513  : }

	lea	rsp, QWORD PTR [rbp+128]
	pop	rbp
	ret	0
AuPCIEAllocMSI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pcie.cpp
;	COMDAT ?AuPCIEGetDevice@@YA_KGHHH@Z
_TEXT	SEGMENT
addr$ = 0
mcfg$ = 8
allocs$ = 16
seg$ = 112
bus$ = 120
dev$ = 128
func$ = 136
?AuPCIEGetDevice@@YA_KGHHH@Z PROC			; AuPCIEGetDevice, COMDAT

; 44   : uint64_t AuPCIEGetDevice(uint16_t seg, int bus, int dev, int func) {

$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F4982F6F_pcie@cpp
	call	__CheckForDebuggerJustMyCode

; 45   : 	if (bus > 255)

	cmp	DWORD PTR bus$[rbp], 255		; 000000ffH
	jle	SHORT $LN2@AuPCIEGetD

; 46   : 		return 0;

	xor	eax, eax
	jmp	$LN1@AuPCIEGetD
$LN2@AuPCIEGetD:

; 47   : 	if (dev > 31)

	cmp	DWORD PTR dev$[rbp], 31
	jle	SHORT $LN3@AuPCIEGetD

; 48   : 		return 0;

	xor	eax, eax
	jmp	$LN1@AuPCIEGetD
$LN3@AuPCIEGetD:

; 49   : 	if (func > 7)

	cmp	DWORD PTR func$[rbp], 7
	jle	SHORT $LN4@AuPCIEGetD

; 50   : 		return 0;

	xor	eax, eax
	jmp	$LN1@AuPCIEGetD
$LN4@AuPCIEGetD:

; 51   : 
; 52   : 	uint64_t addr = 0;

	mov	QWORD PTR addr$[rbp], 0

; 53   : 	acpiMcfg* mcfg = AuACPIGetMCFG();

	call	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ	; AuACPIGetMCFG
	mov	QWORD PTR mcfg$[rbp], rax

; 54   : 	acpiMcfgAlloc* allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rbp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc *,acpiMcfg>
	mov	QWORD PTR allocs$[rbp], rax

; 55   : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum){

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rbp]
	jg	SHORT $LN5@AuPCIEGetD
	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rbp], eax
	jg	SHORT $LN5@AuPCIEGetD

; 56   : 		addr = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) |

	mov	rax, QWORD PTR allocs$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR dev$[rbp]
	shl	ecx, 15
	movsxd	rcx, ecx
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rbp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	QWORD PTR addr$[rbp], rax

; 57   : 			(dev << 15) | (func << 12);
; 58   : 		return addr;

	mov	rax, QWORD PTR addr$[rbp]
	jmp	SHORT $LN1@AuPCIEGetD
$LN5@AuPCIEGetD:

; 59   : 	}
; 60   : 
; 61   : 	return UINT64_MAX;

	mov	rax, -1
$LN1@AuPCIEGetD:

; 62   : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?AuPCIEGetDevice@@YA_KGHHH@Z ENDP			; AuPCIEGetDevice
_TEXT	ENDS
END
