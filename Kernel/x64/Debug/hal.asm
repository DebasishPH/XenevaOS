; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	AuHalInitialise
PUBLIC	AuHalPostInitialise
PUBLIC	AuHalRegisterIRQ
PUBLIC	AuHalMaskIRQ
PUBLIC	AuInterruptEnd
PUBLIC	AuHalFlushCache
PUBLIC	AuDisableInterrupt
EXTRN	?x86_64_cpu_initialize@@YAXE@Z:PROC		; x86_64_cpu_initialize
EXTRN	x64_cli:PROC
EXTRN	cache_flush:PROC
EXTRN	?x86_64_hal_initialise@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z:PROC ; x86_64_hal_initialise
EXTRN	?IOAPICMaskIRQ@@YAXE_N@Z:PROC			; IOAPICMaskIRQ
EXTRN	?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z:PROC	; IOAPICRegisterIRQ
EXTRN	?APICLocalEOI@@YAXXZ:PROC			; APICLocalEOI
EXTRN	?AuGetCPUCount@@YAEXZ:PROC			; AuGetCPUCount
pdata	SEGMENT
$pdata$AuHalInitialise DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$AuHalInitialise
$pdata$AuHalPostInitialise DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$AuHalPostInitialise
$pdata$AuHalRegisterIRQ DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$AuHalRegisterIRQ
$pdata$AuHalMaskIRQ DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$AuHalMaskIRQ
$pdata$AuInterruptEnd DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$AuInterruptEnd
$pdata$AuHalFlushCache DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$AuHalFlushCache
$pdata$AuDisableInterrupt DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$AuDisableInterrupt
pdata	ENDS
xdata	SEGMENT
$unwind$AuHalInitialise DD 010901H
	DD	04209H
$unwind$AuHalPostInitialise DD 010401H
	DD	04204H
$unwind$AuHalRegisterIRQ DD 011801H
	DD	06218H
$unwind$AuHalMaskIRQ DD 010c01H
	DD	0620cH
$unwind$AuInterruptEnd DD 010801H
	DD	04208H
$unwind$AuHalFlushCache DD 010401H
	DD	04204H
$unwind$AuDisableInterrupt DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\hal.cpp
_TEXT	SEGMENT
AuDisableInterrupt PROC

; 99   : AU_EXTERN AU_EXPORT void AuDisableInterrupt() {

$LN3:
	sub	rsp, 40					; 00000028H

; 100  : 	x64_cli();

	call	x64_cli

; 101  : }

	add	rsp, 40					; 00000028H
	ret	0
AuDisableInterrupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\hal.cpp
_TEXT	SEGMENT
AuHalFlushCache PROC

; 92   : void AuHalFlushCache() {

$LN3:
	sub	rsp, 40					; 00000028H

; 93   : 	cache_flush();

	call	cache_flush

; 94   : }

	add	rsp, 40					; 00000028H
	ret	0
AuHalFlushCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\hal.cpp
_TEXT	SEGMENT
irq$ = 48
AuInterruptEnd PROC

; 85   : void AuInterruptEnd(uint8_t irq) {

$LN3:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 40					; 00000028H

; 86   : 	APICLocalEOI();

	call	?APICLocalEOI@@YAXXZ			; APICLocalEOI

; 87   : }

	add	rsp, 40					; 00000028H
	ret	0
AuInterruptEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\hal.cpp
_TEXT	SEGMENT
tv65 = 32
irq$ = 64
value$ = 72
AuHalMaskIRQ PROC

; 76   : void AuHalMaskIRQ(uint8_t irq, BOOL value) {

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 77   : 	IOAPICMaskIRQ(irq, value);

	cmp	BYTE PTR value$[rsp], 0
	je	SHORT $LN3@AuHalMaskI
	mov	BYTE PTR tv65[rsp], 1
	jmp	SHORT $LN4@AuHalMaskI
$LN3@AuHalMaskI:
	mov	BYTE PTR tv65[rsp], 0
$LN4@AuHalMaskI:
	movzx	edx, BYTE PTR tv65[rsp]
	movzx	ecx, BYTE PTR irq$[rsp]
	call	?IOAPICMaskIRQ@@YAXE_N@Z		; IOAPICMaskIRQ

; 78   : }

	add	rsp, 56					; 00000038H
	ret	0
AuHalMaskIRQ ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\hal.cpp
_TEXT	SEGMENT
tv65 = 32
vector$ = 64
fn$ = 72
irq$ = 80
level$ = 88
AuHalRegisterIRQ PROC

; 67   : void AuHalRegisterIRQ(size_t vector, void(*fn)(size_t, void*), uint8_t irq, BOOL level) {

$LN5:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 68   : 	IOAPICRegisterIRQ(vector, fn, irq, level);

	cmp	BYTE PTR level$[rsp], 0
	je	SHORT $LN3@AuHalRegis
	mov	BYTE PTR tv65[rsp], 1
	jmp	SHORT $LN4@AuHalRegis
$LN3@AuHalRegis:
	mov	BYTE PTR tv65[rsp], 0
$LN4@AuHalRegis:
	movzx	r9d, BYTE PTR tv65[rsp]
	movzx	r8d, BYTE PTR irq$[rsp]
	mov	rdx, QWORD PTR fn$[rsp]
	mov	rcx, QWORD PTR vector$[rsp]
	call	?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z ; IOAPICRegisterIRQ

; 69   : }

	add	rsp, 56					; 00000038H
	ret	0
AuHalRegisterIRQ ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\hal.cpp
_TEXT	SEGMENT
AuHalPostInitialise PROC

; 54   : void AuHalPostInitialise() {

$LN3:
	sub	rsp, 40					; 00000028H

; 55   : #ifdef ARCH_X64
; 56   : 	x86_64_cpu_initialize(AuGetCPUCount());

	call	?AuGetCPUCount@@YAEXZ			; AuGetCPUCount
	movzx	ecx, al
	call	?x86_64_cpu_initialize@@YAXE@Z		; x86_64_cpu_initialize

; 57   : #endif
; 58   : }

	add	rsp, 40					; 00000028H
	ret	0
AuHalPostInitialise ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\hal.cpp
_TEXT	SEGMENT
info$ = 48
AuHalInitialise PROC

; 43   : void AuHalInitialise(KERNEL_BOOT_INFO *info) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 44   : #ifdef ARCH_X64
; 45   : 	x86_64_hal_initialise(info);

	mov	rcx, QWORD PTR info$[rsp]
	call	?x86_64_hal_initialise@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; x86_64_hal_initialise

; 46   : #endif
; 47   : 	//! else go for other platforms
; 48   : }

	add	rsp, 40					; 00000028H
	ret	0
AuHalInitialise ENDP
_TEXT	ENDS
END
