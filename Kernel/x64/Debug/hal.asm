; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__38704666_hal@cpp DB 01H
msvcjmc	ENDS
PUBLIC	AuHalInitialise
PUBLIC	AuHalPostInitialise
PUBLIC	AuHalRegisterIRQ
PUBLIC	AuHalMaskIRQ
PUBLIC	AuInterruptEnd
PUBLIC	AuHalFlushCache
PUBLIC	AuDisableInterrupt
PUBLIC	AuEnableInterrupt
PUBLIC	AuGetTimeOfTheDay
PUBLIC	__JustMyCode_Default
EXTRN	?x86_64_cpu_initialize@@YAXE@Z:PROC		; x86_64_cpu_initialize
EXTRN	?x86_64_gettimeofday@@YAHPEAU_timeval_@@@Z:PROC	; x86_64_gettimeofday
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	cache_flush:PROC
EXTRN	?x86_64_hal_initialise@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z:PROC ; x86_64_hal_initialise
EXTRN	?IOAPICMaskIRQ@@YAXE_N@Z:PROC			; IOAPICMaskIRQ
EXTRN	?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z:PROC	; IOAPICRegisterIRQ
EXTRN	?APICLocalEOI@@YAXXZ:PROC			; APICLocalEOI
EXTRN	?AuGetCPUCount@@YAEXZ:PROC			; AuGetCPUCount
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuHalInitialise DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$AuHalInitialise
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuHalPostInitialise DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$AuHalPostInitialise
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuHalRegisterIRQ DD imagerel $LN5
	DD	imagerel $LN5+87
	DD	imagerel $unwind$AuHalRegisterIRQ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuHalMaskIRQ DD imagerel $LN5
	DD	imagerel $LN5+65
	DD	imagerel $unwind$AuHalMaskIRQ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuInterruptEnd DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$AuInterruptEnd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuHalFlushCache DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$AuHalFlushCache
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuDisableInterrupt DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$AuDisableInterrupt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuEnableInterrupt DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$AuEnableInterrupt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuGetTimeOfTheDay DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$AuGetTimeOfTheDay
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuGetTimeOfTheDay DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuEnableInterrupt DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuDisableInterrupt DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuHalFlushCache DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuInterruptEnd DD 025030e01H
	DD	0b209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuHalMaskIRQ DD 025031201H
	DD	0d20d2312H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuHalRegisterIRQ DD 025031e01H
	DD	0d219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuHalPostInitialise DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuHalInitialise DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuGetTimeOfTheDay
_TEXT	SEGMENT
tv$ = 80
AuGetTimeOfTheDay PROC					; COMDAT

; 115  : AU_EXTERN AU_EXPORT int AuGetTimeOfTheDay(timeval *tv) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 116  : #ifdef ARCH_X64
; 117  : 	return x86_64_gettimeofday(tv);

	mov	rcx, QWORD PTR tv$[rbp]
	call	?x86_64_gettimeofday@@YAHPEAU_timeval_@@@Z ; x86_64_gettimeofday

; 118  : #endif
; 119  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuGetTimeOfTheDay ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuEnableInterrupt
_TEXT	SEGMENT
AuEnableInterrupt PROC					; COMDAT

; 106  : AU_EXTERN AU_EXPORT void AuEnableInterrupt() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 107  : 	x64_sti();

	call	x64_sti

; 108  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuEnableInterrupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuDisableInterrupt
_TEXT	SEGMENT
AuDisableInterrupt PROC					; COMDAT

; 99   : AU_EXTERN AU_EXPORT void AuDisableInterrupt() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 100  : 	x64_cli();

	call	x64_cli

; 101  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuDisableInterrupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuHalFlushCache
_TEXT	SEGMENT
AuHalFlushCache PROC					; COMDAT

; 92   : void AuHalFlushCache() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 93   : 	cache_flush();

	call	cache_flush

; 94   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuHalFlushCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuInterruptEnd
_TEXT	SEGMENT
irq$ = 80
AuInterruptEnd PROC					; COMDAT

; 85   : void AuInterruptEnd(uint8_t irq) {

$LN3:
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 86   : 	APICLocalEOI();

	call	?APICLocalEOI@@YAXXZ			; APICLocalEOI

; 87   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuInterruptEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuHalMaskIRQ
_TEXT	SEGMENT
tv65 = 64
irq$ = 96
value$ = 104
AuHalMaskIRQ PROC					; COMDAT

; 76   : void AuHalMaskIRQ(uint8_t irq, BOOL value) {

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 77   : 	IOAPICMaskIRQ(irq, value);

	cmp	BYTE PTR value$[rbp], 0
	je	SHORT $LN3@AuHalMaskI
	mov	BYTE PTR tv65[rbp], 1
	jmp	SHORT $LN4@AuHalMaskI
$LN3@AuHalMaskI:
	mov	BYTE PTR tv65[rbp], 0
$LN4@AuHalMaskI:
	movzx	edx, BYTE PTR tv65[rbp]
	movzx	ecx, BYTE PTR irq$[rbp]
	call	?IOAPICMaskIRQ@@YAXE_N@Z		; IOAPICMaskIRQ

; 78   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
AuHalMaskIRQ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuHalRegisterIRQ
_TEXT	SEGMENT
tv65 = 64
vector$ = 96
fn$ = 104
irq$ = 112
level$ = 120
AuHalRegisterIRQ PROC					; COMDAT

; 67   : void AuHalRegisterIRQ(size_t vector, void(*fn)(size_t, void*), uint8_t irq, BOOL level) {

$LN5:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 68   : 	IOAPICRegisterIRQ(vector, fn, irq, level);

	cmp	BYTE PTR level$[rbp], 0
	je	SHORT $LN3@AuHalRegis
	mov	BYTE PTR tv65[rbp], 1
	jmp	SHORT $LN4@AuHalRegis
$LN3@AuHalRegis:
	mov	BYTE PTR tv65[rbp], 0
$LN4@AuHalRegis:
	movzx	r9d, BYTE PTR tv65[rbp]
	movzx	r8d, BYTE PTR irq$[rbp]
	mov	rdx, QWORD PTR fn$[rbp]
	mov	rcx, QWORD PTR vector$[rbp]
	call	?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z ; IOAPICRegisterIRQ

; 69   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
AuHalRegisterIRQ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuHalPostInitialise
_TEXT	SEGMENT
AuHalPostInitialise PROC				; COMDAT

; 54   : void AuHalPostInitialise() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 55   : #ifdef ARCH_X64
; 56   : 	x86_64_cpu_initialize(AuGetCPUCount());

	call	?AuGetCPUCount@@YAEXZ			; AuGetCPUCount
	movzx	ecx, al
	call	?x86_64_cpu_initialize@@YAXE@Z		; x86_64_cpu_initialize

; 57   : #endif
; 58   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuHalPostInitialise ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\hal.cpp
;	COMDAT AuHalInitialise
_TEXT	SEGMENT
info$ = 80
AuHalInitialise PROC					; COMDAT

; 43   : void AuHalInitialise(KERNEL_BOOT_INFO *info) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__38704666_hal@cpp
	call	__CheckForDebuggerJustMyCode

; 44   : #ifdef ARCH_X64
; 45   : 	x86_64_hal_initialise(info);

	mov	rcx, QWORD PTR info$[rbp]
	call	?x86_64_hal_initialise@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; x86_64_hal_initialise

; 46   : #endif
; 47   : 	//! else go for other platforms
; 48   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuHalInitialise ENDP
_TEXT	ENDS
END
