; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Registered_dev@@3PEAU_SoundDev_@@EA		; _Registered_dev
PUBLIC	?dsp_first@@3PEAU__au_dsp__@@EA			; dsp_first
PUBLIC	?dsp_last@@3PEAU__au_dsp__@@EA			; dsp_last
PUBLIC	?mixbuf@@3PEAEEA				; mixbuf
PUBLIC	?_audio_started_@@3_NA				; _audio_started_
PUBLIC	?_audio_stopped_@@3_NA				; _audio_stopped_
_BSS	SEGMENT
?_Registered_dev@@3PEAU_SoundDev_@@EA DQ 01H DUP (?)	; _Registered_dev
?dsp_first@@3PEAU__au_dsp__@@EA DQ 01H DUP (?)		; dsp_first
?dsp_last@@3PEAU__au_dsp__@@EA DQ 01H DUP (?)		; dsp_last
?mixbuf@@3PEAEEA DQ 01H DUP (?)				; mixbuf
?_audio_started_@@3_NA DB 01H DUP (?)			; _audio_started_
	ALIGN	4

?_audio_stopped_@@3_NA DB 01H DUP (?)			; _audio_stopped_
_BSS	ENDS
msvcjmc	SEGMENT
__2B477A22_sound@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?AuSoundInitialise@@YAXXZ			; AuSoundInitialise
PUBLIC	AuSoundSetCard
PUBLIC	AuSoundGetBlock
PUBLIC	AuSoundRemoveDSP
PUBLIC	?AuSoundStart@@YAXXZ				; AuSoundStart
PUBLIC	?AuSoundStop@@YAXXZ				; AuSoundStop
PUBLIC	?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z		; AuSoundAddDSP
PUBLIC	?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z		; AuRemoveDSP
PUBLIC	?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z		; AuSoundGetDSP
PUBLIC	?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z	; AuSoundRead
PUBLIC	?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z	; AuSoundWrite
PUBLIC	?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z	; AuSoundIOControl
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_04PJHBAHNI@?1dev@				; `string'
PUBLIC	??_C@_05MHNANJII@sound@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
EXTRN	?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z:PROC ; AuCircBufInitialise
EXTRN	?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z:PROC	; AuCircBufFree
EXTRN	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z:PROC	; AuCircBufPut
EXTRN	?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z:PROC	; AuCircBufGet
EXTRN	?CircBufFull@@YA_NPEAU_circ_buf_@@@Z:PROC	; CircBufFull
EXTRN	AuGetCurrentThread:PROC
EXTRN	AuBlockThread:PROC
EXTRN	AuUnblockThread:PROC
EXTRN	AuForceScheduler:PROC
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuPmmngrFree:PROC
EXTRN	P2V:PROC
EXTRN	V2P:PROC
EXTRN	AuVFSFind:PROC
EXTRN	AuDevFSAddFile:PROC
EXTRN	strcpy:PROC
EXTRN	memset:PROC
EXTRN	x64_cli:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundInitialise@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+387
	DD	imagerel $unwind$?AuSoundInitialise@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuSoundSetCard DD imagerel $LN4
	DD	imagerel $LN4+56
	DD	imagerel $unwind$AuSoundSetCard
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuSoundGetBlock DD imagerel $LN25
	DD	imagerel $LN25+468
	DD	imagerel $unwind$AuSoundGetBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuSoundRemoveDSP DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$AuSoundRemoveDSP
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundStart@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$?AuSoundStart@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundStop@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$?AuSoundStop@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z DD imagerel $LN8
	DD	imagerel $LN8+148
	DD	imagerel $unwind$?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z DD imagerel $LN7
	DD	imagerel $LN7+91
	DD	imagerel $unwind$?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD imagerel $LN9
	DD	imagerel $LN9+230
	DD	imagerel $unwind$?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+358
	DD	imagerel $unwind$?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z
pdata	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHNANJII@sound@
CONST	SEGMENT
??_C@_05MHNANJII@sound@ DB 'sound', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJHBAHNI@?1dev@
CONST	SEGMENT
??_C@_04PJHBAHNI@?1dev@ DB '/dev', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z DD 025041b01H
	DD	0116231bH
	DD	0500f0012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD 025032101H
	DD	0f21c2321H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD 025031e01H
	DD	0b219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundStop@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundStart@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuSoundRemoveDSP DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuSoundGetBlock DD 025041201H
	DD	010d2312H
	DD	050060014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuSoundSetCard DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSoundInitialise@@YAXXZ DD 025030e01H
	DD	0f209230eH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z
_TEXT	SEGMENT
_ioctl$ = 0
thr$ = 8
dsp$1 = 16
buffer$2 = 24
dsp_$3 = 32
tv65 = 104
node$ = 128
code$ = 136
arg$ = 144
?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z PROC	; AuSoundIOControl, COMDAT

; 224  : int AuSoundIOControl(AuVFSNode* node, int code, void* arg) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 225  : 	AuFileIOControl *_ioctl = (AuFileIOControl*)arg;

	mov	rax, QWORD PTR arg$[rbp]
	mov	QWORD PTR _ioctl$[rbp], rax

; 226  : 
; 227  : 
; 228  : 	AuThread *thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rbp], rax

; 229  : 	switch (code)

	mov	eax, DWORD PTR code$[rbp]
	mov	DWORD PTR tv65[rbp], eax
	cmp	DWORD PTR tv65[rbp], 100		; 00000064H
	je	SHORT $LN4@AuSoundIOC
	cmp	DWORD PTR tv65[rbp], 106		; 0000006aH
	je	$LN6@AuSoundIOC
	cmp	DWORD PTR tv65[rbp], 110		; 0000006eH
	je	$LN5@AuSoundIOC
	cmp	DWORD PTR tv65[rbp], 111		; 0000006fH
	je	$LN8@AuSoundIOC
	jmp	$LN9@AuSoundIOC
$LN4@AuSoundIOC:

; 230  : 	{
; 231  : 	case SOUND_REGISTER_SNDPLR: {
; 232  : 									
; 233  : 									AuDSP* dsp = (AuDSP*)kmalloc(sizeof(AuDSP));

	mov	ecx, 43					; 0000002bH
	call	kmalloc
	mov	QWORD PTR dsp$1[rbp], rax

; 234  : 									memset(dsp, 0, sizeof(AuDSP));

	mov	r8d, 43					; 0000002bH
	xor	edx, edx
	mov	rcx, QWORD PTR dsp$1[rbp]
	call	memset

; 235  : 									uint8_t* buffer = (uint8_t*)P2V((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	P2V
	mov	QWORD PTR buffer$2[rbp], rax

; 236  : 									memset(buffer, 0, PAGE_SIZE);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR buffer$2[rbp]
	call	memset

; 237  : 									dsp->buffer = AuCircBufInitialise(buffer, SND_BUFF_SZ);

	mov	edx, 4096				; 00001000H
	mov	rcx, QWORD PTR buffer$2[rbp]
	call	?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z ; AuCircBufInitialise
	mov	rcx, QWORD PTR dsp$1[rbp]
	mov	QWORD PTR [rcx], rax

; 238  : 									dsp->_dsp_id = thr->id;

	mov	rax, QWORD PTR dsp$1[rbp]
	mov	rcx, QWORD PTR thr$[rbp]
	movzx	ecx, WORD PTR [rcx+301]
	mov	WORD PTR [rax+8], cx

; 239  : 									dsp->SndThread = thr;

	mov	rax, QWORD PTR dsp$1[rbp]
	mov	rcx, QWORD PTR thr$[rbp]
	mov	QWORD PTR [rax+10], rcx

; 240  : 									dsp->sleep_time = _ioctl->uint_1;

	mov	rax, QWORD PTR _ioctl$[rbp]
	mov	eax, DWORD PTR [rax+10]
	mov	rcx, QWORD PTR dsp$1[rbp]
	mov	QWORD PTR [rcx+18], rax

; 241  : 									dsp->available = true;

	mov	rax, QWORD PTR dsp$1[rbp]
	mov	BYTE PTR [rax+26], 1

; 242  : 									AuSoundAddDSP(dsp);

	mov	rcx, QWORD PTR dsp$1[rbp]
	call	?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z	; AuSoundAddDSP

; 243  : 									break;

	jmp	SHORT $LN2@AuSoundIOC
$LN5@AuSoundIOC:

; 244  : 	}
; 245  : 	case SOUND_READ_AVAIL: {
; 246  : 							   AuDSP *dsp_ = AuSoundGetDSP(thr->id);

	mov	rax, QWORD PTR thr$[rbp]
	movzx	ecx, WORD PTR [rax+301]
	call	?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z	; AuSoundGetDSP
	mov	QWORD PTR dsp_$3[rbp], rax

; 247  : 							   _ioctl->uchar_2 = dsp_->available;

	mov	rax, QWORD PTR _ioctl$[rbp]
	mov	rcx, QWORD PTR dsp_$3[rbp]
	movzx	ecx, BYTE PTR [rcx+26]
	mov	BYTE PTR [rax+5], cl

; 248  : 							   break;

	jmp	SHORT $LN2@AuSoundIOC
$LN6@AuSoundIOC:

; 249  : 
; 250  : 	}
; 251  : 	case SOUND_SET_VOLUME: {
; 252  : 							   if (!_Registered_dev)

	cmp	QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA, 0 ; _Registered_dev
	jne	SHORT $LN7@AuSoundIOC

; 253  : 								   return -1;

	mov	eax, -1
	jmp	SHORT $LN1@AuSoundIOC
$LN7@AuSoundIOC:

; 254  : 							   _Registered_dev->set_vol(_ioctl->uchar_1);

	mov	rax, QWORD PTR _ioctl$[rbp]
	movzx	ecx, BYTE PTR [rax+4]
	mov	rax, QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA ; _Registered_dev
	call	QWORD PTR [rax+64]

; 255  : 							   break;

	jmp	SHORT $LN2@AuSoundIOC
$LN8@AuSoundIOC:

; 256  : 	}
; 257  : 	case SOUND_UNREGISTER_SNDPLR:{
; 258  : 									 AuSoundRemoveDSP(thr->id);

	mov	rax, QWORD PTR thr$[rbp]
	movzx	ecx, WORD PTR [rax+301]
	call	AuSoundRemoveDSP
$LN9@AuSoundIOC:
$LN2@AuSoundIOC:

; 259  : 									 break;
; 260  : 
; 261  : 	}
; 262  : 	default:
; 263  : 		break;
; 264  : 	}
; 265  : 	return 0;

	xor	eax, eax
$LN1@AuSoundIOC:

; 266  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z ENDP	; AuSoundIOControl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
_TEXT	SEGMENT
t$ = 0
dsp$ = 8
aligned_buf$ = 16
i$1 = 24
fsys$ = 112
file$ = 120
buffer$ = 128
length$ = 136
?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z PROC	; AuSoundWrite, COMDAT

; 173  : size_t AuSoundWrite(AuVFSNode* fsys, AuVFSNode* file, uint64_t* buffer, uint32_t length) {

$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 174  : 	x64_cli();

	call	x64_cli

; 175  : 	if (!_Registered_dev)

	cmp	QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA, 0 ; _Registered_dev
	jne	SHORT $LN5@AuSoundWri

; 176  : 		return 0;

	xor	eax, eax
	jmp	$LN1@AuSoundWri
$LN5@AuSoundWri:

; 177  : 	AuThread* t = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR t$[rbp], rax

; 178  : 	AuDSP* dsp = AuSoundGetDSP(t->id);

	mov	rax, QWORD PTR t$[rbp]
	movzx	ecx, WORD PTR [rax+301]
	call	?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z	; AuSoundGetDSP
	mov	QWORD PTR dsp$[rbp], rax

; 179  : 	uint8_t *aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	mov	QWORD PTR aligned_buf$[rbp], rax

; 180  : 	
; 181  : 	if (CircBufFull(dsp->buffer)){

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?CircBufFull@@YA_NPEAU_circ_buf_@@@Z	; CircBufFull
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@AuSoundWri

; 182  : 		if (dsp->SndThread->pendingSigCount > 0)

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rax, QWORD PTR [rax+10]
	movzx	eax, BYTE PTR [rax+632]
	test	eax, eax
	jle	SHORT $LN7@AuSoundWri

; 183  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@AuSoundWri
$LN7@AuSoundWri:

; 184  : 		AuBlockThread(dsp->SndThread);

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rcx, QWORD PTR [rax+10]
	call	AuBlockThread

; 185  : 		AuForceScheduler();	

	call	AuForceScheduler
$LN6@AuSoundWri:

; 186  : 	}
; 187  : 	for (int i = 0; i < SND_BUFF_SZ; i++) { //

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuSoundWri
$LN2@AuSoundWri:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuSoundWri:
	cmp	DWORD PTR i$1[rbp], 4096		; 00001000H
	jge	SHORT $LN3@AuSoundWri

; 188  : 		AuCircBufPut(dsp->buffer, aligned_buf[i]);

	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR aligned_buf$[rbp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rax, QWORD PTR dsp$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z	; AuCircBufPut

; 189  : 	}

	jmp	SHORT $LN2@AuSoundWri
$LN3@AuSoundWri:

; 190  : 
; 191  : 	return SND_BUFF_SZ;

	mov	eax, 4096				; 00001000H
$LN1@AuSoundWri:

; 192  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ENDP	; AuSoundWrite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
_TEXT	SEGMENT
fsys$ = 80
file$ = 88
buffer$ = 96
length$ = 104
?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z PROC	; AuSoundRead, COMDAT

; 167  : size_t AuSoundRead(AuVFSNode* fsys, AuVFSNode* file, uint64_t* buffer, uint32_t length) {

$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 168  : 	if (_Registered_dev == NULL)

	cmp	QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA, 0 ; _Registered_dev
	jne	SHORT $LN2@AuSoundRea

; 169  : 		return -1;

	mov	rax, -1
	jmp	SHORT $LN1@AuSoundRea
$LN2@AuSoundRea:

; 170  : 	return 0;

	xor	eax, eax
$LN1@AuSoundRea:

; 171  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ENDP	; AuSoundRead
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z
_TEXT	SEGMENT
dsp$1 = 0
id$ = 96
?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z PROC		; AuSoundGetDSP, COMDAT

; 109  : AuDSP* AuSoundGetDSP(uint16_t id) {

$LN7:
	mov	WORD PTR [rsp+8], cx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 110  : 	for (AuDSP* dsp = dsp_first; dsp != NULL; dsp = dsp->next) {

	mov	rax, QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA ; dsp_first
	mov	QWORD PTR dsp$1[rbp], rax
	jmp	SHORT $LN4@AuSoundGet
$LN2@AuSoundGet:
	mov	rax, QWORD PTR dsp$1[rbp]
	mov	rax, QWORD PTR [rax+27]
	mov	QWORD PTR dsp$1[rbp], rax
$LN4@AuSoundGet:
	cmp	QWORD PTR dsp$1[rbp], 0
	je	SHORT $LN3@AuSoundGet

; 111  : 		if (dsp->_dsp_id == id)

	mov	rax, QWORD PTR dsp$1[rbp]
	movzx	eax, WORD PTR [rax+8]
	movzx	ecx, WORD PTR id$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN5@AuSoundGet

; 112  : 			return dsp;

	mov	rax, QWORD PTR dsp$1[rbp]
	jmp	SHORT $LN1@AuSoundGet
$LN5@AuSoundGet:

; 113  : 	}

	jmp	SHORT $LN2@AuSoundGet
$LN3@AuSoundGet:

; 114  : 
; 115  : 	return NULL;

	xor	eax, eax
$LN1@AuSoundGet:

; 116  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z ENDP		; AuSoundGetDSP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z
_TEXT	SEGMENT
dsp$ = 80
?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z PROC		; AuRemoveDSP, COMDAT

; 90   : void AuRemoveDSP(AuDSP *dsp) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 91   : 	if (dsp_first == NULL)

	cmp	QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA, 0 ; dsp_first
	jne	SHORT $LN2@AuRemoveDS

; 92   : 		return;

	jmp	SHORT $LN1@AuRemoveDS
$LN2@AuRemoveDS:

; 93   : 
; 94   : 	if (dsp == dsp_first) {

	mov	rax, QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA ; dsp_first
	cmp	QWORD PTR dsp$[rbp], rax
	jne	SHORT $LN3@AuRemoveDS

; 95   : 		dsp_first = dsp_first->next;

	mov	rax, QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA ; dsp_first
	mov	rax, QWORD PTR [rax+27]
	mov	QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA, rax ; dsp_first

; 96   : 	}

	jmp	SHORT $LN4@AuRemoveDS
$LN3@AuRemoveDS:

; 97   : 	else {
; 98   : 		dsp->prev->next = dsp->next;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rax, QWORD PTR [rax+35]
	mov	rcx, QWORD PTR dsp$[rbp]
	mov	rcx, QWORD PTR [rcx+27]
	mov	QWORD PTR [rax+27], rcx
$LN4@AuRemoveDS:

; 99   : 	}
; 100  : 
; 101  : 	if (dsp == dsp_last) {

	mov	rax, QWORD PTR ?dsp_last@@3PEAU__au_dsp__@@EA ; dsp_last
	cmp	QWORD PTR dsp$[rbp], rax
	jne	SHORT $LN5@AuRemoveDS

; 102  : 		dsp_last = dsp->prev;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rax, QWORD PTR [rax+35]
	mov	QWORD PTR ?dsp_last@@3PEAU__au_dsp__@@EA, rax ; dsp_last

; 103  : 	}

	jmp	SHORT $LN6@AuRemoveDS
$LN5@AuRemoveDS:

; 104  : 	else {
; 105  : 		dsp->next->prev = dsp->prev;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rax, QWORD PTR [rax+27]
	mov	rcx, QWORD PTR dsp$[rbp]
	mov	rcx, QWORD PTR [rcx+35]
	mov	QWORD PTR [rax+35], rcx
$LN6@AuRemoveDS:
$LN1@AuRemoveDS:

; 106  : 	}
; 107  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z ENDP		; AuRemoveDSP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z
_TEXT	SEGMENT
dsp$ = 80
?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z PROC		; AuSoundAddDSP, COMDAT

; 72   : void AuSoundAddDSP(AuDSP *dsp) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 	dsp->next = NULL;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	QWORD PTR [rax+27], 0

; 74   : 	dsp->prev = NULL;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	QWORD PTR [rax+35], 0

; 75   : 	if (dsp_first == NULL) {

	cmp	QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA, 0 ; dsp_first
	jne	SHORT $LN2@AuSoundAdd

; 76   : 		dsp_first = dsp;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA, rax ; dsp_first

; 77   : 		dsp_last = dsp;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	QWORD PTR ?dsp_last@@3PEAU__au_dsp__@@EA, rax ; dsp_last

; 78   : 	}

	jmp	SHORT $LN3@AuSoundAdd
$LN2@AuSoundAdd:

; 79   : 	else {
; 80   : 		dsp_last->next = dsp;

	mov	rax, QWORD PTR ?dsp_last@@3PEAU__au_dsp__@@EA ; dsp_last
	mov	rcx, QWORD PTR dsp$[rbp]
	mov	QWORD PTR [rax+27], rcx

; 81   : 		dsp->prev = dsp_last;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rcx, QWORD PTR ?dsp_last@@3PEAU__au_dsp__@@EA ; dsp_last
	mov	QWORD PTR [rax+35], rcx

; 82   : 		dsp_last = dsp;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	QWORD PTR ?dsp_last@@3PEAU__au_dsp__@@EA, rax ; dsp_last
$LN3@AuSoundAdd:

; 83   : 	}
; 84   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z ENDP		; AuSoundAddDSP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundStop@@YAXXZ
_TEXT	SEGMENT
?AuSoundStop@@YAXXZ PROC				; AuSoundStop, COMDAT

; 217  : void AuSoundStop() {

$LN4:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 218  : 	if (_Registered_dev == NULL)

	cmp	QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA, 0 ; _Registered_dev
	jne	SHORT $LN2@AuSoundSto

; 219  : 		return;

	jmp	SHORT $LN1@AuSoundSto
$LN2@AuSoundSto:

; 220  : 	_Registered_dev->stop_output();

	mov	rax, QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA ; _Registered_dev
	call	QWORD PTR [rax+48]
$LN1@AuSoundSto:

; 221  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuSoundStop@@YAXXZ ENDP				; AuSoundStop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundStart@@YAXXZ
_TEXT	SEGMENT
?AuSoundStart@@YAXXZ PROC				; AuSoundStart, COMDAT

; 208  : void AuSoundStart() {

$LN4:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 209  : 	if (_Registered_dev == NULL)

	cmp	QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA, 0 ; _Registered_dev
	jne	SHORT $LN2@AuSoundSta

; 210  : 		return;

	jmp	SHORT $LN1@AuSoundSta
$LN2@AuSoundSta:

; 211  : 	_Registered_dev->start_output();

	mov	rax, QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA ; _Registered_dev
	call	QWORD PTR [rax+56]
$LN1@AuSoundSta:

; 212  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuSoundStart@@YAXXZ ENDP				; AuSoundStart
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT AuSoundRemoveDSP
_TEXT	SEGMENT
dsp_$ = 0
id$ = 96
AuSoundRemoveDSP PROC					; COMDAT

; 305  : void AuSoundRemoveDSP(uint16_t id) {

$LN4:
	mov	WORD PTR [rsp+8], cx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 306  : 	AuDSP* dsp_ = AuSoundGetDSP(id);

	movzx	ecx, WORD PTR id$[rbp]
	call	?AuSoundGetDSP@@YAPEAU__au_dsp__@@G@Z	; AuSoundGetDSP
	mov	QWORD PTR dsp_$[rbp], rax

; 307  : 	if (dsp_) {

	cmp	QWORD PTR dsp_$[rbp], 0
	je	SHORT $LN2@AuSoundRem

; 308  : 		AuPmmngrFree((void*)V2P((size_t)dsp_->buffer->buffer));

	mov	rax, QWORD PTR dsp_$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rax]
	call	V2P
	mov	rcx, rax
	call	AuPmmngrFree

; 309  : 		AuCircBufFree(dsp_->buffer);

	mov	rax, QWORD PTR dsp_$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?AuCircBufFree@@YAXPEAU_circ_buf_@@@Z	; AuCircBufFree

; 310  : 		AuRemoveDSP(dsp_);

	mov	rcx, QWORD PTR dsp_$[rbp]
	call	?AuRemoveDSP@@YAXPEAU__au_dsp__@@@Z	; AuRemoveDSP

; 311  : 		kfree(dsp_);

	mov	rcx, QWORD PTR dsp_$[rbp]
	call	kfree
$LN2@AuSoundRem:

; 312  : 	}
; 313  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
AuSoundRemoveDSP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT AuSoundGetBlock
_TEXT	SEGMENT
hw_buffer$ = 0
i$1 = 8
dsp$2 = 16
mixing_zone$3 = 24
i$4 = 32
data_16$5 = 40
i$6 = 48
i$7 = 52
dsp$8 = 56
buffer$ = 144
AuSoundGetBlock PROC					; COMDAT

; 123  : void AuSoundGetBlock(uint64_t *buffer) {

$LN25:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 160				; 000000a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 124  : 
; 125  : 	if (dsp_first == NULL)

	cmp	QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA, 0 ; dsp_first
	jne	SHORT $LN20@AuSoundGet

; 126  : 		return;

	jmp	$LN1@AuSoundGet
$LN20@AuSoundGet:

; 127  : 	
; 128  : 	if (mixbuf == NULL)

	cmp	QWORD PTR ?mixbuf@@3PEAEEA, 0		; mixbuf
	jne	SHORT $LN21@AuSoundGet

; 129  : 		return;

	jmp	$LN1@AuSoundGet
$LN21@AuSoundGet:

; 130  : 
; 131  : 	int16_t* hw_buffer = (int16_t*)buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	mov	QWORD PTR hw_buffer$[rbp], rax

; 132  : 
; 133  : 	for (int i = 0; i < SND_BUFF_SZ / sizeof(int16_t); i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuSoundGet
$LN2@AuSoundGet:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuSoundGet:
	movsxd	rax, DWORD PTR i$1[rbp]
	cmp	rax, 2048				; 00000800H
	jae	SHORT $LN3@AuSoundGet

; 134  : 		hw_buffer[i] = 0;

	movsxd	rax, DWORD PTR i$1[rbp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR hw_buffer$[rbp]
	mov	WORD PTR [rdx+rax*2], cx
	jmp	SHORT $LN2@AuSoundGet
$LN3@AuSoundGet:

; 135  : 	
; 136  : 	for (AuDSP* dsp = dsp_first; dsp != NULL; dsp = dsp->next) {

	mov	rax, QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA ; dsp_first
	mov	QWORD PTR dsp$2[rbp], rax
	jmp	SHORT $LN7@AuSoundGet
$LN5@AuSoundGet:
	mov	rax, QWORD PTR dsp$2[rbp]
	mov	rax, QWORD PTR [rax+27]
	mov	QWORD PTR dsp$2[rbp], rax
$LN7@AuSoundGet:
	cmp	QWORD PTR dsp$2[rbp], 0
	je	$LN6@AuSoundGet

; 137  : 		uint8_t* mixing_zone = mixbuf;

	mov	rax, QWORD PTR ?mixbuf@@3PEAEEA		; mixbuf
	mov	QWORD PTR mixing_zone$3[rbp], rax

; 138  : 		memset(mixing_zone, 0, SND_BUFF_SZ);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR mixing_zone$3[rbp]
	call	memset

; 139  : 		for (int i = 0; i < SND_BUFF_SZ; i++){

	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN10@AuSoundGet
$LN8@AuSoundGet:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN10@AuSoundGet:
	cmp	DWORD PTR i$4[rbp], 4096		; 00001000H
	jge	SHORT $LN9@AuSoundGet

; 140  : 			AuCircBufGet(dsp->buffer, mixing_zone);

	mov	rdx, QWORD PTR mixing_zone$3[rbp]
	mov	rax, QWORD PTR dsp$2[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z ; AuCircBufGet

; 141  : 			mixing_zone++;

	mov	rax, QWORD PTR mixing_zone$3[rbp]
	inc	rax
	mov	QWORD PTR mixing_zone$3[rbp], rax

; 142  : 		}

	jmp	SHORT $LN8@AuSoundGet
$LN9@AuSoundGet:

; 143  : 
; 144  : 		int16_t *data_16 = (int16_t*)mixbuf;

	mov	rax, QWORD PTR ?mixbuf@@3PEAEEA		; mixbuf
	mov	QWORD PTR data_16$5[rbp], rax

; 145  : 
; 146  : 		for (int i = 0; i < SND_BUFF_SZ / sizeof(int16_t); i++)

	mov	DWORD PTR i$6[rbp], 0
	jmp	SHORT $LN13@AuSoundGet
$LN11@AuSoundGet:
	mov	eax, DWORD PTR i$6[rbp]
	inc	eax
	mov	DWORD PTR i$6[rbp], eax
$LN13@AuSoundGet:
	movsxd	rax, DWORD PTR i$6[rbp]
	cmp	rax, 2048				; 00000800H
	jae	SHORT $LN12@AuSoundGet

; 147  : 			data_16[i] /= 2;

	movsxd	rax, DWORD PTR i$6[rbp]
	mov	rcx, QWORD PTR data_16$5[rbp]
	movsx	eax, WORD PTR [rcx+rax*2]
	cdq
	sub	eax, edx
	sar	eax, 1
	movsxd	rcx, DWORD PTR i$6[rbp]
	mov	rdx, QWORD PTR data_16$5[rbp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN11@AuSoundGet
$LN12@AuSoundGet:

; 148  : 
; 149  : 		/* experiments for stereo panning and gain control over
; 150  : 		 * each channel */
; 151  : 		for (int i = 0; i < SND_BUFF_SZ / sizeof(int16_t); i++){

	mov	DWORD PTR i$7[rbp], 0
	jmp	SHORT $LN16@AuSoundGet
$LN14@AuSoundGet:
	mov	eax, DWORD PTR i$7[rbp]
	inc	eax
	mov	DWORD PTR i$7[rbp], eax
$LN16@AuSoundGet:
	movsxd	rax, DWORD PTR i$7[rbp]
	cmp	rax, 2048				; 00000800H
	jae	SHORT $LN15@AuSoundGet

; 152  : 			hw_buffer[i] += data_16[i];

	movsxd	rax, DWORD PTR i$7[rbp]
	movsxd	rcx, DWORD PTR i$7[rbp]
	mov	rdx, QWORD PTR data_16$5[rbp]
	movsx	ecx, WORD PTR [rdx+rcx*2]
	mov	rdx, QWORD PTR hw_buffer$[rbp]
	movsx	eax, WORD PTR [rdx+rax*2]
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$7[rbp]
	mov	rdx, QWORD PTR hw_buffer$[rbp]
	mov	WORD PTR [rdx+rcx*2], ax

; 153  : 		}

	jmp	SHORT $LN14@AuSoundGet
$LN15@AuSoundGet:

; 154  : 	}

	jmp	$LN5@AuSoundGet
$LN6@AuSoundGet:

; 155  : 
; 156  : 	for (AuDSP *dsp = dsp_first; dsp != NULL; dsp = dsp->next) {

	mov	rax, QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA ; dsp_first
	mov	QWORD PTR dsp$8[rbp], rax
	jmp	SHORT $LN19@AuSoundGet
$LN17@AuSoundGet:
	mov	rax, QWORD PTR dsp$8[rbp]
	mov	rax, QWORD PTR [rax+27]
	mov	QWORD PTR dsp$8[rbp], rax
$LN19@AuSoundGet:
	cmp	QWORD PTR dsp$8[rbp], 0
	je	SHORT $LN18@AuSoundGet

; 157  : 		if (dsp->SndThread) {

	mov	rax, QWORD PTR dsp$8[rbp]
	cmp	QWORD PTR [rax+10], 0
	je	SHORT $LN22@AuSoundGet

; 158  : 			if (dsp->SndThread->pendingSigCount > 0)

	mov	rax, QWORD PTR dsp$8[rbp]
	mov	rax, QWORD PTR [rax+10]
	movzx	eax, BYTE PTR [rax+632]
	test	eax, eax
	jle	SHORT $LN23@AuSoundGet

; 159  : 				return;

	jmp	SHORT $LN1@AuSoundGet
$LN23@AuSoundGet:

; 160  : 			AuUnblockThread(dsp->SndThread);

	mov	rax, QWORD PTR dsp$8[rbp]
	mov	rcx, QWORD PTR [rax+10]
	call	AuUnblockThread
$LN22@AuSoundGet:

; 161  : 		}
; 162  : 	}

	jmp	SHORT $LN17@AuSoundGet
$LN18@AuSoundGet:
$LN1@AuSoundGet:

; 163  : 
; 164  : }

	lea	rsp, QWORD PTR [rbp+128]
	pop	rbp
	ret	0
AuSoundGetBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT AuSoundSetCard
_TEXT	SEGMENT
dev$ = 80
AuSoundSetCard PROC					; COMDAT

; 199  : void AuSoundSetCard(AuSound* dev) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 200  : 	if (_Registered_dev)

	cmp	QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA, 0 ; _Registered_dev
	je	SHORT $LN2@AuSoundSet

; 201  : 		return;

	jmp	SHORT $LN1@AuSoundSet
$LN2@AuSoundSet:

; 202  : 	_Registered_dev = dev;

	mov	rax, QWORD PTR dev$[rbp]
	mov	QWORD PTR ?_Registered_dev@@3PEAU_SoundDev_@@EA, rax ; _Registered_dev
$LN1@AuSoundSet:

; 203  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuSoundSetCard ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Sound\sound.cpp
;	COMDAT ?AuSoundInitialise@@YAXXZ
_TEXT	SEGMENT
fsys$ = 0
dsp$ = 8
dsp_$ = 16
buffer$ = 24
?AuSoundInitialise@@YAXXZ PROC				; AuSoundInitialise, COMDAT

; 271  : void AuSoundInitialise() {

$LN3:
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__2B477A22_sound@cpp
	call	__CheckForDebuggerJustMyCode

; 272  : 	AuVFSNode* fsys = AuVFSFind("/dev");

	lea	rcx, OFFSET FLAT:??_C@_04PJHBAHNI@?1dev@
	call	AuVFSFind
	mov	QWORD PTR fsys$[rbp], rax

; 273  : 	AuVFSNode *dsp = (AuVFSNode*)kmalloc(sizeof(AuVFSNode));

	mov	ecx, 178				; 000000b2H
	call	kmalloc
	mov	QWORD PTR dsp$[rbp], rax

; 274  : 	memset(dsp, 0, sizeof(AuVFSNode));

	mov	r8d, 178				; 000000b2H
	xor	edx, edx
	mov	rcx, QWORD PTR dsp$[rbp]
	call	memset

; 275  : 	strcpy(dsp->filename, "sound");

	mov	rax, QWORD PTR dsp$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_05MHNANJII@sound@
	mov	rcx, rax
	call	strcpy

; 276  : 	dsp->flags =  FS_FLAG_DEVICE;

	mov	eax, 8
	mov	rcx, QWORD PTR dsp$[rbp]
	mov	WORD PTR [rcx+61], ax

; 277  : 	dsp->device = fsys;

	mov	rax, QWORD PTR dsp$[rbp]
	mov	rcx, QWORD PTR fsys$[rbp]
	mov	QWORD PTR [rax+64], rcx

; 278  : 	dsp->read = AuSoundRead;

	mov	rax, QWORD PTR dsp$[rbp]
	lea	rcx, OFFSET FLAT:?AuSoundRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuSoundRead
	mov	QWORD PTR [rax+90], rcx

; 279  : 	dsp->write = AuSoundWrite;

	mov	rax, QWORD PTR dsp$[rbp]
	lea	rcx, OFFSET FLAT:?AuSoundWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuSoundWrite
	mov	QWORD PTR [rax+98], rcx

; 280  : 	dsp->iocontrol = AuSoundIOControl;

	mov	rax, QWORD PTR dsp$[rbp]
	lea	rcx, OFFSET FLAT:?AuSoundIOControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z ; AuSoundIOControl
	mov	QWORD PTR [rax+170], rcx

; 281  : 	AuDevFSAddFile(fsys, "/", dsp);

	mov	r8, QWORD PTR dsp$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
	mov	rcx, QWORD PTR fsys$[rbp]
	call	AuDevFSAddFile

; 282  : 
; 283  : 	dsp_first = NULL;

	mov	QWORD PTR ?dsp_first@@3PEAU__au_dsp__@@EA, 0 ; dsp_first

; 284  : 	dsp_last = NULL;

	mov	QWORD PTR ?dsp_last@@3PEAU__au_dsp__@@EA, 0 ; dsp_last

; 285  : 	_audio_started_ = false;

	mov	BYTE PTR ?_audio_started_@@3_NA, 0	; _audio_started_

; 286  : 	_audio_stopped_ = false;

	mov	BYTE PTR ?_audio_stopped_@@3_NA, 0	; _audio_stopped_

; 287  : 	mixbuf = (uint8_t*)P2V((uint64_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	P2V
	mov	QWORD PTR ?mixbuf@@3PEAEEA, rax		; mixbuf

; 288  : 	memset(mixbuf, 0, PAGE_SIZE);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?mixbuf@@3PEAEEA		; mixbuf
	call	memset

; 289  : 
; 290  : 	AuDSP* dsp_ = (AuDSP*)kmalloc(sizeof(AuDSP));

	mov	ecx, 43					; 0000002bH
	call	kmalloc
	mov	QWORD PTR dsp_$[rbp], rax

; 291  : 	memset(dsp_, 0, sizeof(AuDSP));

	mov	r8d, 43					; 0000002bH
	xor	edx, edx
	mov	rcx, QWORD PTR dsp_$[rbp]
	call	memset

; 292  : 	uint8_t* buffer = (uint8_t*)P2V((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	P2V
	mov	QWORD PTR buffer$[rbp], rax

; 293  : 	dsp_->buffer = AuCircBufInitialise(buffer, SND_BUFF_SZ);

	mov	edx, 4096				; 00001000H
	mov	rcx, QWORD PTR buffer$[rbp]
	call	?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z ; AuCircBufInitialise
	mov	rcx, QWORD PTR dsp_$[rbp]
	mov	QWORD PTR [rcx], rax

; 294  : 	dsp_->_dsp_id = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR dsp_$[rbp]
	mov	WORD PTR [rcx+8], ax

; 295  : 	dsp_->SndThread = 0;

	mov	rax, QWORD PTR dsp_$[rbp]
	mov	QWORD PTR [rax+10], 0

; 296  : 	dsp_->sleep_time = 0;

	mov	rax, QWORD PTR dsp_$[rbp]
	mov	QWORD PTR [rax+18], 0

; 297  : 	dsp_->available = false;

	mov	rax, QWORD PTR dsp_$[rbp]
	mov	BYTE PTR [rax+26], 0

; 298  : 	AuSoundAddDSP(dsp_);

	mov	rcx, QWORD PTR dsp_$[rbp]
	call	?AuSoundAddDSP@@YAXPEAU__au_dsp__@@@Z	; AuSoundAddDSP

; 299  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?AuSoundInitialise@@YAXXZ ENDP				; AuSoundInitialise
_TEXT	ENDS
END
