; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	isspace
PUBLIC	isascii
PUBLIC	isupper
PUBLIC	islower
PUBLIC	isalpha
PUBLIC	isdigit
PUBLIC	isxdigit
PUBLIC	isprint
PUBLIC	toupper
PUBLIC	tolower
PUBLIC	toascii
pdata	SEGMENT
$pdata$isspace DD imagerel $LN6
	DD	imagerel $LN6+53
	DD	imagerel $unwind$isspace
$pdata$isascii DD imagerel $LN5
	DD	imagerel $LN5+39
	DD	imagerel $unwind$isascii
$pdata$isupper DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$isupper
$pdata$islower DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$islower
$pdata$isalpha DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$isalpha
$pdata$isdigit DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$isdigit
$pdata$isxdigit DD imagerel $LN8
	DD	imagerel $LN8+74
	DD	imagerel $unwind$isxdigit
$pdata$isprint DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$isprint
$pdata$toupper DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$toupper
$pdata$tolower DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$tolower
pdata	ENDS
xdata	SEGMENT
$unwind$isspace DD 010801H
	DD	02208H
$unwind$isascii DD 010801H
	DD	02208H
$unwind$isupper DD 010801H
	DD	02208H
$unwind$islower DD 010801H
	DD	02208H
$unwind$isalpha DD 010801H
	DD	06208H
$unwind$isdigit DD 010801H
	DD	02208H
$unwind$isxdigit DD 010801H
	DD	02208H
$unwind$isprint DD 010801H
	DD	02208H
$unwind$toupper DD 010801H
	DD	02208H
$unwind$tolower DD 010801H
	DD	02208H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
c$ = 8
toascii	PROC

; 72   : int toascii(int c) {

	mov	DWORD PTR [rsp+8], ecx

; 73   : 	return ((unsigned)(c)& 0x7F);

	mov	eax, DWORD PTR c$[rsp]
	and	eax, 127				; 0000007fH

; 74   : }

	ret	0
toascii	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv66 = 0
c$ = 32
tolower	PROC

; 68   : int tolower(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 69   : 	return ((c)+0x20 * (((c) >= 'A') && ((c) <= 'Z')));

	cmp	DWORD PTR c$[rsp], 65			; 00000041H
	jl	SHORT $LN3@tolower
	cmp	DWORD PTR c$[rsp], 90			; 0000005aH
	jg	SHORT $LN3@tolower
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@tolower
$LN3@tolower:
	mov	DWORD PTR tv66[rsp], 0
$LN4@tolower:
	imul	eax, DWORD PTR tv66[rsp], 32		; 00000020H
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx

; 70   : }

	add	rsp, 24
	ret	0
tolower	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv66 = 0
c$ = 32
toupper	PROC

; 64   : int toupper(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 65   : 	return ((c)-0x20 * (((c) >= 'a') && ((c) <= 'z')));

	cmp	DWORD PTR c$[rsp], 97			; 00000061H
	jl	SHORT $LN3@toupper
	cmp	DWORD PTR c$[rsp], 122			; 0000007aH
	jg	SHORT $LN3@toupper
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@toupper
$LN3@toupper:
	mov	DWORD PTR tv66[rsp], 0
$LN4@toupper:
	imul	eax, DWORD PTR tv66[rsp], 32		; 00000020H
	mov	ecx, DWORD PTR c$[rsp]
	sub	ecx, eax
	mov	eax, ecx

; 66   : }

	add	rsp, 24
	ret	0
toupper	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv66 = 0
c$ = 32
isprint	PROC

; 60   : int isprint(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 61   : 	return ((c) >= ' ' && (c) <= '~');

	cmp	DWORD PTR c$[rsp], 32			; 00000020H
	jl	SHORT $LN3@isprint
	cmp	DWORD PTR c$[rsp], 126			; 0000007eH
	jg	SHORT $LN3@isprint
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@isprint
$LN3@isprint:
	mov	DWORD PTR tv66[rsp], 0
$LN4@isprint:
	mov	eax, DWORD PTR tv66[rsp]

; 62   : }

	add	rsp, 24
	ret	0
isprint	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv70 = 0
c$ = 32
isxdigit PROC

; 56   : int isxdigit(int c) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 57   : 	return ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'));

	cmp	DWORD PTR c$[rsp], 48			; 00000030H
	jl	SHORT $LN3@isxdigit
	cmp	DWORD PTR c$[rsp], 57			; 00000039H
	jle	SHORT $LN5@isxdigit
$LN3@isxdigit:
	cmp	DWORD PTR c$[rsp], 97			; 00000061H
	jl	SHORT $LN4@isxdigit
	cmp	DWORD PTR c$[rsp], 102			; 00000066H
	jle	SHORT $LN5@isxdigit
$LN4@isxdigit:
	cmp	DWORD PTR c$[rsp], 65			; 00000041H
	jl	SHORT $LN6@isxdigit
	cmp	DWORD PTR c$[rsp], 70			; 00000046H
	jle	SHORT $LN5@isxdigit
$LN6@isxdigit:
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN7@isxdigit
$LN5@isxdigit:
	mov	DWORD PTR tv70[rsp], 1
$LN7@isxdigit:
	mov	eax, DWORD PTR tv70[rsp]

; 58   : }

	add	rsp, 24
	ret	0
isxdigit ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv66 = 0
c$ = 32
isdigit	PROC

; 52   : int isdigit(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 53   : 	return ((c) >= '0' && (c) <= '9');

	cmp	DWORD PTR c$[rsp], 48			; 00000030H
	jl	SHORT $LN3@isdigit
	cmp	DWORD PTR c$[rsp], 57			; 00000039H
	jg	SHORT $LN3@isdigit
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@isdigit
$LN3@isdigit:
	mov	DWORD PTR tv66[rsp], 0
$LN4@isdigit:
	mov	eax, DWORD PTR tv66[rsp]

; 54   : }

	add	rsp, 24
	ret	0
isdigit	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv70 = 32
c$ = 64
isalpha	PROC

; 48   : int isalpha(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 49   : 	return (isupper(c) || islower(c));

	mov	ecx, DWORD PTR c$[rsp]
	call	isupper
	test	eax, eax
	jne	SHORT $LN3@isalpha
	mov	ecx, DWORD PTR c$[rsp]
	call	islower
	test	eax, eax
	jne	SHORT $LN3@isalpha
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@isalpha
$LN3@isalpha:
	mov	DWORD PTR tv70[rsp], 1
$LN4@isalpha:
	mov	eax, DWORD PTR tv70[rsp]

; 50   : }

	add	rsp, 56					; 00000038H
	ret	0
isalpha	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv66 = 0
c$ = 32
islower	PROC

; 44   : int islower(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 45   : 	return ((c) >= 'a' && (c) <= 'z');

	cmp	DWORD PTR c$[rsp], 97			; 00000061H
	jl	SHORT $LN3@islower
	cmp	DWORD PTR c$[rsp], 122			; 0000007aH
	jg	SHORT $LN3@islower
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@islower
$LN3@islower:
	mov	DWORD PTR tv66[rsp], 0
$LN4@islower:
	mov	eax, DWORD PTR tv66[rsp]

; 46   : }

	add	rsp, 24
	ret	0
islower	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv66 = 0
c$ = 32
isupper	PROC

; 40   : int isupper(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 41   : 	return ((c) >= 'A' && (c) <= 'Z');

	cmp	DWORD PTR c$[rsp], 65			; 00000041H
	jl	SHORT $LN3@isupper
	cmp	DWORD PTR c$[rsp], 90			; 0000005aH
	jg	SHORT $LN3@isupper
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@isupper
$LN3@isupper:
	mov	DWORD PTR tv66[rsp], 0
$LN4@isupper:
	mov	eax, DWORD PTR tv66[rsp]

; 42   : }

	add	rsp, 24
	ret	0
isupper	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv65 = 0
c$ = 32
isascii	PROC

; 36   : int isascii(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 37   : 	return (c <= 0x7f);

	cmp	DWORD PTR c$[rsp], 127			; 0000007fH
	jg	SHORT $LN3@isascii
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@isascii
$LN3@isascii:
	mov	DWORD PTR tv65[rsp], 0
$LN4@isascii:
	mov	eax, DWORD PTR tv65[rsp]

; 38   : }

	add	rsp, 24
	ret	0
isascii	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\ctype.cpp
_TEXT	SEGMENT
tv67 = 0
c$ = 32
isspace	PROC

; 32   : int isspace(int c) {

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 33   : 	return ((c) == ' ' || ((c) >= '\t' && (c) <= '\r'));

	cmp	DWORD PTR c$[rsp], 32			; 00000020H
	je	SHORT $LN4@isspace
	cmp	DWORD PTR c$[rsp], 9
	jl	SHORT $LN3@isspace
	cmp	DWORD PTR c$[rsp], 13
	jle	SHORT $LN4@isspace
$LN3@isspace:
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN5@isspace
$LN4@isspace:
	mov	DWORD PTR tv67[rsp], 1
$LN5@isspace:
	mov	eax, DWORD PTR tv67[rsp]

; 34   : }

	add	rsp, 24
	ret	0
isspace	ENDP
_TEXT	ENDS
END
