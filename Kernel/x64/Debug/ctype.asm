; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__0237282B_ctype@cpp DB 01H
msvcjmc	ENDS
PUBLIC	isspace
PUBLIC	isascii
PUBLIC	isupper
PUBLIC	islower
PUBLIC	isalpha
PUBLIC	isdigit
PUBLIC	isxdigit
PUBLIC	isprint
PUBLIC	toupper
PUBLIC	tolower
PUBLIC	toascii
PUBLIC	__JustMyCode_Default
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$isspace DD imagerel $LN6
	DD	imagerel $LN6+69
	DD	imagerel $unwind$isspace
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$isascii DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$isascii
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$isupper DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$isupper
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$islower DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$islower
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$isalpha DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$isalpha
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$isdigit DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$isdigit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$isxdigit DD imagerel $LN8
	DD	imagerel $LN8+87
	DD	imagerel $unwind$isxdigit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$isprint DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$isprint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$toupper DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$toupper
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tolower DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$tolower
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$toascii DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$toascii
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$toascii DD 025030e01H
	DD	0b209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tolower DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$toupper DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isprint DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isxdigit DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isdigit DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isalpha DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$islower DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isupper DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isascii DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isspace DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT toascii
_TEXT	SEGMENT
c$ = 80
toascii	PROC						; COMDAT

; 72   : int toascii(int c) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 	return ((unsigned)(c)& 0x7F);

	mov	eax, DWORD PTR c$[rbp]
	and	eax, 127				; 0000007fH

; 74   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
toascii	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT tolower
_TEXT	SEGMENT
tv66 = 64
c$ = 96
tolower	PROC						; COMDAT

; 68   : int tolower(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 69   : 	return ((c)+0x20 * (((c) >= 'A') && ((c) <= 'Z')));

	cmp	DWORD PTR c$[rbp], 65			; 00000041H
	jl	SHORT $LN3@tolower
	cmp	DWORD PTR c$[rbp], 90			; 0000005aH
	jg	SHORT $LN3@tolower
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@tolower
$LN3@tolower:
	mov	DWORD PTR tv66[rbp], 0
$LN4@tolower:
	imul	eax, DWORD PTR tv66[rbp], 32		; 00000020H
	mov	ecx, DWORD PTR c$[rbp]
	add	ecx, eax
	mov	eax, ecx

; 70   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
tolower	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT toupper
_TEXT	SEGMENT
tv66 = 64
c$ = 96
toupper	PROC						; COMDAT

; 64   : int toupper(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 65   : 	return ((c)-0x20 * (((c) >= 'a') && ((c) <= 'z')));

	cmp	DWORD PTR c$[rbp], 97			; 00000061H
	jl	SHORT $LN3@toupper
	cmp	DWORD PTR c$[rbp], 122			; 0000007aH
	jg	SHORT $LN3@toupper
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@toupper
$LN3@toupper:
	mov	DWORD PTR tv66[rbp], 0
$LN4@toupper:
	imul	eax, DWORD PTR tv66[rbp], 32		; 00000020H
	mov	ecx, DWORD PTR c$[rbp]
	sub	ecx, eax
	mov	eax, ecx

; 66   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
toupper	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT isprint
_TEXT	SEGMENT
tv66 = 64
c$ = 96
isprint	PROC						; COMDAT

; 60   : int isprint(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 61   : 	return ((c) >= ' ' && (c) <= '~');

	cmp	DWORD PTR c$[rbp], 32			; 00000020H
	jl	SHORT $LN3@isprint
	cmp	DWORD PTR c$[rbp], 126			; 0000007eH
	jg	SHORT $LN3@isprint
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@isprint
$LN3@isprint:
	mov	DWORD PTR tv66[rbp], 0
$LN4@isprint:
	mov	eax, DWORD PTR tv66[rbp]

; 62   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
isprint	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT isxdigit
_TEXT	SEGMENT
tv70 = 64
c$ = 96
isxdigit PROC						; COMDAT

; 56   : int isxdigit(int c) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 57   : 	return ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'));

	cmp	DWORD PTR c$[rbp], 48			; 00000030H
	jl	SHORT $LN3@isxdigit
	cmp	DWORD PTR c$[rbp], 57			; 00000039H
	jle	SHORT $LN5@isxdigit
$LN3@isxdigit:
	cmp	DWORD PTR c$[rbp], 97			; 00000061H
	jl	SHORT $LN4@isxdigit
	cmp	DWORD PTR c$[rbp], 102			; 00000066H
	jle	SHORT $LN5@isxdigit
$LN4@isxdigit:
	cmp	DWORD PTR c$[rbp], 65			; 00000041H
	jl	SHORT $LN6@isxdigit
	cmp	DWORD PTR c$[rbp], 70			; 00000046H
	jle	SHORT $LN5@isxdigit
$LN6@isxdigit:
	mov	DWORD PTR tv70[rbp], 0
	jmp	SHORT $LN7@isxdigit
$LN5@isxdigit:
	mov	DWORD PTR tv70[rbp], 1
$LN7@isxdigit:
	mov	eax, DWORD PTR tv70[rbp]

; 58   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
isxdigit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT isdigit
_TEXT	SEGMENT
tv66 = 64
c$ = 96
isdigit	PROC						; COMDAT

; 52   : int isdigit(int c){

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 53   : 	return ((c) >= '0' && (c) <= '9');

	cmp	DWORD PTR c$[rbp], 48			; 00000030H
	jl	SHORT $LN3@isdigit
	cmp	DWORD PTR c$[rbp], 57			; 00000039H
	jg	SHORT $LN3@isdigit
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@isdigit
$LN3@isdigit:
	mov	DWORD PTR tv66[rbp], 0
$LN4@isdigit:
	mov	eax, DWORD PTR tv66[rbp]

; 54   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
isdigit	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT isalpha
_TEXT	SEGMENT
tv70 = 64
c$ = 96
isalpha	PROC						; COMDAT

; 48   : int isalpha(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 49   : 	return (isupper(c) || islower(c));

	mov	ecx, DWORD PTR c$[rbp]
	call	isupper
	test	eax, eax
	jne	SHORT $LN3@isalpha
	mov	ecx, DWORD PTR c$[rbp]
	call	islower
	test	eax, eax
	jne	SHORT $LN3@isalpha
	mov	DWORD PTR tv70[rbp], 0
	jmp	SHORT $LN4@isalpha
$LN3@isalpha:
	mov	DWORD PTR tv70[rbp], 1
$LN4@isalpha:
	mov	eax, DWORD PTR tv70[rbp]

; 50   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
isalpha	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT islower
_TEXT	SEGMENT
tv66 = 64
c$ = 96
islower	PROC						; COMDAT

; 44   : int islower(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 45   : 	return ((c) >= 'a' && (c) <= 'z');

	cmp	DWORD PTR c$[rbp], 97			; 00000061H
	jl	SHORT $LN3@islower
	cmp	DWORD PTR c$[rbp], 122			; 0000007aH
	jg	SHORT $LN3@islower
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@islower
$LN3@islower:
	mov	DWORD PTR tv66[rbp], 0
$LN4@islower:
	mov	eax, DWORD PTR tv66[rbp]

; 46   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
islower	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT isupper
_TEXT	SEGMENT
tv66 = 64
c$ = 96
isupper	PROC						; COMDAT

; 40   : int isupper(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 41   : 	return ((c) >= 'A' && (c) <= 'Z');

	cmp	DWORD PTR c$[rbp], 65			; 00000041H
	jl	SHORT $LN3@isupper
	cmp	DWORD PTR c$[rbp], 90			; 0000005aH
	jg	SHORT $LN3@isupper
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@isupper
$LN3@isupper:
	mov	DWORD PTR tv66[rbp], 0
$LN4@isupper:
	mov	eax, DWORD PTR tv66[rbp]

; 42   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
isupper	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT isascii
_TEXT	SEGMENT
tv65 = 64
c$ = 96
isascii	PROC						; COMDAT

; 36   : int isascii(int c) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 37   : 	return (c <= 0x7f);

	cmp	DWORD PTR c$[rbp], 127			; 0000007fH
	jg	SHORT $LN3@isascii
	mov	DWORD PTR tv65[rbp], 1
	jmp	SHORT $LN4@isascii
$LN3@isascii:
	mov	DWORD PTR tv65[rbp], 0
$LN4@isascii:
	mov	eax, DWORD PTR tv65[rbp]

; 38   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
isascii	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\ctype.cpp
;	COMDAT isspace
_TEXT	SEGMENT
tv67 = 64
c$ = 96
isspace	PROC						; COMDAT

; 32   : int isspace(int c) {

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__0237282B_ctype@cpp
	call	__CheckForDebuggerJustMyCode

; 33   : 	return ((c) == ' ' || ((c) >= '\t' && (c) <= '\r'));

	cmp	DWORD PTR c$[rbp], 32			; 00000020H
	je	SHORT $LN4@isspace
	cmp	DWORD PTR c$[rbp], 9
	jl	SHORT $LN3@isspace
	cmp	DWORD PTR c$[rbp], 13
	jle	SHORT $LN4@isspace
$LN3@isspace:
	mov	DWORD PTR tv67[rbp], 0
	jmp	SHORT $LN5@isspace
$LN4@isspace:
	mov	DWORD PTR tv67[rbp], 1
$LN5@isspace:
	mov	eax, DWORD PTR tv67[rbp]

; 34   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
isspace	ENDP
_TEXT	ENDS
END
