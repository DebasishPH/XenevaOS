; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	AuStackCreate
PUBLIC	AuStackPush
PUBLIC	AuStackPop
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	memset:PROC
pdata	SEGMENT
$pdata$AuStackCreate DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$AuStackCreate
$pdata$AuStackPush DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$AuStackPush
$pdata$AuStackPop DD imagerel $LN4
	DD	imagerel $LN4+130
	DD	imagerel $unwind$AuStackPop
pdata	ENDS
xdata	SEGMENT
$unwind$AuStackCreate DD 010401H
	DD	06204H
$unwind$AuStackPush DD 010e01H
	DD	0620eH
$unwind$AuStackPop DD 010901H
	DD	06209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\stack.cpp
_TEXT	SEGMENT
si$ = 32
data$ = 40
stack$ = 64
AuStackPop PROC

; 61   : void* AuStackPop(AuStack* stack) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 62   : 	void* data = NULL;

	mov	QWORD PTR data$[rsp], 0

; 63   : 	if (!stack->top)

	mov	rax, QWORD PTR stack$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN1@AuStackPop

; 64   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@AuStackPop
$LN1@AuStackPop:

; 65   : 	AuStackItem* si;
; 66   : 	si = stack->top;

	mov	rax, QWORD PTR stack$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR si$[rsp], rax

; 67   : 	stack->top = stack->top->link;

	mov	rax, QWORD PTR stack$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax

; 68   : 	si->link = NULL;

	mov	rax, QWORD PTR si$[rsp]
	mov	QWORD PTR [rax+8], 0

; 69   : 	data = si->data;

	mov	rax, QWORD PTR si$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR data$[rsp], rax

; 70   : 	kfree(si);

	mov	rcx, QWORD PTR si$[rsp]
	call	kfree

; 71   : 	stack->itemCount--;

	mov	rax, QWORD PTR stack$[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	rcx, QWORD PTR stack$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 72   : 	return data;

	mov	rax, QWORD PTR data$[rsp]
$LN2@AuStackPop:

; 73   : }

	add	rsp, 56					; 00000038H
	ret	0
AuStackPop ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\stack.cpp
_TEXT	SEGMENT
newItem$ = 32
stack$ = 64
data$ = 72
AuStackPush PROC

; 49   : void AuStackPush(AuStack *stack, void *data){

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 50   : 	AuStackItem* newItem = (AuStackItem*)kmalloc(sizeof(AuStackItem));

	mov	ecx, 16
	call	kmalloc
	mov	QWORD PTR newItem$[rsp], rax

; 51   : 	newItem->data = data;

	mov	rax, QWORD PTR newItem$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rax], rcx

; 52   : 	newItem->link = stack->top;

	mov	rax, QWORD PTR newItem$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax+8], rcx

; 53   : 	stack->top = newItem;

	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR newItem$[rsp]
	mov	QWORD PTR [rax], rcx

; 54   : 	stack->itemCount += 1;

	mov	rax, QWORD PTR stack$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR stack$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 55   : }

	add	rsp, 56					; 00000038H
	ret	0
AuStackPush ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\stack.cpp
_TEXT	SEGMENT
stack$ = 32
AuStackCreate PROC

; 38   : AuStack* AuStackCreate(){

$LN3:
	sub	rsp, 56					; 00000038H

; 39   : 	AuStack* stack = (AuStack*)kmalloc(sizeof(AuStack));

	mov	ecx, 16
	call	kmalloc
	mov	QWORD PTR stack$[rsp], rax

; 40   : 	memset(stack, 0, sizeof(AuStack));

	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR stack$[rsp]
	call	memset

; 41   : 	return stack;

	mov	rax, QWORD PTR stack$[rsp]

; 42   : }

	add	rsp, 56					; 00000038H
	ret	0
AuStackCreate ENDP
_TEXT	ENDS
END
