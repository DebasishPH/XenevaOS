; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG3908	DB	'Opening file -> %s %x ', 0dH, 0aH, 00H
	ORG $+3
$SG3922	DB	'/', 00H
	ORG $+2
$SG4020	DB	'Closing fs -> %s ', 0dH, 0aH, 00H
	ORG $+4
$SG4066	DB	'dir opening -> %s , %x ', 0dH, 0aH, 00H
CONST	ENDS
PUBLIC	?OpenFile@@YAHPEADH@Z				; OpenFile
PUBLIC	?FileSetOffset@@YAHH_K@Z			; FileSetOffset
PUBLIC	?ReadFile@@YA_KHPEAX_K@Z			; ReadFile
PUBLIC	?WriteFile@@YA_KHPEAX_K@Z			; WriteFile
PUBLIC	?CreateDir@@YAHPEAD@Z				; CreateDir
PUBLIC	?RemoveFile@@YAHPEAD@Z				; RemoveFile
PUBLIC	?CloseFile@@YAHH@Z				; CloseFile
PUBLIC	?FileIoControl@@YAHHHPEAX@Z			; FileIoControl
PUBLIC	?FileStat@@YAHHPEAX@Z				; FileStat
PUBLIC	?OpenDir@@YAHPEAD@Z				; OpenDir
PUBLIC	?ReadDir@@YAHHPEAX@Z				; ReadDir
PUBLIC	?ProcessGetFileDesc@@YAHPEBD@Z			; ProcessGetFileDesc
EXTRN	AuVFSOpen:PROC
EXTRN	AuVFSNodeIOControl:PROC
EXTRN	AuVFSFind:PROC
EXTRN	AuVFSNodeRead:PROC
EXTRN	AuVFSCreateDir:PROC
EXTRN	AuVFSCreateFile:PROC
EXTRN	?AuVFSRemoveFile@@YAHPEAU__VFS_NODE__@@0@Z:PROC	; AuVFSRemoveFile
EXTRN	?AuVFSRemoveDir@@YAHPEAU__VFS_NODE__@@0@Z:PROC	; AuVFSRemoveDir
EXTRN	AuVFSNodeWrite:PROC
EXTRN	AuVFSGetBlockFor:PROC
EXTRN	AuGetCurrentThread:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuPmmngrFree:PROC
EXTRN	P2V:PROC
EXTRN	V2P:PROC
EXTRN	kfree:PROC
EXTRN	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z:PROC ; AuProcessFindThread
EXTRN	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z:PROC ; AuProcessFindSubThread
EXTRN	?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z:PROC ; AuProcessGetFileDesc
EXTRN	strcmp:PROC
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	SeTextOut:PROC
EXTRN	x64_cli:PROC
pdata	SEGMENT
$pdata$?OpenFile@@YAHPEADH@Z DD imagerel $LN12
	DD	imagerel $LN12+291
	DD	imagerel $unwind$?OpenFile@@YAHPEADH@Z
$pdata$?FileSetOffset@@YAHH_K@Z DD imagerel $LN9
	DD	imagerel $LN9+309
	DD	imagerel $unwind$?FileSetOffset@@YAHH_K@Z
$pdata$?ReadFile@@YA_KHPEAX_K@Z DD imagerel $LN17
	DD	imagerel $LN17+477
	DD	imagerel $unwind$?ReadFile@@YA_KHPEAX_K@Z
$pdata$?WriteFile@@YA_KHPEAX_K@Z DD imagerel $LN16
	DD	imagerel $LN16+496
	DD	imagerel $unwind$?WriteFile@@YA_KHPEAX_K@Z
$pdata$?CreateDir@@YAHPEAD@Z DD imagerel $LN9
	DD	imagerel $LN9+182
	DD	imagerel $unwind$?CreateDir@@YAHPEAD@Z
$pdata$?RemoveFile@@YAHPEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+108
	DD	imagerel $unwind$?RemoveFile@@YAHPEAD@Z
$pdata$?CloseFile@@YAHH@Z DD imagerel $LN10
	DD	imagerel $LN10+269
	DD	imagerel $unwind$?CloseFile@@YAHH@Z
$pdata$?FileIoControl@@YAHHHPEAX@Z DD imagerel $LN8
	DD	imagerel $LN8+189
	DD	imagerel $unwind$?FileIoControl@@YAHHHPEAX@Z
$pdata$?FileStat@@YAHHPEAX@Z DD imagerel $LN8
	DD	imagerel $LN8+274
	DD	imagerel $unwind$?FileStat@@YAHHPEAX@Z
$pdata$?OpenDir@@YAHPEAD@Z DD imagerel $LN10
	DD	imagerel $LN10+275
	DD	imagerel $unwind$?OpenDir@@YAHPEAD@Z
$pdata$?ReadDir@@YAHHPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+251
	DD	imagerel $unwind$?ReadDir@@YAHHPEAX@Z
$pdata$?ProcessGetFileDesc@@YAHPEBD@Z DD imagerel $LN11
	DD	imagerel $LN11+193
	DD	imagerel $unwind$?ProcessGetFileDesc@@YAHPEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?OpenFile@@YAHPEADH@Z DD 010d01H
	DD	0a20dH
$unwind$?FileSetOffset@@YAHH_K@Z DD 010d01H
	DD	0a20dH
$unwind$?ReadFile@@YA_KHPEAX_K@Z DD 011201H
	DD	0a212H
$unwind$?WriteFile@@YA_KHPEAX_K@Z DD 011201H
	DD	0c212H
$unwind$?CreateDir@@YAHPEAD@Z DD 010901H
	DD	08209H
$unwind$?RemoveFile@@YAHPEAD@Z DD 010901H
	DD	06209H
$unwind$?CloseFile@@YAHH@Z DD 010801H
	DD	08208H
$unwind$?FileIoControl@@YAHHHPEAX@Z DD 011101H
	DD	08211H
$unwind$?FileStat@@YAHHPEAX@Z DD 010d01H
	DD	0820dH
$unwind$?OpenDir@@YAHPEAD@Z DD 010901H
	DD	0a209H
$unwind$?ReadDir@@YAHHPEAX@Z DD 010d01H
	DD	0a20dH
$unwind$?ProcessGetFileDesc@@YAHPEBD@Z DD 010901H
	DD	08209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
i$1 = 32
currproc$ = 40
thr$ = 48
file$2 = 56
filename$ = 80
?ProcessGetFileDesc@@YAHPEBD@Z PROC			; ProcessGetFileDesc

; 445  : int ProcessGetFileDesc(const char* filename) {

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 446  : 	x64_cli();

	call	x64_cli

; 447  : 	AuThread* thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rsp], rax

; 448  : 	if (!thr)

	cmp	QWORD PTR thr$[rsp], 0
	jne	SHORT $LN8@ProcessGet

; 449  : 		return -1;

	mov	eax, -1
	jmp	$LN9@ProcessGet
$LN8@ProcessGet:

; 450  : 	AuProcess* currproc = AuProcessFindThread(thr);

	mov	rcx, QWORD PTR thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR currproc$[rsp], rax

; 451  : 	if (!currproc){

	cmp	QWORD PTR currproc$[rsp], 0
	jne	SHORT $LN7@ProcessGet

; 452  : 		currproc = AuProcessFindSubThread(thr);

	mov	rcx, QWORD PTR thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR currproc$[rsp], rax

; 453  : 		if (!currproc)

	cmp	QWORD PTR currproc$[rsp], 0
	jne	SHORT $LN6@ProcessGet

; 454  : 			return -1;

	mov	eax, -1
	jmp	SHORT $LN9@ProcessGet
$LN6@ProcessGet:
$LN7@ProcessGet:

; 455  : 	}
; 456  : 	for (int i = 0; i < FILE_DESC_PER_PROCESS; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@ProcessGet
$LN4@ProcessGet:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@ProcessGet:
	cmp	DWORD PTR i$1[rsp], 60			; 0000003cH
	jge	SHORT $LN3@ProcessGet

; 457  : 		AuVFSNode* file = currproc->fds[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR currproc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$2[rsp], rax

; 458  : 		if (file) {

	cmp	QWORD PTR file$2[rsp], 0
	je	SHORT $LN2@ProcessGet

; 459  : 			if (strcmp(filename, file->filename) == 0) {

	mov	rax, QWORD PTR file$2[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR filename$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN1@ProcessGet

; 460  : 				return i;

	mov	eax, DWORD PTR i$1[rsp]
	jmp	SHORT $LN9@ProcessGet
$LN1@ProcessGet:
$LN2@ProcessGet:

; 461  : 			}
; 462  : 		}
; 463  : 	}

	jmp	SHORT $LN4@ProcessGet
$LN3@ProcessGet:

; 464  : 
; 465  : 	return -1;

	mov	eax, -1
$LN9@ProcessGet:

; 466  : }

	add	rsp, 72					; 00000048H
	ret	0
?ProcessGetFileDesc@@YAHPEBD@Z ENDP			; ProcessGetFileDesc
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
current_proc$ = 32
fsys$ = 40
current_thr$ = 48
dirfile$ = 56
dire_$ = 64
dirfd$ = 96
dirent$ = 104
?ReadDir@@YAHHPEAX@Z PROC				; ReadDir

; 410  : int ReadDir(int dirfd, void* dirent) {

$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 411  : 	x64_cli();

	call	x64_cli

; 412  : 	if (!dirent)

	cmp	QWORD PTR dirent$[rsp], 0
	jne	SHORT $LN8@ReadDir

; 413  : 		return -1;

	mov	eax, -1
	jmp	$LN9@ReadDir
$LN8@ReadDir:

; 414  : 	if (dirfd == -1)

	cmp	DWORD PTR dirfd$[rsp], -1
	jne	SHORT $LN7@ReadDir

; 415  : 		return -1;

	mov	eax, -1
	jmp	$LN9@ReadDir
$LN7@ReadDir:

; 416  : 
; 417  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 418  : 	if (!current_thr){

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN6@ReadDir

; 419  : 		return 0;

	xor	eax, eax
	jmp	$LN9@ReadDir
$LN6@ReadDir:

; 420  : 	}
; 421  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 422  : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN5@ReadDir

; 423  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 424  : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN4@ReadDir

; 425  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN9@ReadDir
$LN4@ReadDir:
$LN5@ReadDir:

; 426  : 	}
; 427  : 
; 428  : 	AuDirectoryEntry* dire_ = (AuDirectoryEntry*)dirent;

	mov	rax, QWORD PTR dirent$[rsp]
	mov	QWORD PTR dire_$[rsp], rax

; 429  : 
; 430  : 	AuVFSNode* dirfile = current_proc->fds[dirfd];

	movsxd	rax, DWORD PTR dirfd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR dirfile$[rsp], rax

; 431  : 	if (!dirfile)

	cmp	QWORD PTR dirfile$[rsp], 0
	jne	SHORT $LN3@ReadDir

; 432  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN9@ReadDir
$LN3@ReadDir:

; 433  : 	AuVFSNode* fsys = (AuVFSNode*)dirfile->device;

	mov	rax, QWORD PTR dirfile$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR fsys$[rsp], rax

; 434  : 	if (!fsys)

	cmp	QWORD PTR fsys$[rsp], 0
	jne	SHORT $LN2@ReadDir

; 435  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN9@ReadDir
$LN2@ReadDir:

; 436  : 	if (fsys->read_dir)

	mov	rax, QWORD PTR fsys$[rsp]
	cmp	QWORD PTR [rax+168], 0
	je	SHORT $LN1@ReadDir

; 437  : 		return fsys->read_dir(fsys, dirfile, dire_);

	mov	r8, QWORD PTR dire_$[rsp]
	mov	rdx, QWORD PTR dirfile$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	mov	rax, QWORD PTR fsys$[rsp]
	call	QWORD PTR [rax+168]
$LN1@ReadDir:
$LN9@ReadDir:

; 438  : }

	add	rsp, 88					; 00000058H
	ret	0
?ReadDir@@YAHHPEAX@Z ENDP				; ReadDir
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
fd$ = 32
current_proc$ = 40
dirfile$ = 48
fsys$ = 56
current_thr$ = 64
filename$ = 96
?OpenDir@@YAHPEAD@Z PROC				; OpenDir

; 373  : int OpenDir(char* filename) {

$LN10:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 374  : 	x64_cli();

	call	x64_cli

; 375  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 376  : 	if (!current_thr){

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN7@OpenDir

; 377  : 		return -1;

	mov	eax, -1
	jmp	$LN8@OpenDir
$LN7@OpenDir:

; 378  : 	}
; 379  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 380  : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN6@OpenDir

; 381  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 382  : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN5@OpenDir

; 383  : 			return -1;

	mov	eax, -1
	jmp	$LN8@OpenDir
$LN5@OpenDir:
$LN6@OpenDir:

; 384  : 	}
; 385  : 
; 386  : 	AuVFSNode *fsys = AuVFSFind(filename);

	mov	rcx, QWORD PTR filename$[rsp]
	call	AuVFSFind
	mov	QWORD PTR fsys$[rsp], rax

; 387  : 	AuVFSNode* dirfile = NULL;

	mov	QWORD PTR dirfile$[rsp], 0

; 388  : 	if (!fsys)

	cmp	QWORD PTR fsys$[rsp], 0
	jne	SHORT $LN4@OpenDir

; 389  : 		return -1;

	mov	eax, -1
	jmp	$LN8@OpenDir
$LN4@OpenDir:

; 390  : 	if (fsys->opendir)

	mov	rax, QWORD PTR fsys$[rsp]
	cmp	QWORD PTR [rax+96], 0
	je	SHORT $LN3@OpenDir

; 391  : 		dirfile = fsys->opendir(fsys, filename);

	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	mov	rax, QWORD PTR fsys$[rsp]
	call	QWORD PTR [rax+96]
	mov	QWORD PTR dirfile$[rsp], rax
$LN3@OpenDir:

; 392  : 
; 393  : 	if (!dirfile)

	cmp	QWORD PTR dirfile$[rsp], 0
	jne	SHORT $LN2@OpenDir

; 394  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN8@OpenDir
$LN2@OpenDir:

; 395  : 
; 396  : 	int fd = AuProcessGetFileDesc(current_proc);

	mov	rcx, QWORD PTR current_proc$[rsp]
	call	?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z ; AuProcessGetFileDesc
	mov	DWORD PTR fd$[rsp], eax

; 397  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN1@OpenDir

; 398  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN8@OpenDir
$LN1@OpenDir:

; 399  : 
; 400  : 	current_proc->fds[fd] = dirfile;

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rdx, QWORD PTR dirfile$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], rdx

; 401  : 	SeTextOut("dir opening -> %s , %x \r\n", dirfile->filename, dirfile);

	mov	rax, QWORD PTR dirfile$[rsp]
	mov	r8, QWORD PTR dirfile$[rsp]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG4066
	call	SeTextOut

; 402  : 	return fd;

	mov	eax, DWORD PTR fd$[rsp]
$LN8@OpenDir:

; 403  : }

	add	rsp, 88					; 00000058H
	ret	0
?OpenDir@@YAHPEAD@Z ENDP				; OpenDir
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
status$ = 32
file$ = 40
current_proc$ = 48
current_thr$ = 56
fd$ = 80
buf$ = 88
?FileStat@@YAHHPEAX@Z PROC				; FileStat

; 340  : int FileStat(int fd, void* buf) {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 341  : 	x64_cli();

	call	x64_cli

; 342  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN5@FileStat

; 343  : 		return -1;

	mov	eax, -1
	jmp	$LN6@FileStat
$LN5@FileStat:

; 344  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 345  : 	if (!current_thr){

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN4@FileStat

; 346  : 		return 0;

	xor	eax, eax
	jmp	$LN6@FileStat
$LN4@FileStat:

; 347  : 	}
; 348  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 349  : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN3@FileStat

; 350  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 351  : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN2@FileStat

; 352  : 			return 0;

	xor	eax, eax
	jmp	$LN6@FileStat
$LN2@FileStat:
$LN3@FileStat:

; 353  : 	}
; 354  : 	AuVFSNode* file = current_proc->fds[fd];

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$[rsp], rax

; 355  : 	if (!file)

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN1@FileStat

; 356  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN6@FileStat
$LN1@FileStat:

; 357  : 
; 358  : 	AuFileStatus *status = (AuFileStatus*)buf;

	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR status$[rsp], rax

; 359  : 	status->current_block = file->current;

	mov	rax, QWORD PTR status$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	mov	DWORD PTR [rax+9], ecx

; 360  : 	status->size = file->size;

	mov	rax, QWORD PTR file$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR status$[rsp]
	mov	QWORD PTR [rcx+1], rax

; 361  : 	status->filemode = file->flags;

	mov	rax, QWORD PTR status$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	movzx	ecx, BYTE PTR [rcx+64]
	mov	BYTE PTR [rax], cl

; 362  : 	status->eof = file->eof;

	mov	rax, QWORD PTR status$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	movzx	ecx, BYTE PTR [rcx+36]
	mov	BYTE PTR [rax+29], cl

; 363  : 	status->start_block = file->first_block;

	mov	rax, QWORD PTR status$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax+13], ecx

; 364  : 	status->user_id = 0;

	mov	rax, QWORD PTR status$[rsp]
	mov	DWORD PTR [rax+17], 0

; 365  : 	status->group_id = 0;

	mov	rax, QWORD PTR status$[rsp]
	mov	DWORD PTR [rax+21], 0

; 366  : 	return 0;

	xor	eax, eax
$LN6@FileStat:

; 367  : }

	add	rsp, 72					; 00000048H
	ret	0
?FileStat@@YAHHPEAX@Z ENDP				; FileStat
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
ret$ = 32
current_proc$ = 40
current_thr$ = 48
file$ = 56
fd$ = 80
code$ = 88
arg$ = 96
?FileIoControl@@YAHHHPEAX@Z PROC			; FileIoControl

; 311  : int FileIoControl(int fd, int code, void* arg) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 312  : 	x64_cli();

	call	x64_cli

; 313  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN5@FileIoCont

; 314  : 		return -1;

	mov	eax, -1
	jmp	$LN6@FileIoCont
$LN5@FileIoCont:

; 315  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 316  : 	if (!current_thr)

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN4@FileIoCont

; 317  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN6@FileIoCont
$LN4@FileIoCont:

; 318  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 319  : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN3@FileIoCont

; 320  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 321  : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN2@FileIoCont

; 322  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN6@FileIoCont
$LN2@FileIoCont:
$LN3@FileIoCont:

; 323  : 	}
; 324  : 	AuVFSNode* file = current_proc->fds[fd];

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$[rsp], rax

; 325  : 
; 326  : 	if (!file)

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN1@FileIoCont

; 327  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN6@FileIoCont
$LN1@FileIoCont:

; 328  : 
; 329  : 	int ret = 0;

	mov	DWORD PTR ret$[rsp], 0

; 330  : 	ret = AuVFSNodeIOControl(file, code, arg);

	mov	r8, QWORD PTR arg$[rsp]
	mov	edx, DWORD PTR code$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	AuVFSNodeIOControl
	mov	DWORD PTR ret$[rsp], eax

; 331  : 	return ret;

	mov	eax, DWORD PTR ret$[rsp]
$LN6@FileIoCont:

; 332  : }

	add	rsp, 72					; 00000048H
	ret	0
?FileIoControl@@YAHHHPEAX@Z ENDP			; FileIoControl
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
file$ = 32
current_proc$ = 40
current_thr$ = 48
fd$ = 80
?CloseFile@@YAHH@Z PROC					; CloseFile

; 273  : int CloseFile(int fd) {

$LN10:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 274  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN7@CloseFile

; 275  : 		return 0;

	xor	eax, eax
	jmp	$LN8@CloseFile
$LN7@CloseFile:

; 276  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 277  : 	if (!current_thr)

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN6@CloseFile

; 278  : 		return 0;

	xor	eax, eax
	jmp	$LN8@CloseFile
$LN6@CloseFile:

; 279  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 280  : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN5@CloseFile

; 281  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 282  : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN4@CloseFile

; 283  : 			return 0;

	xor	eax, eax
	jmp	$LN8@CloseFile
$LN4@CloseFile:
$LN5@CloseFile:

; 284  : 	}
; 285  : 
; 286  : 	AuVFSNode* file = current_proc->fds[fd];

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$[rsp], rax

; 287  : 	if (file->flags & FS_FLAG_FILE_SYSTEM){

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN3@CloseFile

; 288  : 		SeTextOut("Closing fs -> %s \r\n", file->filename);

	mov	rax, QWORD PTR file$[rsp]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG4020
	call	SeTextOut

; 289  : 		current_proc->fds[fd] = 0;

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], 0

; 290  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN8@CloseFile
$LN3@CloseFile:

; 291  : 	}
; 292  : 	if (file->flags & FS_FLAG_GENERAL){

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN2@CloseFile

; 293  : 		kfree(file);

	mov	rcx, QWORD PTR file$[rsp]
	call	kfree
$LN2@CloseFile:

; 294  : 	}
; 295  : 	
; 296  : 
; 297  : 	if (file->flags & FS_FLAG_DIRECTORY){

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN1@CloseFile

; 298  : 		kfree(file);

	mov	rcx, QWORD PTR file$[rsp]
	call	kfree
$LN1@CloseFile:

; 299  : 	}
; 300  : 
; 301  : 	current_proc->fds[fd] = 0;

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], 0

; 302  : 	return 0;

	xor	eax, eax
$LN8@CloseFile:

; 303  : }

	add	rsp, 72					; 00000048H
	ret	0
?CloseFile@@YAHH@Z ENDP					; CloseFile
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
dir$ = 32
fsys$ = 40
pathname$ = 64
?RemoveFile@@YAHPEAD@Z PROC				; RemoveFile

; 258  : int RemoveFile(char* pathname) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 259  : 	AuVFSNode* dir = AuVFSOpen(pathname);

	mov	rcx, QWORD PTR pathname$[rsp]
	call	AuVFSOpen
	mov	QWORD PTR dir$[rsp], rax

; 260  : 	if (!dir)

	cmp	QWORD PTR dir$[rsp], 0
	jne	SHORT $LN3@RemoveFile

; 261  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN4@RemoveFile
$LN3@RemoveFile:

; 262  : 	AuVFSNode* fsys = (AuVFSNode*)dir->device;

	mov	rax, QWORD PTR dir$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR fsys$[rsp], rax

; 263  : 	if (fsys->flags & FS_FLAG_DIRECTORY)

	mov	rax, QWORD PTR fsys$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN2@RemoveFile

; 264  : 		return AuVFSRemoveDir(fsys, dir);

	mov	rdx, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	?AuVFSRemoveDir@@YAHPEAU__VFS_NODE__@@0@Z ; AuVFSRemoveDir
	jmp	SHORT $LN4@RemoveFile

; 265  : 	else

	jmp	SHORT $LN1@RemoveFile
$LN2@RemoveFile:

; 266  : 		return AuVFSRemoveFile(fsys, dir);

	mov	rdx, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	?AuVFSRemoveFile@@YAHPEAU__VFS_NODE__@@0@Z ; AuVFSRemoveFile
$LN1@RemoveFile:
$LN4@RemoveFile:

; 267  : }

	add	rsp, 56					; 00000038H
	ret	0
?RemoveFile@@YAHPEAD@Z ENDP				; RemoveFile
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
current_thr$ = 32
current_proc$ = 40
dirfile$ = 48
fsys$ = 56
filename$ = 80
?CreateDir@@YAHPEAD@Z PROC				; CreateDir

; 224  : int CreateDir(char* filename) {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 225  : 	x64_cli();

	call	x64_cli

; 226  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 227  : 	if (!current_thr){

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN6@CreateDir

; 228  : 		return 0;

	xor	eax, eax
	jmp	$LN7@CreateDir
$LN6@CreateDir:

; 229  : 	}
; 230  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 231  : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN5@CreateDir

; 232  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 233  : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN4@CreateDir

; 234  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN7@CreateDir
$LN4@CreateDir:
$LN5@CreateDir:

; 235  : 	}
; 236  : 
; 237  : 	AuVFSNode *fsys = AuVFSFind(filename);

	mov	rcx, QWORD PTR filename$[rsp]
	call	AuVFSFind
	mov	QWORD PTR fsys$[rsp], rax

; 238  : 	AuVFSNode* dirfile = NULL;

	mov	QWORD PTR dirfile$[rsp], 0

; 239  : 	if (fsys){

	cmp	QWORD PTR fsys$[rsp], 0
	je	SHORT $LN3@CreateDir

; 240  : 		dirfile = AuVFSCreateDir(fsys, filename);

	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	AuVFSCreateDir
	mov	QWORD PTR dirfile$[rsp], rax

; 241  : 	}
; 242  : 	else {

	jmp	SHORT $LN2@CreateDir
$LN3@CreateDir:

; 243  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN7@CreateDir
$LN2@CreateDir:

; 244  : 	}
; 245  : 
; 246  : 	if (dirfile) {

	cmp	QWORD PTR dirfile$[rsp], 0
	je	SHORT $LN1@CreateDir

; 247  : 		kfree(dirfile);

	mov	rcx, QWORD PTR dirfile$[rsp]
	call	kfree

; 248  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN7@CreateDir
$LN1@CreateDir:

; 249  : 	}
; 250  : 
; 251  : 	return -1;

	mov	eax, -1
$LN7@CreateDir:

; 252  : }

	add	rsp, 72					; 00000048H
	ret	0
?CreateDir@@YAHPEAD@Z ENDP				; CreateDir
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
tv88 = 32
file$ = 40
current_proc$ = 48
buff$1 = 56
current_thr$ = 64
aligned_buffer$ = 72
fsys$ = 80
write_bytes$ = 88
fd$ = 112
buffer$ = 120
length$ = 128
?WriteFile@@YA_KHPEAX_K@Z PROC				; WriteFile

; 174  : size_t WriteFile(int fd, void* buffer, size_t length) {

$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 104				; 00000068H

; 175  : 	x64_cli();

	call	x64_cli

; 176  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN11@WriteFile

; 177  : 		return 0;

	xor	eax, eax
	jmp	$LN12@WriteFile
$LN11@WriteFile:

; 178  : 	if (!buffer)

	cmp	QWORD PTR buffer$[rsp], 0
	jne	SHORT $LN10@WriteFile

; 179  : 		return 0;

	xor	eax, eax
	jmp	$LN12@WriteFile
$LN10@WriteFile:

; 180  : 	if (!length)

	cmp	QWORD PTR length$[rsp], 0
	jne	SHORT $LN9@WriteFile

; 181  : 		return 0;

	xor	eax, eax
	jmp	$LN12@WriteFile
$LN9@WriteFile:

; 182  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 183  : 	if (!current_thr)

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN8@WriteFile

; 184  : 		return 0;

	xor	eax, eax
	jmp	$LN12@WriteFile
$LN8@WriteFile:

; 185  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 186  : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN7@WriteFile

; 187  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 188  : 		if (!current_proc) 

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN6@WriteFile

; 189  : 			return 0;

	xor	eax, eax
	jmp	$LN12@WriteFile
$LN6@WriteFile:
$LN7@WriteFile:

; 190  : 	}
; 191  : 	AuVFSNode* file = current_proc->fds[fd];

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$[rsp], rax

; 192  : 	uint8_t* aligned_buffer = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buffer$[rsp], rax

; 193  : 	if (!file)

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN5@WriteFile

; 194  : 		return 0;

	xor	eax, eax
	jmp	$LN12@WriteFile
$LN5@WriteFile:

; 195  : 	size_t write_bytes = 0;

	mov	QWORD PTR write_bytes$[rsp], 0

; 196  : 	size_t ret_bytes;
; 197  : 	/* every general file will contain its
; 198  : 	* file system node as device */
; 199  : 	AuVFSNode* fsys = (AuVFSNode*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR fsys$[rsp], rax

; 200  : 
; 201  : 	if (file->flags & FS_FLAG_GENERAL && (!file->flags & FS_FLAG_TTY)) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 4
	test	eax, eax
	je	$LN4@WriteFile
	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	test	eax, eax
	jne	SHORT $LN14@WriteFile
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN15@WriteFile
$LN14@WriteFile:
	mov	DWORD PTR tv88[rsp], 0
$LN15@WriteFile:
	mov	eax, DWORD PTR tv88[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN4@WriteFile

; 202  : 		uint64_t* buff = (uint64_t*)P2V((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	P2V
	mov	QWORD PTR buff$1[rsp], rax

; 203  : 		memset(buff, 0, PAGE_SIZE);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR buff$1[rsp]
	call	memset

; 204  : 		memcpy(buff,aligned_buffer, PAGE_SIZE);

	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR aligned_buffer$[rsp]
	mov	rcx, QWORD PTR buff$1[rsp]
	call	memcpy

; 205  : 		AuVFSNodeWrite(fsys, file, buff, length);

	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, QWORD PTR buff$1[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	AuVFSNodeWrite

; 206  : 		AuPmmngrFree((void*)V2P((size_t)buff));

	mov	rcx, QWORD PTR buff$1[rsp]
	call	V2P
	mov	rcx, rax
	call	AuPmmngrFree
$LN4@WriteFile:

; 207  : 	}
; 208  : 
; 209  : 	if (file->flags & FS_FLAG_TTY) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN3@WriteFile

; 210  : 		AuVFSNodeWrite(file, file, (uint64_t*)aligned_buffer, length);

	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, QWORD PTR aligned_buffer$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	AuVFSNodeWrite
$LN3@WriteFile:

; 211  : 	}
; 212  : 
; 213  : 	if (file->flags & FS_FLAG_DEVICE) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN2@WriteFile

; 214  : 		if (file->write) {

	mov	rax, QWORD PTR file$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN1@WriteFile

; 215  : 			file->write(fsys, file, (uint64_t*)buffer, length);

	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, QWORD PTR buffer$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	mov	rax, QWORD PTR file$[rsp]
	call	QWORD PTR [rax+112]
$LN1@WriteFile:
$LN2@WriteFile:
$LN12@WriteFile:

; 216  : 		}
; 217  : 	}
; 218  : }

	add	rsp, 104				; 00000068H
	ret	0
?WriteFile@@YA_KHPEAX_K@Z ENDP				; WriteFile
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
file$ = 32
ret_bytes$ = 40
current_proc$ = 48
current_thr$ = 56
aligned_buffer$ = 64
fsys$ = 72
fd$ = 96
buffer$ = 104
length$ = 112
?ReadFile@@YA_KHPEAX_K@Z PROC				; ReadFile

; 119  : size_t ReadFile(int fd, void* buffer, size_t length) {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 120  : 	x64_cli();

	call	x64_cli

; 121  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN14@ReadFile

; 122  : 		return 0;

	xor	eax, eax
	jmp	$LN15@ReadFile
$LN14@ReadFile:

; 123  : 	if (!buffer)

	cmp	QWORD PTR buffer$[rsp], 0
	jne	SHORT $LN13@ReadFile

; 124  : 		return 0;

	xor	eax, eax
	jmp	$LN15@ReadFile
$LN13@ReadFile:

; 125  : 	if (!length)

	cmp	QWORD PTR length$[rsp], 0
	jne	SHORT $LN12@ReadFile

; 126  : 		return 0;

	xor	eax, eax
	jmp	$LN15@ReadFile
$LN12@ReadFile:

; 127  : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 128  : 	if (!current_thr)

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN11@ReadFile

; 129  : 		return 0;

	xor	eax, eax
	jmp	$LN15@ReadFile
$LN11@ReadFile:

; 130  : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 131  : 	if (!current_proc){

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN10@ReadFile

; 132  : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 133  : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN9@ReadFile

; 134  : 			return 0;

	xor	eax, eax
	jmp	$LN15@ReadFile
$LN9@ReadFile:
$LN10@ReadFile:

; 135  : 	}
; 136  : 	AuVFSNode* file = current_proc->fds[fd];

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$[rsp], rax

; 137  : 	uint64_t* aligned_buffer = (uint64_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buffer$[rsp], rax

; 138  : 	if (!file)

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN8@ReadFile

; 139  : 		return 0;

	xor	eax, eax
	jmp	$LN15@ReadFile
$LN8@ReadFile:

; 140  : 	size_t ret_bytes = 0;

	mov	QWORD PTR ret_bytes$[rsp], 0

; 141  : 	
; 142  : 	/* every general file will contain its
; 143  : 	 * file system node as device */
; 144  : 	AuVFSNode* fsys = (AuVFSNode*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR fsys$[rsp], rax

; 145  : 	if (file->flags & FS_FLAG_GENERAL && !(file->flags & FS_FLAG_TTY)) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN7@ReadFile
	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 256				; 00000100H
	test	eax, eax
	jne	SHORT $LN7@ReadFile

; 146  : 		ret_bytes = AuVFSNodeRead(fsys, file,aligned_buffer, length);

	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, QWORD PTR aligned_buffer$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	AuVFSNodeRead
	mov	QWORD PTR ret_bytes$[rsp], rax
$LN7@ReadFile:

; 147  : 	}
; 148  : 	if (file->flags & FS_FLAG_DEVICE){

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN6@ReadFile

; 149  : 		/* devfs will handle*/
; 150  : 		if (file->read)

	mov	rax, QWORD PTR file$[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN5@ReadFile

; 151  : 			ret_bytes = file->read(file, file, (uint64_t*)buffer, length);

	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, QWORD PTR buffer$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR file$[rsp]
	call	QWORD PTR [rax+104]
	mov	QWORD PTR ret_bytes$[rsp], rax
$LN5@ReadFile:
$LN6@ReadFile:

; 152  : 	}
; 153  : 
; 154  : 	if (file->flags & FS_FLAG_TTY) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN4@ReadFile

; 155  : 		if (file->read)

	mov	rax, QWORD PTR file$[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN3@ReadFile

; 156  : 			ret_bytes = file->read(file, file, (uint64_t*)aligned_buffer, length);

	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, QWORD PTR aligned_buffer$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR file$[rsp]
	call	QWORD PTR [rax+104]
	mov	QWORD PTR ret_bytes$[rsp], rax
$LN3@ReadFile:
$LN4@ReadFile:

; 157  : 	}
; 158  : 	if ((file->flags & FS_FLAG_PIPE)) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN2@ReadFile

; 159  : 		/* ofcourse, pipe subsystem will handle */
; 160  : 		if (file->read)

	mov	rax, QWORD PTR file$[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN1@ReadFile

; 161  : 			ret_bytes = file->read(file, file, (uint64_t*)buffer, length);

	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, QWORD PTR buffer$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR file$[rsp]
	call	QWORD PTR [rax+104]
	mov	QWORD PTR ret_bytes$[rsp], rax
$LN1@ReadFile:
$LN2@ReadFile:

; 162  : 	}
; 163  : 
; 164  : 	return ret_bytes;

	mov	rax, QWORD PTR ret_bytes$[rsp]
$LN15@ReadFile:

; 165  : }

	add	rsp, 88					; 00000058H
	ret	0
?ReadFile@@YA_KHPEAX_K@Z ENDP				; ReadFile
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
file$ = 32
current_proc$ = 40
current_thr$ = 48
fsys$1 = 56
block$2 = 64
fd$ = 96
offset$ = 104
?FileSetOffset@@YAHH_K@Z PROC				; FileSetOffset

; 88   : int FileSetOffset(int fd, size_t offset) {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 89   : 	x64_cli();

	call	x64_cli

; 90   : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 91   : 	if (!current_thr)

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN6@FileSetOff

; 92   : 		return -1;

	mov	eax, -1
	jmp	$LN7@FileSetOff
$LN6@FileSetOff:

; 93   : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 94   : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN5@FileSetOff

; 95   : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 96   : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN4@FileSetOff

; 97   : 			return -1;

	mov	eax, -1
	jmp	$LN7@FileSetOff
$LN4@FileSetOff:
$LN5@FileSetOff:

; 98   : 	}
; 99   : 
; 100  : 	AuVFSNode* file = current_proc->fds[fd];

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+576]
	mov	QWORD PTR file$[rsp], rax

; 101  : 	if (!file)

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN3@FileSetOff

; 102  : 		return -1;

	mov	eax, -1
	jmp	$LN7@FileSetOff
$LN3@FileSetOff:

; 103  : 	if (!((file->flags & FS_FLAG_FILE_SYSTEM) || (file->flags & FS_FLAG_DEVICE) || (file->flags & FS_FLAG_PIPE)
; 104  : 		|| (file->flags & FS_FLAG_DIRECTORY) || (file->flags & FS_FLAG_TTY))){

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	$LN2@FileSetOff
	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN2@FileSetOff
	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN2@FileSetOff
	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN2@FileSetOff
	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, WORD PTR [rax+64]
	and	eax, 256				; 00000100H
	test	eax, eax
	jne	SHORT $LN2@FileSetOff

; 105  : 		AuVFSNode* fsys = AuVFSFind("/");

	lea	rcx, OFFSET FLAT:$SG3922
	call	AuVFSFind
	mov	QWORD PTR fsys$1[rsp], rax

; 106  : 		if (!fsys)

	cmp	QWORD PTR fsys$1[rsp], 0
	jne	SHORT $LN1@FileSetOff

; 107  : 			return -1;

	mov	eax, -1
	jmp	SHORT $LN7@FileSetOff
$LN1@FileSetOff:

; 108  : 		size_t block = AuVFSGetBlockFor(fsys, file, offset);

	mov	r8, QWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR fsys$1[rsp]
	call	AuVFSGetBlockFor
	mov	QWORD PTR block$2[rsp], rax

; 109  : 		file->current = block;

	mov	rax, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR block$2[rsp]
	mov	QWORD PTR [rax+56], rcx
$LN2@FileSetOff:

; 110  : 	}
; 111  : 	return 0;

	xor	eax, eax
$LN7@FileSetOff:

; 112  : }

	add	rsp, 88					; 00000058H
	ret	0
?FileSetOffset@@YAHH_K@Z ENDP				; FileSetOffset
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\serv\fileserv.cpp
_TEXT	SEGMENT
fd$ = 32
file$ = 40
current_proc$ = 48
current_thr$ = 56
fsys$ = 64
filename$ = 96
mode$ = 104
?OpenFile@@YAHPEADH@Z PROC				; OpenFile

; 48   : int OpenFile(char* filename, int mode) {

$LN12:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 49   : 	x64_cli();

	call	x64_cli

; 50   : 	AuThread* current_thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR current_thr$[rsp], rax

; 51   : 	if (!current_thr)

	cmp	QWORD PTR current_thr$[rsp], 0
	jne	SHORT $LN9@OpenFile

; 52   : 		return -1;

	mov	eax, -1
	jmp	$LN10@OpenFile
$LN9@OpenFile:

; 53   : 	AuProcess* current_proc = AuProcessFindThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR current_proc$[rsp], rax

; 54   : 	if (!current_proc) {

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN8@OpenFile

; 55   : 		current_proc = AuProcessFindSubThread(current_thr);

	mov	rcx, QWORD PTR current_thr$[rsp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR current_proc$[rsp], rax

; 56   : 		if (!current_proc)

	cmp	QWORD PTR current_proc$[rsp], 0
	jne	SHORT $LN7@OpenFile

; 57   : 			return -1;

	mov	eax, -1
	jmp	$LN10@OpenFile
$LN7@OpenFile:
$LN8@OpenFile:

; 58   : 	}
; 59   : 
; 60   : 	AuVFSNode *fsys = AuVFSFind(filename);

	mov	rcx, QWORD PTR filename$[rsp]
	call	AuVFSFind
	mov	QWORD PTR fsys$[rsp], rax

; 61   : 	AuVFSNode* file = AuVFSOpen(filename);

	mov	rcx, QWORD PTR filename$[rsp]
	call	AuVFSOpen
	mov	QWORD PTR file$[rsp], rax

; 62   : 	if (!file) {

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN6@OpenFile

; 63   : 		if (mode & FILE_OPEN_CREAT || mode & FILE_OPEN_WRITE) {

	mov	eax, DWORD PTR mode$[rsp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN4@OpenFile
	mov	eax, DWORD PTR mode$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN5@OpenFile
$LN4@OpenFile:

; 64   : 			file = AuVFSCreateFile(fsys, filename);

	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	AuVFSCreateFile
	mov	QWORD PTR file$[rsp], rax

; 65   : 		}
; 66   : 		else 

	jmp	SHORT $LN3@OpenFile
$LN5@OpenFile:

; 67   : 			return -1;

	mov	eax, -1
	jmp	SHORT $LN10@OpenFile
$LN3@OpenFile:
$LN6@OpenFile:

; 68   : 	}
; 69   : 
; 70   : 	/* check for last time, if any error occured */
; 71   : 	if (!file)

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN2@OpenFile

; 72   : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN10@OpenFile
$LN2@OpenFile:

; 73   : 
; 74   : 	int fd = AuProcessGetFileDesc(current_proc);

	mov	rcx, QWORD PTR current_proc$[rsp]
	call	?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z ; AuProcessGetFileDesc
	mov	DWORD PTR fd$[rsp], eax

; 75   : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN1@OpenFile

; 76   : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN10@OpenFile
$LN1@OpenFile:

; 77   : 	current_proc->fds[fd] = file;

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR current_proc$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], rdx

; 78   : 	SeTextOut("Opening file -> %s %x \r\n", file->filename, file);

	mov	rax, QWORD PTR file$[rsp]
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG3908
	call	SeTextOut

; 79   : 	return fd;

	mov	eax, DWORD PTR fd$[rsp]
$LN10@OpenFile:

; 80   : }

	add	rsp, 88					; 00000058H
	ret	0
?OpenFile@@YAHPEADH@Z ENDP				; OpenFile
_TEXT	ENDS
END
