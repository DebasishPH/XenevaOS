; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__6114EFDF_netserv@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?NetSend@@YAHHPEAU_msghdr_@@H@Z			; NetSend
PUBLIC	?NetReceive@@YAHHPEAU_msghdr_@@H@Z		; NetReceive
PUBLIC	?NetConnect@@YAHHPEAU_sockaddr_@@_K@Z		; NetConnect
PUBLIC	?NetBind@@YAHHPEAU_sockaddr_@@_K@Z		; NetBind
PUBLIC	?NetAccept@@YAHHPEAU_sockaddr_@@PEA_K@Z		; NetAccept
PUBLIC	?NetListen@@YAHHH@Z				; NetListen
PUBLIC	__JustMyCode_Default
EXTRN	AuGetCurrentThread:PROC
EXTRN	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z:PROC ; AuProcessFindThread
EXTRN	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z:PROC ; AuProcessFindSubThread
EXTRN	x64_cli:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NetSend@@YAHHPEAU_msghdr_@@H@Z DD imagerel $LN9
	DD	imagerel $LN9+226
	DD	imagerel $unwind$?NetSend@@YAHHPEAU_msghdr_@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NetReceive@@YAHHPEAU_msghdr_@@H@Z DD imagerel $LN9
	DD	imagerel $LN9+226
	DD	imagerel $unwind$?NetReceive@@YAHHPEAU_msghdr_@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NetConnect@@YAHHPEAU_sockaddr_@@_K@Z DD imagerel $LN7
	DD	imagerel $LN7+180
	DD	imagerel $unwind$?NetConnect@@YAHHPEAU_sockaddr_@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NetBind@@YAHHPEAU_sockaddr_@@_K@Z DD imagerel $LN7
	DD	imagerel $LN7+180
	DD	imagerel $unwind$?NetBind@@YAHHPEAU_sockaddr_@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NetAccept@@YAHHPEAU_sockaddr_@@PEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?NetAccept@@YAHHPEAU_sockaddr_@@PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NetListen@@YAHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?NetListen@@YAHHH@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NetListen@@YAHHH@Z DD 025031201H
	DD	0b20d2312H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NetAccept@@YAHHPEAU_sockaddr_@@PEA_K@Z DD 025031801H
	DD	0b2132318H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NetBind@@YAHHPEAU_sockaddr_@@_K@Z DD 025031b01H
	DD	0f216231bH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NetConnect@@YAHHPEAU_sockaddr_@@_K@Z DD 025031b01H
	DD	0f216231bH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NetReceive@@YAHHPEAU_msghdr_@@H@Z DD 025031b01H
	DD	0f216231bH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NetSend@@YAHHPEAU_msghdr_@@H@Z DD 025031b01H
	DD	0f216231bH
	DD	0500fH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\netserv.cpp
;	COMDAT ?NetListen@@YAHHH@Z
_TEXT	SEGMENT
sockfd$ = 80
backlog$ = 88
?NetListen@@YAHHH@Z PROC				; NetListen, COMDAT

; 120  : int NetListen(int sockfd, int backlog){

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6114EFDF_netserv@cpp
	call	__CheckForDebuggerJustMyCode

; 121  : 	return 0;

	xor	eax, eax

; 122  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?NetListen@@YAHHH@Z ENDP				; NetListen
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\netserv.cpp
;	COMDAT ?NetAccept@@YAHHPEAU_sockaddr_@@PEA_K@Z
_TEXT	SEGMENT
sockfd$ = 80
addr$ = 88
addrlen$ = 96
?NetAccept@@YAHHPEAU_sockaddr_@@PEA_K@Z PROC		; NetAccept, COMDAT

; 116  : int NetAccept(int sockfd, sockaddr *addr, socklen_t * addrlen){

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6114EFDF_netserv@cpp
	call	__CheckForDebuggerJustMyCode

; 117  : 	return 0;

	xor	eax, eax

; 118  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?NetAccept@@YAHHPEAU_sockaddr_@@PEA_K@Z ENDP		; NetAccept
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\netserv.cpp
;	COMDAT ?NetBind@@YAHHPEAU_sockaddr_@@_K@Z
_TEXT	SEGMENT
thr$ = 0
proc$ = 8
sock$ = 16
sockfd$ = 112
addr$ = 120
addrlen$ = 128
?NetBind@@YAHHPEAU_sockaddr_@@_K@Z PROC			; NetBind, COMDAT

; 98   : int NetBind(int sockfd, sockaddr *addr, socklen_t addrlen){

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6114EFDF_netserv@cpp
	call	__CheckForDebuggerJustMyCode

; 99   : 	x64_cli();

	call	x64_cli

; 100  : 	AuThread* thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rbp], rax

; 101  : 	if (!thr)

	cmp	QWORD PTR thr$[rbp], 0
	jne	SHORT $LN2@NetBind

; 102  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@NetBind
$LN2@NetBind:

; 103  : 	AuProcess *proc = AuProcessFindThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR proc$[rbp], rax

; 104  : 	if (!proc){

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN3@NetBind

; 105  : 		proc = AuProcessFindSubThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR proc$[rbp], rax

; 106  : 		if (!proc)

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN4@NetBind

; 107  : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN1@NetBind
$LN4@NetBind:
$LN3@NetBind:

; 108  : 	}
; 109  : 
; 110  : 	AuSocket* sock = (AuSocket*)proc->fds[sockfd];

	movsxd	rax, DWORD PTR sockfd$[rbp]
	mov	rcx, QWORD PTR proc$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8+567]
	mov	QWORD PTR sock$[rbp], rax

; 111  : 	if (sock->bind)

	mov	rax, QWORD PTR sock$[rbp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN5@NetBind

; 112  : 		return sock->bind(sock, addr, addrlen);

	mov	r8, QWORD PTR addrlen$[rbp]
	mov	rdx, QWORD PTR addr$[rbp]
	mov	rcx, QWORD PTR sock$[rbp]
	mov	rax, QWORD PTR sock$[rbp]
	call	QWORD PTR [rax+48]
	jmp	SHORT $LN1@NetBind
$LN5@NetBind:

; 113  : 	return 1;

	mov	eax, 1
$LN1@NetBind:

; 114  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?NetBind@@YAHHPEAU_sockaddr_@@_K@Z ENDP			; NetBind
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\netserv.cpp
;	COMDAT ?NetConnect@@YAHHPEAU_sockaddr_@@_K@Z
_TEXT	SEGMENT
thr$ = 0
proc$ = 8
sock$ = 16
sockfd$ = 112
addr$ = 120
addrlen$ = 128
?NetConnect@@YAHHPEAU_sockaddr_@@_K@Z PROC		; NetConnect, COMDAT

; 80   : int NetConnect(int sockfd, sockaddr* addr, socklen_t addrlen) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6114EFDF_netserv@cpp
	call	__CheckForDebuggerJustMyCode

; 81   : 	x64_cli();

	call	x64_cli

; 82   : 	AuThread* thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rbp], rax

; 83   : 	if (!thr)

	cmp	QWORD PTR thr$[rbp], 0
	jne	SHORT $LN2@NetConnect

; 84   : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@NetConnect
$LN2@NetConnect:

; 85   : 	AuProcess *proc = AuProcessFindThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR proc$[rbp], rax

; 86   : 	if (!proc){

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN3@NetConnect

; 87   : 		proc = AuProcessFindSubThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR proc$[rbp], rax

; 88   : 		if (!proc)

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN4@NetConnect

; 89   : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN1@NetConnect
$LN4@NetConnect:
$LN3@NetConnect:

; 90   : 	}
; 91   : 
; 92   : 	AuSocket* sock = (AuSocket*)proc->fds[sockfd];

	movsxd	rax, DWORD PTR sockfd$[rbp]
	mov	rcx, QWORD PTR proc$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8+567]
	mov	QWORD PTR sock$[rbp], rax

; 93   : 	if (sock->connect)

	mov	rax, QWORD PTR sock$[rbp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN5@NetConnect

; 94   : 		return sock->connect(sock, addr, addrlen);

	mov	r8, QWORD PTR addrlen$[rbp]
	mov	rdx, QWORD PTR addr$[rbp]
	mov	rcx, QWORD PTR sock$[rbp]
	mov	rax, QWORD PTR sock$[rbp]
	call	QWORD PTR [rax+40]
	jmp	SHORT $LN1@NetConnect
$LN5@NetConnect:

; 95   : 	return 1;

	mov	eax, 1
$LN1@NetConnect:

; 96   : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?NetConnect@@YAHHPEAU_sockaddr_@@_K@Z ENDP		; NetConnect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\netserv.cpp
;	COMDAT ?NetReceive@@YAHHPEAU_msghdr_@@H@Z
_TEXT	SEGMENT
thr$ = 0
proc$ = 8
node$ = 16
sock$ = 24
sockfd$ = 112
msg$ = 120
flags$ = 128
?NetReceive@@YAHHPEAU_msghdr_@@H@Z PROC			; NetReceive, COMDAT

; 58   : int NetReceive(int sockfd, msghdr *msg, int flags){

$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6114EFDF_netserv@cpp
	call	__CheckForDebuggerJustMyCode

; 59   : 	x64_cli();

	call	x64_cli

; 60   : 	if (!msg)

	cmp	QWORD PTR msg$[rbp], 0
	jne	SHORT $LN2@NetReceive

; 61   : 		return 1;

	mov	eax, 1
	jmp	$LN1@NetReceive
$LN2@NetReceive:

; 62   : 	AuThread *thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rbp], rax

; 63   : 	if (!thr)

	cmp	QWORD PTR thr$[rbp], 0
	jne	SHORT $LN3@NetReceive

; 64   : 		return 1;

	mov	eax, 1
	jmp	$LN1@NetReceive
$LN3@NetReceive:

; 65   : 	AuProcess *proc = AuProcessFindThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR proc$[rbp], rax

; 66   : 	if (!proc){

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN4@NetReceive

; 67   : 		proc = AuProcessFindSubThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR proc$[rbp], rax

; 68   : 		if (!proc)

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN5@NetReceive

; 69   : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN1@NetReceive
$LN5@NetReceive:
$LN4@NetReceive:

; 70   : 	}
; 71   : 	AuVFSNode* node = proc->fds[sockfd];

	movsxd	rax, DWORD PTR sockfd$[rbp]
	mov	rcx, QWORD PTR proc$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8+567]
	mov	QWORD PTR node$[rbp], rax

; 72   : 	AuSocket* sock = (AuSocket*)node->device;

	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR sock$[rbp], rax

; 73   : 	if (!sock)

	cmp	QWORD PTR sock$[rbp], 0
	jne	SHORT $LN6@NetReceive

; 74   : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN1@NetReceive
$LN6@NetReceive:

; 75   : 	if (sock->receive)

	mov	rax, QWORD PTR sock$[rbp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN7@NetReceive

; 76   : 		return sock->receive(sock, msg, flags);

	mov	r8d, DWORD PTR flags$[rbp]
	mov	rdx, QWORD PTR msg$[rbp]
	mov	rcx, QWORD PTR sock$[rbp]
	mov	rax, QWORD PTR sock$[rbp]
	call	QWORD PTR [rax+16]
	jmp	SHORT $LN1@NetReceive
$LN7@NetReceive:

; 77   : 	return 1;

	mov	eax, 1
$LN1@NetReceive:

; 78   : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?NetReceive@@YAHHPEAU_msghdr_@@H@Z ENDP			; NetReceive
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\netserv.cpp
;	COMDAT ?NetSend@@YAHHPEAU_msghdr_@@H@Z
_TEXT	SEGMENT
thr$ = 0
proc$ = 8
node$ = 16
sock$ = 24
sockfd$ = 112
msg$ = 120
flags$ = 128
?NetSend@@YAHHPEAU_msghdr_@@H@Z PROC			; NetSend, COMDAT

; 36   : int NetSend(int sockfd, msghdr* msg, int flags) {

$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6114EFDF_netserv@cpp
	call	__CheckForDebuggerJustMyCode

; 37   : 	x64_cli();

	call	x64_cli

; 38   : 	if (!msg)

	cmp	QWORD PTR msg$[rbp], 0
	jne	SHORT $LN2@NetSend

; 39   : 		return 1;

	mov	eax, 1
	jmp	$LN1@NetSend
$LN2@NetSend:

; 40   : 	AuThread *thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rbp], rax

; 41   : 	if (!thr)

	cmp	QWORD PTR thr$[rbp], 0
	jne	SHORT $LN3@NetSend

; 42   : 		return 1;

	mov	eax, 1
	jmp	$LN1@NetSend
$LN3@NetSend:

; 43   : 	AuProcess *proc = AuProcessFindThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR proc$[rbp], rax

; 44   : 	if (!proc){

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN4@NetSend

; 45   : 		proc = AuProcessFindSubThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindSubThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindSubThread
	mov	QWORD PTR proc$[rbp], rax

; 46   : 		if (!proc)

	cmp	QWORD PTR proc$[rbp], 0
	jne	SHORT $LN5@NetSend

; 47   : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN1@NetSend
$LN5@NetSend:
$LN4@NetSend:

; 48   : 	}
; 49   : 	AuVFSNode* node = proc->fds[sockfd];

	movsxd	rax, DWORD PTR sockfd$[rbp]
	mov	rcx, QWORD PTR proc$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8+567]
	mov	QWORD PTR node$[rbp], rax

; 50   : 	AuSocket* sock = (AuSocket*)node->device;

	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR sock$[rbp], rax

; 51   : 	if (!sock)

	cmp	QWORD PTR sock$[rbp], 0
	jne	SHORT $LN6@NetSend

; 52   : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN1@NetSend
$LN6@NetSend:

; 53   : 	if (sock->send)

	mov	rax, QWORD PTR sock$[rbp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN7@NetSend

; 54   : 		return sock->send(sock, msg, flags);

	mov	r8d, DWORD PTR flags$[rbp]
	mov	rdx, QWORD PTR msg$[rbp]
	mov	rcx, QWORD PTR sock$[rbp]
	mov	rax, QWORD PTR sock$[rbp]
	call	QWORD PTR [rax+24]
	jmp	SHORT $LN1@NetSend
$LN7@NetSend:

; 55   : 	return 1;

	mov	eax, 1
$LN1@NetSend:

; 56   : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?NetSend@@YAHHPEAU_msghdr_@@H@Z ENDP			; NetSend
_TEXT	ENDS
END
