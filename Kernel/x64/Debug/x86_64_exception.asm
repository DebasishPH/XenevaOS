; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__3B5C682D_x86_64_exception@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?x86_64_exception_init@@YAXXZ			; x86_64_exception_init
PUBLIC	?panic@@YAXPEBDZZ				; panic
PUBLIC	?divide_by_zero_fault@@YAX_KPEAX@Z		; divide_by_zero_fault
PUBLIC	?single_step_trap@@YAX_KPEAX@Z			; single_step_trap
PUBLIC	?nmi_trap@@YAX_KPEAX@Z				; nmi_trap
PUBLIC	?breakpoint_trap@@YAX_KPEAX@Z			; breakpoint_trap
PUBLIC	?overflow_trap@@YAX_KPEAX@Z			; overflow_trap
PUBLIC	?bounds_check_fault@@YAX_KPEAX@Z		; bounds_check_fault
PUBLIC	?invalid_opcode_fault@@YAX_KPEAX@Z		; invalid_opcode_fault
PUBLIC	?no_device_fault@@YAX_KPEAX@Z			; no_device_fault
PUBLIC	?double_fault_abort@@YAX_KPEAX@Z		; double_fault_abort
PUBLIC	?invalid_tss_fault@@YAX_KPEAX@Z			; invalid_tss_fault
PUBLIC	?no_segment_fault@@YAX_KPEAX@Z			; no_segment_fault
PUBLIC	?stack_fault@@YAX_KPEAX@Z			; stack_fault
PUBLIC	?general_protection_fault@@YAX_KPEAX@Z		; general_protection_fault
PUBLIC	?page_fault@@YAX_KPEAX@Z			; page_fault
PUBLIC	?fpu_fault@@YAX_KPEAX@Z				; fpu_fault
PUBLIC	?alignment_check_fault@@YAX_KPEAX@Z		; alignment_check_fault
PUBLIC	?machine_check_abort@@YAX_KPEAX@Z		; machine_check_abort
PUBLIC	?simd_fpu_fault@@YAX_KPEAX@Z			; simd_fpu_fault
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CL@KIOOCGPI@?$AN?6?5?$CK?$CK?$CKARCH?5x86_64?5?3?5Kernel?5Pani@ ; `string'
PUBLIC	??_C@_0FI@IAKHKFBH@?$FLAurora?5Kernel?$FN?3?5We?5are?5sorry?5t@ ; `string'
PUBLIC	??_C@_0EB@GBLAIMDC@?$FLAurora?5Kernel?$FN?3?5please?5inform?5@ ; `string'
PUBLIC	??_C@_0DD@KEEKPGHM@?$FLAurora?5Kernel?$FN?3?5Below?5is?5the?5c@ ; `string'
PUBLIC	??_C@_0CP@DDGNNPIN@?$FLAurora?5Kernel?$FN?3?5Current?5Proces@ ; `string'
PUBLIC	??_C@_0FB@CKOCEJAF@?$FLAurora?5Kernel?$FN?3?5If?5anything?5no@ ; `string'
PUBLIC	??_C@_06BGDIMDGA@?5?$CFs?5?$AN?6@		; `string'
PUBLIC	??_C@_0N@EBPCEKFE@?6Divide?5by?50@		; `string'
PUBLIC	??_C@_0P@KPEOJEOL@Divide?5by?50?5?$AN?6@	; `string'
PUBLIC	??_C@_0BG@OPGPDIMM@__PROCESSOR_DATA__?5?$AN?6@	; `string'
PUBLIC	??_C@_0N@ODPGJOJJ@RIP?5?9?$DO?5?$CFx?5?$AN?6@	; `string'
PUBLIC	??_C@_0N@FNJJLAE@RSP?5?9?$DO?5?$CFx?5?$AN?6@	; `string'
PUBLIC	??_C@_0BA@LFJDMIBB@RFLAGS?5?9?$DO?5?$CFx?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BC@HFIDFDNB@?6Single?5Step?5Trap@	; `string'
PUBLIC	??_C@_0CD@CODJEILI@?6NMI?5?$FLNon?9Muskable?9Interrupt?$FN?5T@ ; `string'
PUBLIC	??_C@_0BB@BPIIODKN@?6Breakpoint?5Trap@		; `string'
PUBLIC	??_C@_0P@HPCJBHIE@?6Overflow?5Trap@		; `string'
PUBLIC	??_C@_0BD@OIHLKGEP@?6Bound?5Check?5Fault@	; `string'
PUBLIC	??_C@_0BI@DJAKOHAL@Invalid?5Opcode?5Fault?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BH@BHCKDMDH@__PROCESSOR?5TRACE__?5?$AN?6@ ; `string'
PUBLIC	??_C@_0L@DLBLLKFH@RIP?5?9?$DO?5?$CFx?6@		; `string'
PUBLIC	??_C@_0N@IJHHEMAG@Stack?5?9?$DO?5?$CFx?6@	; `string'
PUBLIC	??_C@_0O@HPBDGHPH@RFLAGS?5?9?$DO?5?$CFx?6@	; `string'
PUBLIC	??_C@_09LNGLKLCE@CS?5?9?$DO?5?$CFx?6@		; `string'
PUBLIC	??_C@_09JKMFCKMM@SS?5?9?$DO?5?$CFx?6@		; `string'
PUBLIC	??_C@_0BB@DOMGDLHF@?6No?5Device?5Fault@		; `string'
PUBLIC	??_C@_0BE@NLNKFOBM@?6Double?5Fault?5Abort@	; `string'
PUBLIC	??_C@_0BE@CHCACOMN@?6Invalid?5TSS?5Fault?5@	; `string'
PUBLIC	??_C@_0BC@EJLFDPKP@?6No?5Segment?5Fault@	; `string'
PUBLIC	??_C@_0BB@HALEMCKC@?6Stack?5Fault?5at?5@	; `string'
PUBLIC	??_C@_0P@BEIIBHMJ@Stack?5?9?$DO?5?$CFx?5?$AN?6@	; `string'
PUBLIC	??_C@_0BG@NKPJLLBP@CS?5?9?$DO?5?$CFx?0?5SS?5?9?$DO?5?$CFx?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BO@DLPLGGDB@Current?5thread?5?9?$DOid?5?$CFd?5?0?5?$CFs?$AN?6@ ; `string'
PUBLIC	??_C@_0BL@BCIGLIE@Genral?5Protection?5Fault?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BM@CNDNHPEF@General?5Protection?5Fault?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BF@OEDHGALK@Thread?5name?5?9?$DO?5?$CFs?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BF@GPMBGFMG@Process?5pid?5?9?$DO?5?$CFd?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BG@PCABIPNJ@Process?5name?5?9?$DO?5?$CFs?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BB@OINBMLCH@Page?5Fault?5?$CB?$CB?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BE@JLFIKHEK@Page?5Not?5Present?5?$AN?6@	; `string'
PUBLIC	??_C@_0O@GDFNKNKM@Read?1Write?5?$AN?6@		; `string'
PUBLIC	??_C@_0BP@JEBAMBMP@VPage?5rw?5?9?$DO?5?$CFd?5?0?5user?5?9?$DO?5?$CFd?5?$AN?6@ ; `string'
PUBLIC	??_C@_0CA@DAKGOMFF@VPage?5phys1?9?$DO?5?$CFx?0?5phys2?9?$DO?5?$CFx?5?$AN?6@ ; `string'
PUBLIC	??_C@_0BE@HGFGIJLF@User?5bit?5not?5set?5?$AN?6@	; `string'
PUBLIC	??_C@_0BB@JGKFHPN@Reserved?5page?5?$AN?6@	; `string'
PUBLIC	??_C@_0BA@EFEPIAFE@Invalid?5page?5?$AN?6@	; `string'
PUBLIC	??_C@_0BJ@MPFJDHA@Virtual?5Address?5?9?$DO?5?$CFx?5?$AN?6@ ; `string'
PUBLIC	??_C@_0CB@EGGAFDHO@Virtual?5Address?5aligned?5?9?$DO?5?$CFx?5?$AN@ ; `string'
PUBLIC	??_C@_0CB@FDCJCAAG@RIP?5?9?$DO?5?$CFx?5?0?5Actual?5addr?5?9?$DO?5?$CFx?5?$AN@ ; `string'
PUBLIC	??_C@_0L@GOHGINKM@?6FPU?5Fault@			; `string'
PUBLIC	??_C@_0CD@CNGJPDL@?6Alignment?5Check?5Fault?5at?5addre@ ; `string'
PUBLIC	??_C@_0BF@MNKGAIFI@?6Machine?5Check?5Abort@	; `string'
PUBLIC	??_C@_0BE@LFDDCDK@?6?5SIMD?5FPU?5Faul?5?$AN?6t@	; `string'
PUBLIC	??_C@_0BI@CEHMAKJG@?6__CPU?5Informations__?5?6@	; `string'
PUBLIC	??_C@_0N@PNNODPEJ@?5RIP?5?9?$DO?5?$CFx?5?6@	; `string'
PUBLIC	??_C@_0N@LBIHKDAG@?5RSP?5?9?$DO?5?$CFx?5?6@	; `string'
PUBLIC	??_C@_0BA@MAMEGMKL@?5RFLAGS?5?9?$DO?5?$CFx?5?6@	; `string'
PUBLIC	??_C@_0BA@JGMDELOL@?5MXCSR?5bit?5?5?9?9?5@	; `string'
EXTRN	AuGetCurrentThread:PROC
EXTRN	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z:PROC ; AuProcessFindThread
EXTRN	?AuPerCPUGetCpuID@@YAEXZ:PROC			; AuPerCPUGetCpuID
EXTRN	x64_cli:PROC
EXTRN	x64_read_cr2:PROC
EXTRN	AuVmmngrGetPage:PROC
EXTRN	AuGetPhysicalAddress:PROC
EXTRN	memcpy:PROC
EXTRN	setvect:PROC
EXTRN	kfree:PROC
EXTRN	SeTextOut:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?x86_64_exception_init@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+332
	DD	imagerel $unwind$?x86_64_exception_init@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?panic@@YAXPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$?panic@@YAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?divide_by_zero_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+149
	DD	imagerel $unwind$?divide_by_zero_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?single_step_trap@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+65
	DD	imagerel $unwind$?single_step_trap@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?nmi_trap@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?nmi_trap@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?breakpoint_trap@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?breakpoint_trap@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow_trap@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?overflow_trap@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bounds_check_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?bounds_check_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?invalid_opcode_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+189
	DD	imagerel $unwind$?invalid_opcode_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?no_device_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?no_device_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?double_fault_abort@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?double_fault_abort@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?invalid_tss_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?invalid_tss_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?no_segment_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?no_segment_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stack_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+213
	DD	imagerel $unwind$?stack_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?general_protection_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+225
	DD	imagerel $unwind$?general_protection_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?page_fault@@YAX_KPEAX@Z DD imagerel $LN23
	DD	imagerel $LN23+958
	DD	imagerel $unwind$?page_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fpu_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?fpu_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?alignment_check_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?alignment_check_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?machine_check_abort@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?machine_check_abort@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?simd_fpu_fault@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+149
	DD	imagerel $unwind$?simd_fpu_fault@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT ??_C@_0BA@JGMDELOL@?5MXCSR?5bit?5?5?9?9?5@
CONST	SEGMENT
??_C@_0BA@JGMDELOL@?5MXCSR?5bit?5?5?9?9?5@ DB ' MXCSR bit  -- ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MAMEGMKL@?5RFLAGS?5?9?$DO?5?$CFx?5?6@
CONST	SEGMENT
??_C@_0BA@MAMEGMKL@?5RFLAGS?5?9?$DO?5?$CFx?5?6@ DB ' RFLAGS -> %x ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBIHKDAG@?5RSP?5?9?$DO?5?$CFx?5?6@
CONST	SEGMENT
??_C@_0N@LBIHKDAG@?5RSP?5?9?$DO?5?$CFx?5?6@ DB ' RSP -> %x ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNNODPEJ@?5RIP?5?9?$DO?5?$CFx?5?6@
CONST	SEGMENT
??_C@_0N@PNNODPEJ@?5RIP?5?9?$DO?5?$CFx?5?6@ DB ' RIP -> %x ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CEHMAKJG@?6__CPU?5Informations__?5?6@
CONST	SEGMENT
??_C@_0BI@CEHMAKJG@?6__CPU?5Informations__?5?6@ DB 0aH, '__CPU Informatio'
	DB	'ns__ ', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LFDDCDK@?6?5SIMD?5FPU?5Faul?5?$AN?6t@
CONST	SEGMENT
??_C@_0BE@LFDDCDK@?6?5SIMD?5FPU?5Faul?5?$AN?6t@ DB 0aH, ' SIMD FPU Faul ', 0dH
	DB	0aH, 't', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MNKGAIFI@?6Machine?5Check?5Abort@
CONST	SEGMENT
??_C@_0BF@MNKGAIFI@?6Machine?5Check?5Abort@ DB 0aH, 'Machine Check Abort', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CNGJPDL@?6Alignment?5Check?5Fault?5at?5addre@
CONST	SEGMENT
??_C@_0CD@CNGJPDL@?6Alignment?5Check?5Fault?5at?5addre@ DB 0aH, 'Alignmen'
	DB	't Check Fault at address ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GOHGINKM@?6FPU?5Fault@
CONST	SEGMENT
??_C@_0L@GOHGINKM@?6FPU?5Fault@ DB 0aH, 'FPU Fault', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FDCJCAAG@RIP?5?9?$DO?5?$CFx?5?0?5Actual?5addr?5?9?$DO?5?$CFx?5?$AN@
CONST	SEGMENT
??_C@_0CB@FDCJCAAG@RIP?5?9?$DO?5?$CFx?5?0?5Actual?5addr?5?9?$DO?5?$CFx?5?$AN@ DB 'R'
	DB	'IP -> %x , Actual addr -> %x ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EGGAFDHO@Virtual?5Address?5aligned?5?9?$DO?5?$CFx?5?$AN@
CONST	SEGMENT
??_C@_0CB@EGGAFDHO@Virtual?5Address?5aligned?5?9?$DO?5?$CFx?5?$AN@ DB 'Vi'
	DB	'rtual Address aligned -> %x ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MPFJDHA@Virtual?5Address?5?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0BJ@MPFJDHA@Virtual?5Address?5?9?$DO?5?$CFx?5?$AN?6@ DB 'Virtual Ad'
	DB	'dress -> %x ', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EFEPIAFE@Invalid?5page?5?$AN?6@
CONST	SEGMENT
??_C@_0BA@EFEPIAFE@Invalid?5page?5?$AN?6@ DB 'Invalid page ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JGKFHPN@Reserved?5page?5?$AN?6@
CONST	SEGMENT
??_C@_0BB@JGKFHPN@Reserved?5page?5?$AN?6@ DB 'Reserved page ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HGFGIJLF@User?5bit?5not?5set?5?$AN?6@
CONST	SEGMENT
??_C@_0BE@HGFGIJLF@User?5bit?5not?5set?5?$AN?6@ DB 'User bit not set ', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DAKGOMFF@VPage?5phys1?9?$DO?5?$CFx?0?5phys2?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0CA@DAKGOMFF@VPage?5phys1?9?$DO?5?$CFx?0?5phys2?9?$DO?5?$CFx?5?$AN?6@ DB 'V'
	DB	'Page phys1-> %x, phys2-> %x ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JEBAMBMP@VPage?5rw?5?9?$DO?5?$CFd?5?0?5user?5?9?$DO?5?$CFd?5?$AN?6@
CONST	SEGMENT
??_C@_0BP@JEBAMBMP@VPage?5rw?5?9?$DO?5?$CFd?5?0?5user?5?9?$DO?5?$CFd?5?$AN?6@ DB 'V'
	DB	'Page rw -> %d , user -> %d ', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDFNKNKM@Read?1Write?5?$AN?6@
CONST	SEGMENT
??_C@_0O@GDFNKNKM@Read?1Write?5?$AN?6@ DB 'Read/Write ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JLFIKHEK@Page?5Not?5Present?5?$AN?6@
CONST	SEGMENT
??_C@_0BE@JLFIKHEK@Page?5Not?5Present?5?$AN?6@ DB 'Page Not Present ', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OINBMLCH@Page?5Fault?5?$CB?$CB?5?$AN?6@
CONST	SEGMENT
??_C@_0BB@OINBMLCH@Page?5Fault?5?$CB?$CB?5?$AN?6@ DB 'Page Fault !! ', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCABIPNJ@Process?5name?5?9?$DO?5?$CFs?5?$AN?6@
CONST	SEGMENT
??_C@_0BG@PCABIPNJ@Process?5name?5?9?$DO?5?$CFs?5?$AN?6@ DB 'Process name'
	DB	' -> %s ', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GPMBGFMG@Process?5pid?5?9?$DO?5?$CFd?5?$AN?6@
CONST	SEGMENT
??_C@_0BF@GPMBGFMG@Process?5pid?5?9?$DO?5?$CFd?5?$AN?6@ DB 'Process pid -'
	DB	'> %d ', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEDHGALK@Thread?5name?5?9?$DO?5?$CFs?5?$AN?6@
CONST	SEGMENT
??_C@_0BF@OEDHGALK@Thread?5name?5?9?$DO?5?$CFs?5?$AN?6@ DB 'Thread name -'
	DB	'> %s ', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CNDNHPEF@General?5Protection?5Fault?5?$AN?6@
CONST	SEGMENT
??_C@_0BM@CNDNHPEF@General?5Protection?5Fault?5?$AN?6@ DB 'General Protec'
	DB	'tion Fault ', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BCIGLIE@Genral?5Protection?5Fault?5?$AN?6@
CONST	SEGMENT
??_C@_0BL@BCIGLIE@Genral?5Protection?5Fault?5?$AN?6@ DB 'Genral Protectio'
	DB	'n Fault ', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DLPLGGDB@Current?5thread?5?9?$DOid?5?$CFd?5?0?5?$CFs?$AN?6@
CONST	SEGMENT
??_C@_0BO@DLPLGGDB@Current?5thread?5?9?$DOid?5?$CFd?5?0?5?$CFs?$AN?6@ DB 'C'
	DB	'urrent thread ->id %d , %s', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NKPJLLBP@CS?5?9?$DO?5?$CFx?0?5SS?5?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0BG@NKPJLLBP@CS?5?9?$DO?5?$CFx?0?5SS?5?9?$DO?5?$CFx?5?$AN?6@ DB 'CS'
	DB	' -> %x, SS -> %x ', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BEIIBHMJ@Stack?5?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0P@BEIIBHMJ@Stack?5?9?$DO?5?$CFx?5?$AN?6@ DB 'Stack -> %x ', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HALEMCKC@?6Stack?5Fault?5at?5@
CONST	SEGMENT
??_C@_0BB@HALEMCKC@?6Stack?5Fault?5at?5@ DB 0aH, 'Stack Fault at ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EJLFDPKP@?6No?5Segment?5Fault@
CONST	SEGMENT
??_C@_0BC@EJLFDPKP@?6No?5Segment?5Fault@ DB 0aH, 'No Segment Fault', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHCACOMN@?6Invalid?5TSS?5Fault?5@
CONST	SEGMENT
??_C@_0BE@CHCACOMN@?6Invalid?5TSS?5Fault?5@ DB 0aH, 'Invalid TSS Fault ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLNKFOBM@?6Double?5Fault?5Abort@
CONST	SEGMENT
??_C@_0BE@NLNKFOBM@?6Double?5Fault?5Abort@ DB 0aH, 'Double Fault Abort', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DOMGDLHF@?6No?5Device?5Fault@
CONST	SEGMENT
??_C@_0BB@DOMGDLHF@?6No?5Device?5Fault@ DB 0aH, 'No Device Fault', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKMFCKMM@SS?5?9?$DO?5?$CFx?6@
CONST	SEGMENT
??_C@_09JKMFCKMM@SS?5?9?$DO?5?$CFx?6@ DB 'SS -> %x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LNGLKLCE@CS?5?9?$DO?5?$CFx?6@
CONST	SEGMENT
??_C@_09LNGLKLCE@CS?5?9?$DO?5?$CFx?6@ DB 'CS -> %x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPBDGHPH@RFLAGS?5?9?$DO?5?$CFx?6@
CONST	SEGMENT
??_C@_0O@HPBDGHPH@RFLAGS?5?9?$DO?5?$CFx?6@ DB 'RFLAGS -> %x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJHHEMAG@Stack?5?9?$DO?5?$CFx?6@
CONST	SEGMENT
??_C@_0N@IJHHEMAG@Stack?5?9?$DO?5?$CFx?6@ DB 'Stack -> %x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLBLLKFH@RIP?5?9?$DO?5?$CFx?6@
CONST	SEGMENT
??_C@_0L@DLBLLKFH@RIP?5?9?$DO?5?$CFx?6@ DB 'RIP -> %x', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHCKDMDH@__PROCESSOR?5TRACE__?5?$AN?6@
CONST	SEGMENT
??_C@_0BH@BHCKDMDH@__PROCESSOR?5TRACE__?5?$AN?6@ DB '__PROCESSOR TRACE__ '
	DB	0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DJAKOHAL@Invalid?5Opcode?5Fault?5?$AN?6@
CONST	SEGMENT
??_C@_0BI@DJAKOHAL@Invalid?5Opcode?5Fault?5?$AN?6@ DB 'Invalid Opcode Fau'
	DB	'lt ', 0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OIHLKGEP@?6Bound?5Check?5Fault@
CONST	SEGMENT
??_C@_0BD@OIHLKGEP@?6Bound?5Check?5Fault@ DB 0aH, 'Bound Check Fault', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HPCJBHIE@?6Overflow?5Trap@
CONST	SEGMENT
??_C@_0P@HPCJBHIE@?6Overflow?5Trap@ DB 0aH, 'Overflow Trap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPIIODKN@?6Breakpoint?5Trap@
CONST	SEGMENT
??_C@_0BB@BPIIODKN@?6Breakpoint?5Trap@ DB 0aH, 'Breakpoint Trap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CODJEILI@?6NMI?5?$FLNon?9Muskable?9Interrupt?$FN?5T@
CONST	SEGMENT
??_C@_0CD@CODJEILI@?6NMI?5?$FLNon?9Muskable?9Interrupt?$FN?5T@ DB 0aH, 'N'
	DB	'MI [Non-Muskable-Interrupt] Trap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HFIDFDNB@?6Single?5Step?5Trap@
CONST	SEGMENT
??_C@_0BC@HFIDFDNB@?6Single?5Step?5Trap@ DB 0aH, 'Single Step Trap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LFJDMIBB@RFLAGS?5?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0BA@LFJDMIBB@RFLAGS?5?9?$DO?5?$CFx?5?$AN?6@ DB 'RFLAGS -> %x ', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FNJJLAE@RSP?5?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0N@FNJJLAE@RSP?5?9?$DO?5?$CFx?5?$AN?6@ DB 'RSP -> %x ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ODPGJOJJ@RIP?5?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0N@ODPGJOJJ@RIP?5?9?$DO?5?$CFx?5?$AN?6@ DB 'RIP -> %x ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OPGPDIMM@__PROCESSOR_DATA__?5?$AN?6@
CONST	SEGMENT
??_C@_0BG@OPGPDIMM@__PROCESSOR_DATA__?5?$AN?6@ DB '__PROCESSOR_DATA__ ', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPEOJEOL@Divide?5by?50?5?$AN?6@
CONST	SEGMENT
??_C@_0P@KPEOJEOL@Divide?5by?50?5?$AN?6@ DB 'Divide by 0 ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBPCEKFE@?6Divide?5by?50@
CONST	SEGMENT
??_C@_0N@EBPCEKFE@?6Divide?5by?50@ DB 0aH, 'Divide by 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGDIMDGA@?5?$CFs?5?$AN?6@
CONST	SEGMENT
??_C@_06BGDIMDGA@?5?$CFs?5?$AN?6@ DB ' %s ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@CKOCEJAF@?$FLAurora?5Kernel?$FN?3?5If?5anything?5no@
CONST	SEGMENT
??_C@_0FB@CKOCEJAF@?$FLAurora?5Kernel?$FN?3?5If?5anything?5no@ DB '[Auror'
	DB	'a Kernel]: If anything not working, try rebooting/Restarting '
	DB	'the system ', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DDGNNPIN@?$FLAurora?5Kernel?$FN?3?5Current?5Proces@
CONST	SEGMENT
??_C@_0CP@DDGNNPIN@?$FLAurora?5Kernel?$FN?3?5Current?5Proces@ DB '[Aurora'
	DB	' Kernel]: Current Processor id -> %d ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KEEKPGHM@?$FLAurora?5Kernel?$FN?3?5Below?5is?5the?5c@
CONST	SEGMENT
??_C@_0DD@KEEKPGHM@?$FLAurora?5Kernel?$FN?3?5Below?5is?5the?5c@ DB '[Auro'
	DB	'ra Kernel]: Below is the code of exception ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GBLAIMDC@?$FLAurora?5Kernel?$FN?3?5please?5inform?5@
CONST	SEGMENT
??_C@_0EB@GBLAIMDC@?$FLAurora?5Kernel?$FN?3?5please?5inform?5@ DB '[Auror'
	DB	'a Kernel]: please inform it to the master of the kernel ', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@IAKHKFBH@?$FLAurora?5Kernel?$FN?3?5We?5are?5sorry?5t@
CONST	SEGMENT
??_C@_0FI@IAKHKFBH@?$FLAurora?5Kernel?$FN?3?5We?5are?5sorry?5t@ DB '[Auro'
	DB	'ra Kernel]: We are sorry to say that, a processor invalid exc'
	DB	'eption has occured ', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KIOOCGPI@?$AN?6?5?$CK?$CK?$CKARCH?5x86_64?5?3?5Kernel?5Pani@
CONST	SEGMENT
??_C@_0CL@KIOOCGPI@?$AN?6?5?$CK?$CK?$CKARCH?5x86_64?5?3?5Kernel?5Pani@ DB 0dH
	DB	0aH, ' ***ARCH x86_64 : Kernel Panic!!! *** ', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?simd_fpu_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?machine_check_abort@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?alignment_check_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fpu_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?page_fault@@YAX_KPEAX@Z DD 025041701H
	DD	01122317H
	DD	0500b0020H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?general_protection_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stack_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?no_segment_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?invalid_tss_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?double_fault_abort@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?no_device_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?invalid_opcode_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bounds_check_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow_trap@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?breakpoint_trap@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?nmi_trap@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?single_step_trap@@YAX_KPEAX@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?divide_by_zero_fault@@YAX_KPEAX@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?panic@@YAXPEBDZZ DD 025031e01H
	DD	0b219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?x86_64_exception_init@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?simd_fpu_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
frame$ = 0
v$ = 96
p$ = 104
?simd_fpu_fault@@YAX_KPEAX@Z PROC			; simd_fpu_fault, COMDAT

; 289  : void simd_fpu_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 290  : 	x64_cli();

	call	x64_cli

; 291  : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 292  : 	panic("\n SIMD FPU Faul \r\nt");

	lea	rcx, OFFSET FLAT:??_C@_0BE@LFDDCDK@?6?5SIMD?5FPU?5Faul?5?$AN?6t@
	call	?panic@@YAXPEBDZZ			; panic

; 293  : 	SeTextOut("\n__CPU Informations__ \n");

	lea	rcx, OFFSET FLAT:??_C@_0BI@CEHMAKJG@?6__CPU?5Informations__?5?6@
	call	SeTextOut

; 294  : 	SeTextOut(" RIP -> %x \n", frame->rip);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:??_C@_0N@PNNODPEJ@?5RIP?5?9?$DO?5?$CFx?5?6@
	call	SeTextOut

; 295  : 	SeTextOut(" RSP -> %x \n", frame->rsp);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+40]
	lea	rcx, OFFSET FLAT:??_C@_0N@LBIHKDAG@?5RSP?5?9?$DO?5?$CFx?5?6@
	call	SeTextOut

; 296  : 	SeTextOut(" RFLAGS -> %x \n", frame->rflags);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:??_C@_0BA@MAMEGMKL@?5RFLAGS?5?9?$DO?5?$CFx?5?6@
	call	SeTextOut

; 297  : 	SeTextOut(" MXCSR bit  -- ");

	lea	rcx, OFFSET FLAT:??_C@_0BA@JGMDELOL@?5MXCSR?5bit?5?5?9?9?5@
	call	SeTextOut
$LN2@simd_fpu_f:

; 298  : 	for (;;);

	jmp	SHORT $LN2@simd_fpu_f

; 299  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?simd_fpu_fault@@YAX_KPEAX@Z ENDP			; simd_fpu_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?machine_check_abort@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?machine_check_abort@@YAX_KPEAX@Z PROC			; machine_check_abort, COMDAT

; 282  : void machine_check_abort(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 283  : 	x64_cli();

	call	x64_cli

; 284  : 	panic("\nMachine Check Abort");

	lea	rcx, OFFSET FLAT:??_C@_0BF@MNKGAIFI@?6Machine?5Check?5Abort@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@machine_ch:

; 285  : 	for (;;);

	jmp	SHORT $LN2@machine_ch

; 286  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?machine_check_abort@@YAX_KPEAX@Z ENDP			; machine_check_abort
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?alignment_check_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?alignment_check_fault@@YAX_KPEAX@Z PROC		; alignment_check_fault, COMDAT

; 275  : void alignment_check_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 276  : 	x64_cli();

	call	x64_cli

; 277  : 	panic("\nAlignment Check Fault at address ");

	lea	rcx, OFFSET FLAT:??_C@_0CD@CNGJPDL@?6Alignment?5Check?5Fault?5at?5addre@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@alignment_:

; 278  : 	for (;;);

	jmp	SHORT $LN2@alignment_

; 279  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?alignment_check_fault@@YAX_KPEAX@Z ENDP		; alignment_check_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?fpu_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
vector$ = 80
p$ = 88
?fpu_fault@@YAX_KPEAX@Z PROC				; fpu_fault, COMDAT

; 267  : void fpu_fault(size_t vector, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 268  : 	x64_cli();

	call	x64_cli

; 269  : 	panic("\nFPU Fault");

	lea	rcx, OFFSET FLAT:??_C@_0L@GOHGINKM@?6FPU?5Fault@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@fpu_fault:

; 270  : 	for (;;);

	jmp	SHORT $LN2@fpu_fault

; 271  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?fpu_fault@@YAX_KPEAX@Z ENDP				; fpu_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?page_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
frame$ = 0
fr$ = 8
vaddr$ = 16
present$ = 24
rw$ = 28
us$ = 32
resv$ = 36
id$ = 40
thr$ = 48
sig$1 = 56
ctx$2 = 64
srcCtx$3 = 72
proc$ = 80
vaddr_$ = 88
vaddr_aligned$ = 96
_mapped$ = 104
phys$4 = 112
vpage$5 = 120
diff$ = 128
mask$ = 136
real_addr$ = 144
tv68 = 216
vector$ = 240
param$ = 248
?page_fault@@YAX_KPEAX@Z PROC				; page_fault, COMDAT

; 187  : void page_fault(size_t vector, void* param){

$LN23:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 188  : 	x64_cli();

	call	x64_cli

; 189  : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)param;

	mov	rax, QWORD PTR param$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 190  : 	stack_frame *fr = (stack_frame*)param;

	mov	rax, QWORD PTR param$[rbp]
	mov	QWORD PTR fr$[rbp], rax

; 191  : 
; 192  : 	void* vaddr = (void*)x64_read_cr2();

	call	x64_read_cr2
	mov	QWORD PTR vaddr$[rbp], rax

; 193  : 
; 194  : 	int present = !(frame->error & 0x1);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rax, QWORD PTR [rax+8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN21@page_fault
	mov	DWORD PTR tv68[rbp], 1
	jmp	SHORT $LN22@page_fault
$LN21@page_fault:
	mov	DWORD PTR tv68[rbp], 0
$LN22@page_fault:
	mov	eax, DWORD PTR tv68[rbp]
	mov	DWORD PTR present$[rbp], eax

; 195  : 	int rw = frame->error & 0x2;

	mov	rax, QWORD PTR frame$[rbp]
	mov	rax, QWORD PTR [rax+8]
	and	rax, 2
	mov	DWORD PTR rw$[rbp], eax

; 196  : 	int us = frame->error & 0x4;

	mov	rax, QWORD PTR frame$[rbp]
	mov	rax, QWORD PTR [rax+8]
	and	rax, 4
	mov	DWORD PTR us$[rbp], eax

; 197  : 	int resv = frame->error & 0x8;

	mov	rax, QWORD PTR frame$[rbp]
	mov	rax, QWORD PTR [rax+8]
	and	rax, 8
	mov	DWORD PTR resv$[rbp], eax

; 198  : 	int id = frame->error & 0x10;

	mov	rax, QWORD PTR frame$[rbp]
	mov	rax, QWORD PTR [rax+8]
	and	rax, 16
	mov	DWORD PTR id$[rbp], eax

; 199  : 
; 200  : 	
; 201  : 	AuThread* thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rbp], rax

; 202  : 	
; 203  : 	/* check for signal */
; 204  : 	if (!thr) {

	cmp	QWORD PTR thr$[rbp], 0
	jne	SHORT $LN5@page_fault

; 205  : 		goto skip;

	jmp	$LN6@page_fault
	jmp	$skip$24
$LN5@page_fault:

; 206  : 	}
; 207  : 	if (thr->returnableSignal) {

	mov	rax, QWORD PTR thr$[rbp]
	cmp	QWORD PTR [rax+633], 0
	je	$LN7@page_fault

; 208  : 		Signal* sig = (Signal*)thr->returnableSignal;

	mov	rax, QWORD PTR thr$[rbp]
	mov	rax, QWORD PTR [rax+633]
	mov	QWORD PTR sig$1[rbp], rax

; 209  : 		x86_64_cpu_regs_t* ctx = (x86_64_cpu_regs_t*)(thr->frame.kern_esp - sizeof(x86_64_cpu_regs_t));

	mov	rax, QWORD PTR thr$[rbp]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, 160				; 000000a0H
	mov	QWORD PTR ctx$2[rbp], rax

; 210  : 		x86_64_cpu_regs_t* srcCtx = (x86_64_cpu_regs_t*)sig->signalStack;

	mov	rax, QWORD PTR sig$1[rbp]
	mov	rax, QWORD PTR [rax+4]
	mov	QWORD PTR srcCtx$3[rbp], rax

; 211  : 		memcpy(ctx, sig->signalStack, sizeof(x86_64_cpu_regs_t));

	mov	r8d, 160				; 000000a0H
	mov	rax, QWORD PTR sig$1[rbp]
	mov	rdx, QWORD PTR [rax+4]
	mov	rcx, QWORD PTR ctx$2[rbp]
	call	memcpy

; 212  : 		memcpy(&thr->frame, sig->signalState, sizeof(AuThreadFrame));

	mov	rax, QWORD PTR thr$[rbp]
	mov	r8d, 216				; 000000d8H
	mov	rcx, QWORD PTR sig$1[rbp]
	mov	rdx, QWORD PTR [rcx+12]
	mov	rcx, rax
	call	memcpy

; 213  : 		kfree(sig->signalStack);

	mov	rax, QWORD PTR sig$1[rbp]
	mov	rcx, QWORD PTR [rax+4]
	call	kfree

; 214  : 		kfree(sig);

	mov	rcx, QWORD PTR sig$1[rbp]
	call	kfree

; 215  : 		thr->returnableSignal = NULL;

	mov	rax, QWORD PTR thr$[rbp]
	mov	QWORD PTR [rax+633], 0

; 216  : 		thr->pendingSigCount = 0;

	mov	rax, QWORD PTR thr$[rbp]
	mov	BYTE PTR [rax+632], 0

; 217  : 		thr->signalQueue = 0;

	mov	rax, QWORD PTR thr$[rbp]
	mov	QWORD PTR [rax+624], 0

; 218  : 		return;

	jmp	$LN1@page_fault
$LN7@page_fault:

; 219  : 	}
; 220  : 
; 221  : 	AuProcess *proc = NULL;

	mov	QWORD PTR proc$[rbp], 0

; 222  : 	if (thr) {

	cmp	QWORD PTR thr$[rbp], 0
	je	SHORT $LN8@page_fault

; 223  : 		proc = AuProcessFindThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR proc$[rbp], rax

; 224  : 		SeTextOut("Thread name -> %s \r\n", thr->name);

	mov	rax, QWORD PTR thr$[rbp]
	add	rax, 284				; 0000011cH
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_0BF@OEDHGALK@Thread?5name?5?9?$DO?5?$CFs?5?$AN?6@
	call	SeTextOut

; 225  : 		if (proc) {

	cmp	QWORD PTR proc$[rbp], 0
	je	SHORT $LN9@page_fault

; 226  : 			SeTextOut("Process pid -> %d \r\n", proc->proc_id);

	mov	rax, QWORD PTR proc$[rbp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:??_C@_0BF@GPMBGFMG@Process?5pid?5?9?$DO?5?$CFd?5?$AN?6@
	call	SeTextOut

; 227  : 			SeTextOut("Process name -> %s \r\n", proc->name);

	mov	rax, QWORD PTR proc$[rbp]
	add	rax, 4
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_0BG@PCABIPNJ@Process?5name?5?9?$DO?5?$CFs?5?$AN?6@
	call	SeTextOut
$LN9@page_fault:
$LN8@page_fault:
$LN6@page_fault:
$skip$24:

; 228  : 		}
; 229  : 	}
; 230  : 	
; 231  : skip:
; 232  : 	panic("Page Fault !! \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BB@OINBMLCH@Page?5Fault?5?$CB?$CB?5?$AN?6@
	call	?panic@@YAXPEBDZZ			; panic

; 233  : 	uint64_t vaddr_ = (uint64_t)vaddr;

	mov	rax, QWORD PTR vaddr$[rbp]
	mov	QWORD PTR vaddr_$[rbp], rax

; 234  : 	uint64_t vaddr_aligned = VIRT_ADDR_ALIGN(vaddr_);

	mov	rax, QWORD PTR vaddr_$[rbp]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR vaddr_aligned$[rbp], rax

; 235  : 	bool _mapped = false;

	mov	BYTE PTR _mapped$[rbp], 0

; 236  : 	if (present) {

	cmp	DWORD PTR present$[rbp], 0
	je	SHORT $LN10@page_fault

; 237  : 		SeTextOut("Page Not Present \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BE@JLFIKHEK@Page?5Not?5Present?5?$AN?6@
	call	SeTextOut

; 238  : 	}

	jmp	$LN11@page_fault
$LN10@page_fault:

; 239  : 	else if (rw) {

	cmp	DWORD PTR rw$[rbp], 0
	je	$LN12@page_fault

; 240  : 		SeTextOut("Read/Write \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0O@GDFNKNKM@Read?1Write?5?$AN?6@
	call	SeTextOut

; 241  : 		void* phys = AuGetPhysicalAddress(vaddr_aligned);

	mov	rcx, QWORD PTR vaddr_aligned$[rbp]
	call	AuGetPhysicalAddress
	mov	QWORD PTR phys$4[rbp], rax

; 242  : 		AuVPage *vpage = AuVmmngrGetPage(vaddr_aligned, 0, 0);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR vaddr_aligned$[rbp]
	call	AuVmmngrGetPage
	mov	QWORD PTR vpage$5[rbp], rax

; 243  : 		SeTextOut("VPage rw -> %d , user -> %d \r\n", vpage->bits.writable, vpage->bits.user);

	mov	rax, QWORD PTR vpage$5[rbp]
	mov	rax, QWORD PTR [rax]
	shr	rax, 2
	and	rax, 1
	mov	rcx, QWORD PTR vpage$5[rbp]
	mov	rcx, QWORD PTR [rcx]
	shr	rcx, 1
	and	rcx, 1
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, OFFSET FLAT:??_C@_0BP@JEBAMBMP@VPage?5rw?5?9?$DO?5?$CFd?5?0?5user?5?9?$DO?5?$CFd?5?$AN?6@
	call	SeTextOut

; 244  : 		SeTextOut("VPage phys1-> %x, phys2-> %x \r\n", phys, (vpage->bits.page << PAGE_SHIFT));

	mov	rax, QWORD PTR vpage$5[rbp]
	mov	rax, QWORD PTR [rax]
	shr	rax, 12
	and	rax, 268435455				; 0fffffffH
	shl	rax, 12
	mov	r8, rax
	mov	rdx, QWORD PTR phys$4[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0CA@DAKGOMFF@VPage?5phys1?9?$DO?5?$CFx?0?5phys2?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 245  : 	}

	jmp	SHORT $LN13@page_fault
$LN12@page_fault:

; 246  : 	else if (us)

	cmp	DWORD PTR us$[rbp], 0
	je	SHORT $LN14@page_fault

; 247  : 		SeTextOut("User bit not set \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BE@HGFGIJLF@User?5bit?5not?5set?5?$AN?6@
	call	SeTextOut
	jmp	SHORT $LN15@page_fault
$LN14@page_fault:

; 248  : 	else if (resv)

	cmp	DWORD PTR resv$[rbp], 0
	je	SHORT $LN16@page_fault

; 249  : 		SeTextOut("Reserved page \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BB@JGKFHPN@Reserved?5page?5?$AN?6@
	call	SeTextOut
	jmp	SHORT $LN17@page_fault
$LN16@page_fault:

; 250  : 	else if (id)

	cmp	DWORD PTR id$[rbp], 0
	je	SHORT $LN18@page_fault

; 251  : 		SeTextOut("Invalid page \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BA@EFEPIAFE@Invalid?5page?5?$AN?6@
	call	SeTextOut
$LN18@page_fault:
$LN17@page_fault:
$LN15@page_fault:
$LN13@page_fault:
$LN11@page_fault:

; 252  : 	uint64_t diff = (frame->rip - 0x600000);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, 6291456				; 00600000H
	mov	QWORD PTR diff$[rbp], rax

; 253  : 	uint16_t mask = diff & UINT16_MAX;

	mov	rax, QWORD PTR diff$[rbp]
	and	rax, 65535				; 0000ffffH
	mov	WORD PTR mask$[rbp], ax

; 254  : 	uint64_t real_addr = (frame->rip - diff);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rcx, QWORD PTR diff$[rbp]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	mov	QWORD PTR real_addr$[rbp], rax

; 255  : 	SeTextOut("Virtual Address -> %x \r\n", vaddr_);

	mov	rdx, QWORD PTR vaddr_$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BJ@MPFJDHA@Virtual?5Address?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 256  : 	SeTextOut("Virtual Address aligned -> %x \r\n", vaddr_aligned);

	mov	rdx, QWORD PTR vaddr_aligned$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0CB@EGGAFDHO@Virtual?5Address?5aligned?5?9?$DO?5?$CFx?5?$AN@
	call	SeTextOut

; 257  : 	SeTextOut("RSP -> %x \r\n", frame->rsp);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+40]
	lea	rcx, OFFSET FLAT:??_C@_0N@FNJJLAE@RSP?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 258  : 	SeTextOut("RIP -> %x , Actual addr -> %x \r\n", frame->rip, (real_addr + mask));

	movzx	eax, WORD PTR mask$[rbp]
	mov	rcx, QWORD PTR real_addr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:??_C@_0CB@FDCJCAAG@RIP?5?9?$DO?5?$CFx?5?0?5Actual?5addr?5?9?$DO?5?$CFx?5?$AN@
	call	SeTextOut

; 259  : 	SeTextOut("CS -> %x, SS -> %x \r\n", frame->cs, frame->ss);

	mov	rax, QWORD PTR frame$[rbp]
	mov	r8, QWORD PTR [rax+48]
	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+24]
	lea	rcx, OFFSET FLAT:??_C@_0BG@NKPJLLBP@CS?5?9?$DO?5?$CFx?0?5SS?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 260  : 	if (!_mapped) {

	movzx	eax, BYTE PTR _mapped$[rbp]
	test	eax, eax
	jne	SHORT $LN19@page_fault
$LN2@page_fault:

; 261  : 		for (;;);

	jmp	SHORT $LN2@page_fault
$LN19@page_fault:
$LN1@page_fault:

; 262  : 	}
; 263  : }

	lea	rsp, QWORD PTR [rbp+224]
	pop	rbp
	ret	0
?page_fault@@YAX_KPEAX@Z ENDP				; page_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?general_protection_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
frame$ = 0
tv82 = 72
v$ = 96
p$ = 104
?general_protection_fault@@YAX_KPEAX@Z PROC		; general_protection_fault, COMDAT

; 166  : void general_protection_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 167  : 	x64_cli();

	call	x64_cli

; 168  : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 169  : 	panic("Genral Protection Fault \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BL@BCIGLIE@Genral?5Protection?5Fault?5?$AN?6@
	call	?panic@@YAXPEBDZZ			; panic

; 170  : 	SeTextOut("General Protection Fault \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BM@CNDNHPEF@General?5Protection?5Fault?5?$AN?6@
	call	SeTextOut

; 171  : 	SeTextOut("__PROCESSOR TRACE__ \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BH@BHCKDMDH@__PROCESSOR?5TRACE__?5?$AN?6@
	call	SeTextOut

; 172  : 	SeTextOut("RIP -> %x \r\n", frame->rip);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:??_C@_0N@ODPGJOJJ@RIP?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 173  : 	SeTextOut("Stack -> %x \r\n", frame->rsp);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+40]
	lea	rcx, OFFSET FLAT:??_C@_0P@BEIIBHMJ@Stack?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 174  : 	SeTextOut("RFLAGS -> %x \r\n", frame->rflags);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:??_C@_0BA@LFJDMIBB@RFLAGS?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 175  : 	SeTextOut("CS -> %x, SS -> %x \r\n", frame->cs, frame->ss);

	mov	rax, QWORD PTR frame$[rbp]
	mov	r8, QWORD PTR [rax+48]
	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+24]
	lea	rcx, OFFSET FLAT:??_C@_0BG@NKPJLLBP@CS?5?9?$DO?5?$CFx?0?5SS?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 176  : 	SeTextOut("Current thread ->id %d , %s\r\n", AuGetCurrentThread()->id, AuGetCurrentThread()->name);

	call	AuGetCurrentThread
	add	rax, 284				; 0000011cH
	mov	QWORD PTR tv82[rbp], rax
	call	AuGetCurrentThread
	movzx	eax, WORD PTR [rax+301]
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r8, rcx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0BO@DLPLGGDB@Current?5thread?5?9?$DOid?5?$CFd?5?0?5?$CFs?$AN?6@
	call	SeTextOut
$LN2@general_pr:

; 177  : 	for (;;);

	jmp	SHORT $LN2@general_pr

; 178  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?general_protection_fault@@YAX_KPEAX@Z ENDP		; general_protection_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?stack_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
frame$ = 0
tv81 = 72
v$ = 96
p$ = 104
?stack_fault@@YAX_KPEAX@Z PROC				; stack_fault, COMDAT

; 151  : void stack_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 152  : 	x64_cli();

	call	x64_cli

; 153  : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 154  : 	panic("\nStack Fault at ");

	lea	rcx, OFFSET FLAT:??_C@_0BB@HALEMCKC@?6Stack?5Fault?5at?5@
	call	?panic@@YAXPEBDZZ			; panic

; 155  : 	SeTextOut("__PROCESSOR TRACE__ \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BH@BHCKDMDH@__PROCESSOR?5TRACE__?5?$AN?6@
	call	SeTextOut

; 156  : 	SeTextOut("RIP -> %x \r\n", frame->rip);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:??_C@_0N@ODPGJOJJ@RIP?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 157  : 	SeTextOut("Stack -> %x \r\n", frame->rsp);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+40]
	lea	rcx, OFFSET FLAT:??_C@_0P@BEIIBHMJ@Stack?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 158  : 	SeTextOut("RFLAGS -> %x \r\n", frame->rflags);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:??_C@_0BA@LFJDMIBB@RFLAGS?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 159  : 	SeTextOut("CS -> %x, SS -> %x \r\n", frame->cs, frame->ss);

	mov	rax, QWORD PTR frame$[rbp]
	mov	r8, QWORD PTR [rax+48]
	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+24]
	lea	rcx, OFFSET FLAT:??_C@_0BG@NKPJLLBP@CS?5?9?$DO?5?$CFx?0?5SS?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 160  : 	SeTextOut("Current thread ->id %d , %s\r\n", AuGetCurrentThread()->id, AuGetCurrentThread()->name);

	call	AuGetCurrentThread
	add	rax, 284				; 0000011cH
	mov	QWORD PTR tv81[rbp], rax
	call	AuGetCurrentThread
	movzx	eax, WORD PTR [rax+301]
	mov	rcx, QWORD PTR tv81[rbp]
	mov	r8, rcx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0BO@DLPLGGDB@Current?5thread?5?9?$DOid?5?$CFd?5?0?5?$CFs?$AN?6@
	call	SeTextOut
$LN2@stack_faul:

; 161  : 	for (;;);

	jmp	SHORT $LN2@stack_faul

; 162  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?stack_fault@@YAX_KPEAX@Z ENDP				; stack_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?no_segment_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?no_segment_fault@@YAX_KPEAX@Z PROC			; no_segment_fault, COMDAT

; 144  : void no_segment_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 145  : 	x64_cli();

	call	x64_cli

; 146  : 	panic("\nNo Segment Fault");

	lea	rcx, OFFSET FLAT:??_C@_0BC@EJLFDPKP@?6No?5Segment?5Fault@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@no_segment:

; 147  : 	for (;;);

	jmp	SHORT $LN2@no_segment

; 148  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?no_segment_fault@@YAX_KPEAX@Z ENDP			; no_segment_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?invalid_tss_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?invalid_tss_fault@@YAX_KPEAX@Z PROC			; invalid_tss_fault, COMDAT

; 137  : void invalid_tss_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 138  : 	x64_cli();

	call	x64_cli

; 139  : 	panic("\nInvalid TSS Fault ");

	lea	rcx, OFFSET FLAT:??_C@_0BE@CHCACOMN@?6Invalid?5TSS?5Fault?5@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@invalid_ts:

; 140  : 	for (;;);

	jmp	SHORT $LN2@invalid_ts

; 141  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?invalid_tss_fault@@YAX_KPEAX@Z ENDP			; invalid_tss_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?double_fault_abort@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?double_fault_abort@@YAX_KPEAX@Z PROC			; double_fault_abort, COMDAT

; 130  : void double_fault_abort(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 131  : 	x64_cli();

	call	x64_cli

; 132  : 	panic("\nDouble Fault Abort");

	lea	rcx, OFFSET FLAT:??_C@_0BE@NLNKFOBM@?6Double?5Fault?5Abort@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@double_fau:

; 133  : 	for (;;);

	jmp	SHORT $LN2@double_fau

; 134  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?double_fault_abort@@YAX_KPEAX@Z ENDP			; double_fault_abort
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?no_device_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?no_device_fault@@YAX_KPEAX@Z PROC			; no_device_fault, COMDAT

; 123  : void no_device_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 124  : 	x64_cli();

	call	x64_cli

; 125  : 	panic("\nNo Device Fault");

	lea	rcx, OFFSET FLAT:??_C@_0BB@DOMGDLHF@?6No?5Device?5Fault@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@no_device_:

; 126  : 	for (;;);

	jmp	SHORT $LN2@no_device_

; 127  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?no_device_fault@@YAX_KPEAX@Z ENDP			; no_device_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?invalid_opcode_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
frame$ = 0
v$ = 96
p$ = 104
?invalid_opcode_fault@@YAX_KPEAX@Z PROC			; invalid_opcode_fault, COMDAT

; 108  : void invalid_opcode_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 109  : 	x64_cli();

	call	x64_cli

; 110  : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 111  : 	panic("Invalid Opcode Fault \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BI@DJAKOHAL@Invalid?5Opcode?5Fault?5?$AN?6@
	call	?panic@@YAXPEBDZZ			; panic

; 112  : 	SeTextOut("Invalid Opcode Fault \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BI@DJAKOHAL@Invalid?5Opcode?5Fault?5?$AN?6@
	call	SeTextOut

; 113  : 	SeTextOut("__PROCESSOR TRACE__ \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BH@BHCKDMDH@__PROCESSOR?5TRACE__?5?$AN?6@
	call	SeTextOut

; 114  : 	SeTextOut("RIP -> %x\n", frame->rip);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:??_C@_0L@DLBLLKFH@RIP?5?9?$DO?5?$CFx?6@
	call	SeTextOut

; 115  : 	SeTextOut("Stack -> %x\n", frame->rsp);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+40]
	lea	rcx, OFFSET FLAT:??_C@_0N@IJHHEMAG@Stack?5?9?$DO?5?$CFx?6@
	call	SeTextOut

; 116  : 	SeTextOut("RFLAGS -> %x\n", frame->rflags);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:??_C@_0O@HPBDGHPH@RFLAGS?5?9?$DO?5?$CFx?6@
	call	SeTextOut

; 117  : 	SeTextOut("CS -> %x\n", frame->cs);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+24]
	lea	rcx, OFFSET FLAT:??_C@_09LNGLKLCE@CS?5?9?$DO?5?$CFx?6@
	call	SeTextOut

; 118  : 	SeTextOut("SS -> %x\n", frame->ss);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+48]
	lea	rcx, OFFSET FLAT:??_C@_09JKMFCKMM@SS?5?9?$DO?5?$CFx?6@
	call	SeTextOut
$LN2@invalid_op:

; 119  : 	for (;;);

	jmp	SHORT $LN2@invalid_op

; 120  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?invalid_opcode_fault@@YAX_KPEAX@Z ENDP			; invalid_opcode_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?bounds_check_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?bounds_check_fault@@YAX_KPEAX@Z PROC			; bounds_check_fault, COMDAT

; 101  : void bounds_check_fault(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 102  : 	x64_cli();

	call	x64_cli

; 103  : 	panic("\nBound Check Fault");

	lea	rcx, OFFSET FLAT:??_C@_0BD@OIHLKGEP@?6Bound?5Check?5Fault@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@bounds_che:

; 104  : 	for (;;);

	jmp	SHORT $LN2@bounds_che

; 105  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?bounds_check_fault@@YAX_KPEAX@Z ENDP			; bounds_check_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?overflow_trap@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?overflow_trap@@YAX_KPEAX@Z PROC			; overflow_trap, COMDAT

; 94   : void overflow_trap(size_t v, void* p){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 95   : 	x64_cli();

	call	x64_cli

; 96   : 	panic("\nOverflow Trap");

	lea	rcx, OFFSET FLAT:??_C@_0P@HPCJBHIE@?6Overflow?5Trap@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@overflow_t:

; 97   : 	for (;;);

	jmp	SHORT $LN2@overflow_t

; 98   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?overflow_trap@@YAX_KPEAX@Z ENDP			; overflow_trap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?breakpoint_trap@@YAX_KPEAX@Z
_TEXT	SEGMENT
vector$ = 80
param$ = 88
?breakpoint_trap@@YAX_KPEAX@Z PROC			; breakpoint_trap, COMDAT

; 87   : void breakpoint_trap(size_t vector, void* param){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 88   : 	x64_cli();

	call	x64_cli

; 89   : 	panic("\nBreakpoint Trap");

	lea	rcx, OFFSET FLAT:??_C@_0BB@BPIIODKN@?6Breakpoint?5Trap@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@breakpoint:

; 90   : 	for (;;);

	jmp	SHORT $LN2@breakpoint

; 91   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?breakpoint_trap@@YAX_KPEAX@Z ENDP			; breakpoint_trap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?nmi_trap@@YAX_KPEAX@Z
_TEXT	SEGMENT
vector$ = 80
param$ = 88
?nmi_trap@@YAX_KPEAX@Z PROC				; nmi_trap, COMDAT

; 79   : void nmi_trap(size_t vector, void* param){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 80   : 	x64_cli();

	call	x64_cli

; 81   : 	panic("\nNMI [Non-Muskable-Interrupt] Trap");

	lea	rcx, OFFSET FLAT:??_C@_0CD@CODJEILI@?6NMI?5?$FLNon?9Muskable?9Interrupt?$FN?5T@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@nmi_trap:

; 82   : 	for (;;);

	jmp	SHORT $LN2@nmi_trap

; 83   : 
; 84   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?nmi_trap@@YAX_KPEAX@Z ENDP				; nmi_trap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?single_step_trap@@YAX_KPEAX@Z
_TEXT	SEGMENT
frame$ = 0
vector$ = 96
param$ = 104
?single_step_trap@@YAX_KPEAX@Z PROC			; single_step_trap, COMDAT

; 72   : void single_step_trap(size_t vector, void* param) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 	x64_cli();

	call	x64_cli

; 74   : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)param;

	mov	rax, QWORD PTR param$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 75   : 	panic("\nSingle Step Trap");

	lea	rcx, OFFSET FLAT:??_C@_0BC@HFIDFDNB@?6Single?5Step?5Trap@
	call	?panic@@YAXPEBDZZ			; panic
$LN2@single_ste:

; 76   : 	for (;;);

	jmp	SHORT $LN2@single_ste

; 77   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?single_step_trap@@YAX_KPEAX@Z ENDP			; single_step_trap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?divide_by_zero_fault@@YAX_KPEAX@Z
_TEXT	SEGMENT
frame$ = 0
vector$ = 96
param$ = 104
?divide_by_zero_fault@@YAX_KPEAX@Z PROC			; divide_by_zero_fault, COMDAT

; 59   : void divide_by_zero_fault(size_t vector, void* param) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 60   : 	x64_cli();

	call	x64_cli

; 61   : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)param;

	mov	rax, QWORD PTR param$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 62   : 	panic("\nDivide by 0");

	lea	rcx, OFFSET FLAT:??_C@_0N@EBPCEKFE@?6Divide?5by?50@
	call	?panic@@YAXPEBDZZ			; panic

; 63   : 	SeTextOut("Divide by 0 \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0P@KPEOJEOL@Divide?5by?50?5?$AN?6@
	call	SeTextOut

; 64   : 	SeTextOut("__PROCESSOR_DATA__ \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@OPGPDIMM@__PROCESSOR_DATA__?5?$AN?6@
	call	SeTextOut

; 65   : 	SeTextOut("RIP -> %x \r\n", frame->rip);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:??_C@_0N@ODPGJOJJ@RIP?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 66   : 	SeTextOut("RSP -> %x \r\n", frame->rsp);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+40]
	lea	rcx, OFFSET FLAT:??_C@_0N@FNJJLAE@RSP?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut

; 67   : 	SeTextOut("RFLAGS -> %x \r\n", frame->rflags);

	mov	rax, QWORD PTR frame$[rbp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:??_C@_0BA@LFJDMIBB@RFLAGS?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut
$LN2@divide_by_:

; 68   : 
; 69   : 	for (;;);

	jmp	SHORT $LN2@divide_by_

; 70   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?divide_by_zero_fault@@YAX_KPEAX@Z ENDP			; divide_by_zero_fault
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?panic@@YAXPEBDZZ
_TEXT	SEGMENT
msg$ = 80
?panic@@YAXPEBDZZ PROC					; panic, COMDAT

; 49   : void panic(const char* msg, ...) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 50   : 	SeTextOut("\r\n ***ARCH x86_64 : Kernel Panic!!! *** \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0CL@KIOOCGPI@?$AN?6?5?$CK?$CK?$CKARCH?5x86_64?5?3?5Kernel?5Pani@
	call	SeTextOut

; 51   : 	SeTextOut("[Aurora Kernel]: We are sorry to say that, a processor invalid exception has occured \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0FI@IAKHKFBH@?$FLAurora?5Kernel?$FN?3?5We?5are?5sorry?5t@
	call	SeTextOut

; 52   : 	SeTextOut("[Aurora Kernel]: please inform it to the master of the kernel \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0EB@GBLAIMDC@?$FLAurora?5Kernel?$FN?3?5please?5inform?5@
	call	SeTextOut

; 53   : 	SeTextOut("[Aurora Kernel]: Below is the code of exception \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0DD@KEEKPGHM@?$FLAurora?5Kernel?$FN?3?5Below?5is?5the?5c@
	call	SeTextOut

; 54   : 	SeTextOut("[Aurora Kernel]: Current Processor id -> %d \r\n", AuPerCPUGetCpuID());

	call	?AuPerCPUGetCpuID@@YAEXZ		; AuPerCPUGetCpuID
	movzx	eax, al
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CP@DDGNNPIN@?$FLAurora?5Kernel?$FN?3?5Current?5Proces@
	call	SeTextOut

; 55   : 	SeTextOut("[Aurora Kernel]: If anything not working, try rebooting/Restarting the system \r\n");

	lea	rcx, OFFSET FLAT:??_C@_0FB@CKOCEJAF@?$FLAurora?5Kernel?$FN?3?5If?5anything?5no@
	call	SeTextOut

; 56   : 	SeTextOut(" %s \r\n", msg);

	mov	rdx, QWORD PTR msg$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06BGDIMDGA@?5?$CFs?5?$AN?6@
	call	SeTextOut

; 57   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?panic@@YAXPEBDZZ ENDP					; panic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_exception.cpp
;	COMDAT ?x86_64_exception_init@@YAXXZ
_TEXT	SEGMENT
?x86_64_exception_init@@YAXXZ PROC			; x86_64_exception_init, COMDAT

; 305  : void x86_64_exception_init() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3B5C682D_x86_64_exception@cpp
	call	__CheckForDebuggerJustMyCode

; 306  : 	setvect(0, divide_by_zero_fault);

	lea	rdx, OFFSET FLAT:?divide_by_zero_fault@@YAX_KPEAX@Z ; divide_by_zero_fault
	xor	ecx, ecx
	call	setvect

; 307  : 	setvect(1, single_step_trap);

	lea	rdx, OFFSET FLAT:?single_step_trap@@YAX_KPEAX@Z ; single_step_trap
	mov	ecx, 1
	call	setvect

; 308  : 	setvect(2, nmi_trap);

	lea	rdx, OFFSET FLAT:?nmi_trap@@YAX_KPEAX@Z	; nmi_trap
	mov	ecx, 2
	call	setvect

; 309  : 	setvect(3, breakpoint_trap);

	lea	rdx, OFFSET FLAT:?breakpoint_trap@@YAX_KPEAX@Z ; breakpoint_trap
	mov	ecx, 3
	call	setvect

; 310  : 	setvect(4, overflow_trap);

	lea	rdx, OFFSET FLAT:?overflow_trap@@YAX_KPEAX@Z ; overflow_trap
	mov	ecx, 4
	call	setvect

; 311  : 	setvect(5, bounds_check_fault);

	lea	rdx, OFFSET FLAT:?bounds_check_fault@@YAX_KPEAX@Z ; bounds_check_fault
	mov	ecx, 5
	call	setvect

; 312  : 	setvect(6, invalid_opcode_fault);

	lea	rdx, OFFSET FLAT:?invalid_opcode_fault@@YAX_KPEAX@Z ; invalid_opcode_fault
	mov	ecx, 6
	call	setvect

; 313  : 	setvect(7, no_device_fault);

	lea	rdx, OFFSET FLAT:?no_device_fault@@YAX_KPEAX@Z ; no_device_fault
	mov	ecx, 7
	call	setvect

; 314  : 	setvect(8, double_fault_abort);

	lea	rdx, OFFSET FLAT:?double_fault_abort@@YAX_KPEAX@Z ; double_fault_abort
	mov	ecx, 8
	call	setvect

; 315  : 	setvect(10, invalid_tss_fault);

	lea	rdx, OFFSET FLAT:?invalid_tss_fault@@YAX_KPEAX@Z ; invalid_tss_fault
	mov	ecx, 10
	call	setvect

; 316  : 	setvect(11, no_segment_fault);

	lea	rdx, OFFSET FLAT:?no_segment_fault@@YAX_KPEAX@Z ; no_segment_fault
	mov	ecx, 11
	call	setvect

; 317  : 	setvect(12, stack_fault);

	lea	rdx, OFFSET FLAT:?stack_fault@@YAX_KPEAX@Z ; stack_fault
	mov	ecx, 12
	call	setvect

; 318  : 	setvect(13, general_protection_fault);

	lea	rdx, OFFSET FLAT:?general_protection_fault@@YAX_KPEAX@Z ; general_protection_fault
	mov	ecx, 13
	call	setvect

; 319  : 	setvect(14, page_fault);

	lea	rdx, OFFSET FLAT:?page_fault@@YAX_KPEAX@Z ; page_fault
	mov	ecx, 14
	call	setvect

; 320  : 	setvect(16, fpu_fault);

	lea	rdx, OFFSET FLAT:?fpu_fault@@YAX_KPEAX@Z ; fpu_fault
	mov	ecx, 16
	call	setvect

; 321  : 	setvect(17, alignment_check_fault);

	lea	rdx, OFFSET FLAT:?alignment_check_fault@@YAX_KPEAX@Z ; alignment_check_fault
	mov	ecx, 17
	call	setvect

; 322  : 	setvect(18, machine_check_abort);

	lea	rdx, OFFSET FLAT:?machine_check_abort@@YAX_KPEAX@Z ; machine_check_abort
	mov	ecx, 18
	call	setvect

; 323  : 	setvect(19, simd_fpu_fault);

	lea	rdx, OFFSET FLAT:?simd_fpu_fault@@YAX_KPEAX@Z ; simd_fpu_fault
	mov	ecx, 19
	call	setvect

; 324  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?x86_64_exception_init@@YAXXZ ENDP			; x86_64_exception_init
_TEXT	ENDS
END
