; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?drivers@@3PAPEAU_aurora_driver_@@A		; drivers
PUBLIC	?au_devices@@3PAPEAU_aurora_device_@@A		; au_devices
_BSS	SEGMENT
?drivers@@3PAPEAU_aurora_driver_@@A DQ 0100H DUP (?)	; drivers
?au_devices@@3PAPEAU_aurora_device_@@A DQ 0100H DUP (?)	; au_devices
driver_class_unique_id DD 01H DUP (?)
	ALIGN	8

driver_load_base DQ 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG4233	DB	'Drivername -> %s ', 0dH, 0aH, 00H
$SG4268	DB	'/', 00H
	ORG $+2
$SG4254	DB	'AuDriverMain', 00H
	ORG $+3
$SG4257	DB	'AuDriverUnload', 00H
	ORG $+1
$SG4263	DB	'[Aurora]: Initializing drivers, please wait... ', 0aH, 00H
	ORG $+7
$SG4270	DB	'/audrv.cnf', 00H
CONST	ENDS
PUBLIC	?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; AuDrvMngrInitialize
PUBLIC	?AuRequestDriverId@@YAIXZ			; AuRequestDriverId
PUBLIC	?AuDecreaseDriverCount@@YAXXZ			; AuDecreaseDriverCount
PUBLIC	?AuIncreaseDriverCount@@YAXXZ			; AuIncreaseDriverCount
PUBLIC	?AuGetConfEntry@@YAPEADIIPEAEH@Z		; AuGetConfEntry
PUBLIC	?AuCreateDriverInstance@@YAXPEAD@Z		; AuCreateDriverInstance
PUBLIC	?AuGetDriverName@@YAXIIPEAEH@Z			; AuGetDriverName
PUBLIC	?AuDriverLoad@@YAXPEADPEAU_aurora_driver_@@@Z	; AuDriverLoad
EXTRN	AuVFSOpen:PROC
EXTRN	AuVFSFind:PROC
EXTRN	AuVFSNodeReadBlock:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	P2V:PROC
EXTRN	V2P:PROC
EXTRN	AuMapPage:PROC
EXTRN	strcpy:PROC
EXTRN	strchr:PROC
EXTRN	memset:PROC
EXTRN	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z:PROC	; AuGetProcAddress
EXTRN	?AuKernelLinkDLL@@YAXPEAX@Z:PROC		; AuKernelLinkDLL
EXTRN	?atoi@@YAHPEBD@Z:PROC				; atoi
EXTRN	printf:PROC
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	?AuPCIEGetDevice@@YA_KGHHH@Z:PROC		; AuPCIEGetDevice
EXTRN	AuPCIERead:PROC
EXTRN	SeTextOut:PROC
_BSS	SEGMENT
_dev_count_ DD	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD imagerel $LN21
	DD	imagerel $LN21+750
	DD	imagerel $unwind$?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z
$pdata$?AuRequestDriverId@@YAIXZ DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?AuRequestDriverId@@YAIXZ
$pdata$?AuGetConfEntry@@YAPEADIIPEAEH@Z DD imagerel $LN21
	DD	imagerel $LN21+596
	DD	imagerel $unwind$?AuGetConfEntry@@YAPEADIIPEAEH@Z
$pdata$?AuCreateDriverInstance@@YAXPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?AuCreateDriverInstance@@YAXPEAD@Z
$pdata$?AuGetDriverName@@YAXIIPEAEH@Z DD imagerel $LN9
	DD	imagerel $LN9+251
	DD	imagerel $unwind$?AuGetDriverName@@YAXIIPEAEH@Z
$pdata$?AuDriverLoad@@YAXPEADPEAU_aurora_driver_@@@Z DD imagerel $LN5
	DD	imagerel $LN5+438
	DD	imagerel $unwind$?AuDriverLoad@@YAXPEADPEAU_aurora_driver_@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD 020c01H
	DD	015010cH
$unwind$?AuRequestDriverId@@YAIXZ DD 010401H
	DD	02204H
$unwind$?AuGetConfEntry@@YAPEADIIPEAEH@Z DD 011601H
	DD	0c216H
$unwind$?AuCreateDriverInstance@@YAXPEAD@Z DD 010901H
	DD	06209H
$unwind$?AuGetDriverName@@YAXIIPEAEH@Z DD 011601H
	DD	0c216H
$unwind$?AuDriverLoad@@YAXPEADPEAU_aurora_driver_@@@Z DD 010e01H
	DD	0c20eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
next_base_offset$ = 32
file$ = 40
buffer$ = 48
block$1 = 56
fsys$ = 64
virtual_base$ = 72
entry_addr$ = 80
unload_addr$ = 88
filename$ = 112
driver$ = 120
?AuDriverLoad@@YAXPEADPEAU_aurora_driver_@@@Z PROC	; AuDriverLoad

; 206  : void AuDriverLoad(char* filename, AuDriver *driver) {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 207  : 	int next_base_offset = 0;

	mov	DWORD PTR next_base_offset$[rsp], 0

; 208  : 	uint64_t* virtual_base = (uint64_t*)driver_load_base;

	mov	rax, QWORD PTR driver_load_base
	mov	QWORD PTR virtual_base$[rsp], rax

; 209  : 
; 210  : 	AuVFSNode* fsys = AuVFSFind(filename);

	mov	rcx, QWORD PTR filename$[rsp]
	call	AuVFSFind
	mov	QWORD PTR fsys$[rsp], rax

; 211  : 	AuVFSNode *file = AuVFSOpen(filename);

	mov	rcx, QWORD PTR filename$[rsp]
	call	AuVFSOpen
	mov	QWORD PTR file$[rsp], rax

; 212  : 	uint64_t* buffer = (uint64_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR buffer$[rsp], rax

; 213  : 	memset(buffer, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memset

; 214  : 	AuVFSNodeReadBlock(fsys,file, buffer);

	mov	r8, QWORD PTR buffer$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	AuVFSNodeReadBlock

; 215  : 	AuMapPage((uint64_t)buffer, driver_load_base, 0);

	xor	r8d, r8d
	mov	rdx, QWORD PTR driver_load_base
	mov	rcx, QWORD PTR buffer$[rsp]
	call	AuMapPage

; 216  : 	next_base_offset = 1;

	mov	DWORD PTR next_base_offset$[rsp], 1
$LN2@AuDriverLo:

; 217  : 
; 218  : 
; 219  : 	while (file->eof != 1) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, BYTE PTR [rax+36]
	cmp	eax, 1
	je	SHORT $LN1@AuDriverLo

; 220  : 		uint64_t* block = (uint64_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR block$1[rsp], rax

; 221  : 		memset(block, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR block$1[rsp]
	call	memset

; 222  : 		AuVFSNodeReadBlock(fsys,file, block);

	mov	r8, QWORD PTR block$1[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	AuVFSNodeReadBlock

; 223  : 		AuMapPage((uint64_t)block, (driver_load_base + next_base_offset * 4096), 0);

	imul	eax, DWORD PTR next_base_offset$[rsp], 4096 ; 00001000H
	cdqe
	mov	rcx, QWORD PTR driver_load_base
	add	rcx, rax
	mov	rax, rcx
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR block$1[rsp]
	call	AuMapPage

; 224  : 		next_base_offset++;

	mov	eax, DWORD PTR next_base_offset$[rsp]
	inc	eax
	mov	DWORD PTR next_base_offset$[rsp], eax

; 225  : 	}

	jmp	SHORT $LN2@AuDriverLo
$LN1@AuDriverLo:

; 226  : 
; 227  : 
; 228  : 	void* entry_addr = AuGetProcAddress((void*)driver_load_base, "AuDriverMain");

	lea	rdx, OFFSET FLAT:$SG4254
	mov	rcx, QWORD PTR driver_load_base
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR entry_addr$[rsp], rax

; 229  : 	void* unload_addr = AuGetProcAddress((void*)driver_load_base, "AuDriverUnload");

	lea	rdx, OFFSET FLAT:$SG4257
	mov	rcx, QWORD PTR driver_load_base
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR unload_addr$[rsp], rax

; 230  : 
; 231  : 	AuKernelLinkDLL(virtual_base);

	mov	rcx, QWORD PTR virtual_base$[rsp]
	call	?AuKernelLinkDLL@@YAXPEAX@Z		; AuKernelLinkDLL

; 232  : 	driver->entry = (au_drv_entry)entry_addr;

	mov	rax, QWORD PTR driver$[rsp]
	mov	rcx, QWORD PTR entry_addr$[rsp]
	mov	QWORD PTR [rax+51], rcx

; 233  : 	driver->unload = (au_drv_unload)unload_addr;

	mov	rax, QWORD PTR driver$[rsp]
	mov	rcx, QWORD PTR unload_addr$[rsp]
	mov	QWORD PTR [rax+59], rcx

; 234  : 	driver->base = AU_DRIVER_BASE_START;

	mov	rax, QWORD PTR driver$[rsp]
	mov	rcx, -70368739983360			; ffffc00000400000H
	mov	QWORD PTR [rax+35], rcx

; 235  : 	driver->end = driver->base + file->size;

	mov	rax, QWORD PTR file$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR driver$[rsp]
	add	rax, QWORD PTR [rcx+35]
	mov	rcx, QWORD PTR driver$[rsp]
	mov	QWORD PTR [rcx+43], rax

; 236  : 	driver->present = true;

	mov	rax, QWORD PTR driver$[rsp]
	mov	BYTE PTR [rax+34], 1

; 237  : 	driver_load_base = driver_load_base + next_base_offset * 4096;

	imul	eax, DWORD PTR next_base_offset$[rsp], 4096 ; 00001000H
	cdqe
	mov	rcx, QWORD PTR driver_load_base
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR driver_load_base, rax

; 238  : 
; 239  : 	kfree(file);

	mov	rcx, QWORD PTR file$[rsp]
	call	kfree

; 240  : }

	add	rsp, 104				; 00000068H
	ret	0
?AuDriverLoad@@YAXPEADPEAU_aurora_driver_@@@Z ENDP	; AuDriverLoad
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
i$ = 32
p$ = 40
offset$ = 48
drivername$ = 56
vendor_id$ = 112
device_id$ = 120
buffer$ = 128
entryoff$ = 136
?AuGetDriverName@@YAXIIPEAEH@Z PROC			; AuGetDriverName

; 172  : void AuGetDriverName(uint32_t vendor_id, uint32_t device_id, uint8_t* buffer, int entryoff) {

$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 104				; 00000068H

; 173  : 
; 174  : 	/* Get the entry offset for required device driver */
; 175  : 	char* offset = AuGetConfEntry(vendor_id, device_id, buffer, entryoff);

	mov	r9d, DWORD PTR entryoff$[rsp]
	mov	r8, QWORD PTR buffer$[rsp]
	mov	edx, DWORD PTR device_id$[rsp]
	mov	ecx, DWORD PTR vendor_id$[rsp]
	call	?AuGetConfEntry@@YAPEADIIPEAEH@Z	; AuGetConfEntry
	mov	QWORD PTR offset$[rsp], rax

; 176  : 
; 177  : 	if (offset == NULL)

	cmp	QWORD PTR offset$[rsp], 0
	jne	SHORT $LN6@AuGetDrive

; 178  : 		return;

	jmp	$LN7@AuGetDrive
$LN6@AuGetDrive:

; 179  : 	char *p = strchr(offset, ']');

	mov	edx, 93					; 0000005dH
	mov	rcx, QWORD PTR offset$[rsp]
	call	strchr
	mov	QWORD PTR p$[rsp], rax

; 180  : 	if (p)

	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN5@AuGetDrive

; 181  : 		p++;

	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN5@AuGetDrive:

; 182  : 
; 183  : 	/* get the driver path */
; 184  : 	char drivername[32];
; 185  : 	memset(drivername, 0, 32);

	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR drivername$[rsp]
	call	memset

; 186  : 	int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 187  : 	for (i = 0; i < 32; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@AuGetDrive
$LN3@AuGetDrive:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@AuGetDrive:
	cmp	DWORD PTR i$[rsp], 32			; 00000020H
	jge	SHORT $LN2@AuGetDrive

; 188  : 		if (p[i] == '|')

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 124				; 0000007cH
	jne	SHORT $LN1@AuGetDrive

; 189  : 			break;

	jmp	SHORT $LN2@AuGetDrive
$LN1@AuGetDrive:

; 190  : 		drivername[i] = p[i];

	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR drivername$[rsp+rcx], al

; 191  : 	}

	jmp	SHORT $LN3@AuGetDrive
$LN2@AuGetDrive:

; 192  : 
; 193  : 	SeTextOut("Drivername -> %s \r\n", drivername);

	lea	rdx, QWORD PTR drivername$[rsp]
	lea	rcx, OFFSET FLAT:$SG4233
	call	SeTextOut

; 194  : 
; 195  : 	drivername[i] = 0;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	BYTE PTR drivername$[rsp+rax], 0

; 196  : 
; 197  : 	AuCreateDriverInstance(drivername);

	lea	rcx, QWORD PTR drivername$[rsp]
	call	?AuCreateDriverInstance@@YAXPEAD@Z	; AuCreateDriverInstance
$LN7@AuGetDrive:

; 198  : 	return;
; 199  : }

	add	rsp, 104				; 00000068H
	ret	0
?AuGetDriverName@@YAXIIPEAEH@Z ENDP			; AuGetDriverName
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
driver$ = 32
drivername$ = 64
?AuCreateDriverInstance@@YAXPEAD@Z PROC			; AuCreateDriverInstance

; 156  : void AuCreateDriverInstance(char* drivername) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 157  : 	AuDriver *driver = (AuDriver*)kmalloc(sizeof(AuDriver));

	mov	ecx, 67					; 00000043H
	call	kmalloc
	mov	QWORD PTR driver$[rsp], rax

; 158  : 	memset(driver, 0, sizeof(AuDriver));

	mov	r8d, 67					; 00000043H
	xor	edx, edx
	mov	rcx, QWORD PTR driver$[rsp]
	call	memset

; 159  : 	strcpy(driver->name, drivername);

	mov	rax, QWORD PTR driver$[rsp]
	add	rax, 2
	mov	rdx, QWORD PTR drivername$[rsp]
	mov	rcx, rax
	call	strcpy

; 160  : 	driver->id = AuRequestDriverId();

	call	?AuRequestDriverId@@YAIXZ		; AuRequestDriverId
	mov	rcx, QWORD PTR driver$[rsp]
	mov	BYTE PTR [rcx], al

; 161  : 	driver->present = false;

	mov	rax, QWORD PTR driver$[rsp]
	mov	BYTE PTR [rax+34], 0

; 162  : 	drivers[driver->id] = driver;

	mov	rax, QWORD PTR driver$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?drivers@@3PAPEAU_aurora_driver_@@A ; drivers
	mov	rdx, QWORD PTR driver$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 163  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuCreateDriverInstance@@YAXPEAD@Z ENDP			; AuCreateDriverInstance
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
num$ = 32
p$ = 40
i$ = 48
i$1 = 52
fbuf$ = 56
devid$ = 64
entret$ = 68
venid$ = 72
entry_num$ = 76
pi$ = 80
vendor_id$ = 112
device_id$ = 120
buffer$ = 128
entryoff$ = 136
?AuGetConfEntry@@YAPEADIIPEAEH@Z PROC			; AuGetConfEntry

; 80   : char* AuGetConfEntry(uint32_t vendor_id, uint32_t device_id, uint8_t* buffer, int entryoff) {

$LN21:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 104				; 00000068H
$re$22:

; 81   : re:
; 82   : 	int entry_num = entryoff;

	mov	eax, DWORD PTR entryoff$[rsp]
	mov	DWORD PTR entry_num$[rsp], eax

; 83   : 	char* fbuf = (char*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR fbuf$[rsp], rax
$search$23:

; 84   : 	/* Check the entry for the device */
; 85   : search:
; 86   : 	char* p = strchr(fbuf, '(');

	mov	edx, 40					; 00000028H
	mov	rcx, QWORD PTR fbuf$[rsp]
	call	strchr
	mov	QWORD PTR p$[rsp], rax

; 87   : 	if (p) {

	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN18@AuGetConfE

; 88   : 		p++;

	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax

; 89   : 		fbuf++;

	mov	rax, QWORD PTR fbuf$[rsp]
	inc	rax
	mov	QWORD PTR fbuf$[rsp], rax
$LN18@AuGetConfE:

; 90   : 	}
; 91   : 	int entret = atoi(p);

	mov	rcx, QWORD PTR p$[rsp]
	call	?atoi@@YAHPEBD@Z			; atoi
	mov	DWORD PTR entret$[rsp], eax

; 92   : 
; 93   : 	/* Check for last entry '(0)' it indicates that
; 94   : 	* there is no more entry
; 95   : 	*/
; 96   : 	if (entret == 0) {

	cmp	DWORD PTR entret$[rsp], 0
	jne	SHORT $LN17@AuGetConfE

; 97   : 		return 0;

	xor	eax, eax
	jmp	$LN19@AuGetConfE
$LN17@AuGetConfE:

; 98   : 	}
; 99   : 
; 100  : 	if (entret != entry_num)

	mov	eax, DWORD PTR entry_num$[rsp]
	cmp	DWORD PTR entret$[rsp], eax
	je	SHORT $LN16@AuGetConfE

; 101  : 		goto search;

	jmp	SHORT $search$23
$LN16@AuGetConfE:

; 102  : 
; 103  : 
; 104  : 	/* Search for vendor id of the product */
; 105  : 	fbuf = p;

	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR fbuf$[rsp], rax

; 106  : 	p = strchr(fbuf, '[');

	mov	edx, 91					; 0000005bH
	mov	rcx, QWORD PTR fbuf$[rsp]
	call	strchr
	mov	QWORD PTR p$[rsp], rax

; 107  : 	int venid, devid = 0;

	mov	DWORD PTR devid$[rsp], 0

; 108  : 	int pi = 0;

	mov	DWORD PTR pi$[rsp], 0

; 109  : 	if (p)

	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN15@AuGetConfE

; 110  : 		p++;

	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN15@AuGetConfE:

; 111  : 
; 112  : 	fbuf = p;

	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR fbuf$[rsp], rax

; 113  : 	char num[2];
; 114  : 	memset(num, 0, 2);

	mov	r8d, 2
	xor	edx, edx
	lea	rcx, QWORD PTR num$[rsp]
	call	memset

; 115  : 	int i;
; 116  : 	for (i = 0; i < 2; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN14@AuGetConfE
$LN13@AuGetConfE:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN14@AuGetConfE:
	cmp	DWORD PTR i$[rsp], 2
	jge	SHORT $LN12@AuGetConfE

; 117  : 		if (p[i] == ',' || p[i] == ']')

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN10@AuGetConfE
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 93					; 0000005dH
	jne	SHORT $LN11@AuGetConfE
$LN10@AuGetConfE:

; 118  : 			break;

	jmp	SHORT $LN12@AuGetConfE
$LN11@AuGetConfE:

; 119  : 		num[i] = p[i];

	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR num$[rsp+rcx], al

; 120  : 		fbuf++;

	mov	rax, QWORD PTR fbuf$[rsp]
	inc	rax
	mov	QWORD PTR fbuf$[rsp], rax

; 121  : 	}

	jmp	SHORT $LN13@AuGetConfE
$LN12@AuGetConfE:

; 122  : 	num[i] = 0;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	BYTE PTR num$[rsp+rax], 0

; 123  : 	venid = atoi(num);

	lea	rcx, QWORD PTR num$[rsp]
	call	?atoi@@YAHPEBD@Z			; atoi
	mov	DWORD PTR venid$[rsp], eax

; 124  : 
; 125  : 	/* Now search for device id / product id */
; 126  : 	p = strchr(fbuf, ',');

	mov	edx, 44					; 0000002cH
	mov	rcx, QWORD PTR fbuf$[rsp]
	call	strchr
	mov	QWORD PTR p$[rsp], rax

; 127  : 	if (p)

	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN9@AuGetConfE

; 128  : 		p++;

	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN9@AuGetConfE:

; 129  : 	for (int i = 0; i < 2; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN8@AuGetConfE
$LN7@AuGetConfE:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN8@AuGetConfE:
	cmp	DWORD PTR i$1[rsp], 2
	jge	SHORT $LN6@AuGetConfE

; 130  : 		if (p[i] == ',' || p[i] == ']')

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN4@AuGetConfE
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 93					; 0000005dH
	jne	SHORT $LN5@AuGetConfE
$LN4@AuGetConfE:

; 131  : 			break;

	jmp	SHORT $LN6@AuGetConfE
$LN5@AuGetConfE:

; 132  : 		num[i] = p[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR num$[rsp+rcx], al

; 133  : 	}

	jmp	SHORT $LN7@AuGetConfE
$LN6@AuGetConfE:

; 134  : 	num[i] = 0;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	BYTE PTR num$[rsp+rax], 0

; 135  : 	devid = atoi(num);

	lea	rcx, QWORD PTR num$[rsp]
	call	?atoi@@YAHPEBD@Z			; atoi
	mov	DWORD PTR devid$[rsp], eax

; 136  : 
; 137  : 
; 138  : 	if (vendor_id != venid || devid != device_id) {

	mov	eax, DWORD PTR venid$[rsp]
	cmp	DWORD PTR vendor_id$[rsp], eax
	jne	SHORT $LN2@AuGetConfE
	mov	eax, DWORD PTR device_id$[rsp]
	cmp	DWORD PTR devid$[rsp], eax
	je	SHORT $LN3@AuGetConfE
$LN2@AuGetConfE:

; 139  : 		entryoff++;

	mov	eax, DWORD PTR entryoff$[rsp]
	inc	eax
	mov	DWORD PTR entryoff$[rsp], eax

; 140  : 		goto re;

	jmp	$re$22
$LN3@AuGetConfE:

; 141  : 	}
; 142  : 
; 143  : 	/* Finally we found the device driver */
; 144  : 	if (vendor_id == venid && devid == device_id) {

	mov	eax, DWORD PTR venid$[rsp]
	cmp	DWORD PTR vendor_id$[rsp], eax
	jne	SHORT $LN1@AuGetConfE
	mov	eax, DWORD PTR device_id$[rsp]
	cmp	DWORD PTR devid$[rsp], eax
	jne	SHORT $LN1@AuGetConfE

; 145  : 		return fbuf;

	mov	rax, QWORD PTR fbuf$[rsp]
	jmp	SHORT $LN19@AuGetConfE
$LN1@AuGetConfE:

; 146  : 	}
; 147  : 
; 148  : 	return 0;

	xor	eax, eax
$LN19@AuGetConfE:

; 149  : }

	add	rsp, 104				; 00000068H
	ret	0
?AuGetConfEntry@@YAPEADIIPEAEH@Z ENDP			; AuGetConfEntry
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
?AuIncreaseDriverCount@@YAXXZ PROC			; AuIncreaseDriverCount

; 70   : 	_dev_count_++;

	mov	eax, DWORD PTR _dev_count_
	inc	eax
	mov	DWORD PTR _dev_count_, eax

; 71   : }

	ret	0
?AuIncreaseDriverCount@@YAXXZ ENDP			; AuIncreaseDriverCount
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
?AuDecreaseDriverCount@@YAXXZ PROC			; AuDecreaseDriverCount

; 62   : 	_dev_count_--;

	mov	eax, DWORD PTR _dev_count_
	dec	eax
	mov	DWORD PTR _dev_count_, eax

; 63   : }

	ret	0
?AuDecreaseDriverCount@@YAXXZ ENDP			; AuDecreaseDriverCount
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
uid$ = 0
?AuRequestDriverId@@YAIXZ PROC				; AuRequestDriverId

; 51   : uint32_t AuRequestDriverId() {

$LN3:
	sub	rsp, 24

; 52   : 	uint32_t uid = driver_class_unique_id;

	mov	eax, DWORD PTR driver_class_unique_id
	mov	DWORD PTR uid$[rsp], eax

; 53   : 	driver_class_unique_id++;

	mov	eax, DWORD PTR driver_class_unique_id
	inc	eax
	mov	DWORD PTR driver_class_unique_id, eax

; 54   : 	return uid;

	mov	eax, DWORD PTR uid$[rsp]

; 55   : }

	add	rsp, 24
	ret	0
?AuRequestDriverId@@YAIXZ ENDP				; AuRequestDriverId
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\audrv.cpp
_TEXT	SEGMENT
dev$1 = 48
func$2 = 52
bus$3 = 56
i$4 = 60
i$5 = 64
sub_class$ = 68
device$6 = 72
vend_id$ = 80
conf$ = 88
filesize$ = 96
driver$7 = 104
class_code$ = 112
file$ = 120
dev_id$ = 128
device$ = 132
fsys$ = 136
confdata$ = 144
info$ = 176
?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z PROC ; AuDrvMngrInitialize

; 246  : void AuDrvMngrInitialize(KERNEL_BOOT_INFO *info) {

$LN21:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H

; 247  : 	driver_class_unique_id = 0;

	mov	DWORD PTR driver_class_unique_id, 0

; 248  : 	driver_load_base = AU_DRIVER_BASE_START;

	mov	rax, -70368739983360			; ffffc00000400000H
	mov	QWORD PTR driver_load_base, rax

; 249  : 	_dev_count_ = 0;

	mov	DWORD PTR _dev_count_, 0

; 250  : 
; 251  : 	printf("[Aurora]: Initializing drivers, please wait... \n");

	lea	rcx, OFFSET FLAT:$SG4263
	call	printf

; 252  : 	/* Load the conf data */
; 253  : 	uint64_t* conf = (uint64_t*)P2V((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	P2V
	mov	QWORD PTR conf$[rsp], rax

; 254  : 	memset(conf, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR conf$[rsp]
	call	memset

; 255  : 	AuVFSNode* fsys = AuVFSFind("/");

	lea	rcx, OFFSET FLAT:$SG4268
	call	AuVFSFind
	mov	QWORD PTR fsys$[rsp], rax

; 256  : 	AuVFSNode* file = AuVFSOpen("/audrv.cnf");

	lea	rcx, OFFSET FLAT:$SG4270
	call	AuVFSOpen
	mov	QWORD PTR file$[rsp], rax

; 257  : 	int filesize = file->size / 1024;

	xor	edx, edx
	mov	rax, QWORD PTR file$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	ecx, 1024				; 00000400H
	div	ecx
	mov	DWORD PTR filesize$[rsp], eax

; 258  : 
; 259  : 	if (filesize < 4096)

	cmp	DWORD PTR filesize$[rsp], 4096		; 00001000H
	jge	SHORT $LN18@AuDrvMngrI

; 260  : 		AuVFSNodeReadBlock(fsys,file, (uint64_t*)V2P((size_t)conf));

	mov	rcx, QWORD PTR conf$[rsp]
	call	V2P
	mov	r8, rax
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR fsys$[rsp]
	call	AuVFSNodeReadBlock
$LN18@AuDrvMngrI:

; 261  : 
; 262  : 	uint8_t* confdata = (uint8_t*)conf;

	mov	rax, QWORD PTR conf$[rsp]
	mov	QWORD PTR confdata$[rsp], rax

; 263  : 
; 264  : 
; 265  : 	uint32_t vend_id, dev_id, class_code, sub_class = 0;

	mov	DWORD PTR sub_class$[rsp], 0

; 266  : 	uint32_t device = 0;

	mov	DWORD PTR device$[rsp], 0

; 267  : 	for (uint16_t bus = 0; bus < 0x20; bus++) {

	xor	eax, eax
	mov	WORD PTR bus$3[rsp], ax
	jmp	SHORT $LN17@AuDrvMngrI
$LN16@AuDrvMngrI:
	movzx	eax, WORD PTR bus$3[rsp]
	inc	ax
	mov	WORD PTR bus$3[rsp], ax
$LN17@AuDrvMngrI:
	movzx	eax, WORD PTR bus$3[rsp]
	cmp	eax, 32					; 00000020H
	jge	$LN15@AuDrvMngrI

; 268  : 		for (uint16_t dev = 0; dev < 32; dev++) {

	xor	eax, eax
	mov	WORD PTR dev$1[rsp], ax
	jmp	SHORT $LN14@AuDrvMngrI
$LN13@AuDrvMngrI:
	movzx	eax, WORD PTR dev$1[rsp]
	inc	ax
	mov	WORD PTR dev$1[rsp], ax
$LN14@AuDrvMngrI:
	movzx	eax, WORD PTR dev$1[rsp]
	cmp	eax, 32					; 00000020H
	jge	$LN12@AuDrvMngrI

; 269  : 			for (uint16_t func = 0; func < 8; func++) {

	xor	eax, eax
	mov	WORD PTR func$2[rsp], ax
	jmp	SHORT $LN11@AuDrvMngrI
$LN10@AuDrvMngrI:
	movzx	eax, WORD PTR func$2[rsp]
	inc	ax
	mov	WORD PTR func$2[rsp], ax
$LN11@AuDrvMngrI:
	movzx	eax, WORD PTR func$2[rsp]
	cmp	eax, 8
	jge	$LN9@AuDrvMngrI

; 270  : 
; 271  : 				uint64_t device = AuPCIEGetDevice(0, bus, dev, func);

	movzx	eax, WORD PTR func$2[rsp]
	movzx	ecx, WORD PTR dev$1[rsp]
	movzx	edx, WORD PTR bus$3[rsp]
	mov	r9d, eax
	mov	r8d, ecx
	xor	ecx, ecx
	call	?AuPCIEGetDevice@@YA_KGHHH@Z		; AuPCIEGetDevice
	mov	QWORD PTR device$6[rsp], rax

; 272  : 
; 273  : 				vend_id = AuPCIERead(device, PCI_VENDOR_ID, bus, dev, func);

	movzx	eax, WORD PTR func$2[rsp]
	movzx	ecx, WORD PTR dev$1[rsp]
	movzx	edx, WORD PTR bus$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	xor	edx, edx
	mov	rcx, QWORD PTR device$6[rsp]
	call	AuPCIERead
	mov	DWORD PTR vend_id$[rsp], eax

; 274  : 				dev_id = AuPCIERead(device, PCI_DEVICE_ID, bus, dev, func);

	movzx	eax, WORD PTR func$2[rsp]
	movzx	ecx, WORD PTR dev$1[rsp]
	movzx	edx, WORD PTR bus$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	edx, 2
	mov	rcx, QWORD PTR device$6[rsp]
	call	AuPCIERead
	mov	DWORD PTR dev_id$[rsp], eax

; 275  : 				class_code = AuPCIERead(device, PCI_CLASS, bus, dev, func);

	movzx	eax, WORD PTR func$2[rsp]
	movzx	ecx, WORD PTR dev$1[rsp]
	movzx	edx, WORD PTR bus$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	edx, 11
	mov	rcx, QWORD PTR device$6[rsp]
	call	AuPCIERead
	mov	DWORD PTR class_code$[rsp], eax

; 276  : 				sub_class = AuPCIERead(device, PCI_SUBCLASS, bus, dev, func);

	movzx	eax, WORD PTR func$2[rsp]
	movzx	ecx, WORD PTR dev$1[rsp]
	movzx	edx, WORD PTR bus$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	edx, 10
	mov	rcx, QWORD PTR device$6[rsp]
	call	AuPCIERead
	mov	DWORD PTR sub_class$[rsp], eax

; 277  : 
; 278  : 				if (dev_id == 0xFFFF || vend_id == 0xFFFF)

	cmp	DWORD PTR dev_id$[rsp], 65535		; 0000ffffH
	je	SHORT $LN7@AuDrvMngrI
	cmp	DWORD PTR vend_id$[rsp], 65535		; 0000ffffH
	jne	SHORT $LN8@AuDrvMngrI
$LN7@AuDrvMngrI:

; 279  : 					continue;

	jmp	$LN10@AuDrvMngrI
$LN8@AuDrvMngrI:

; 280  : 				AuGetDriverName(class_code, sub_class, confdata, 1);

	mov	r9d, 1
	mov	r8, QWORD PTR confdata$[rsp]
	mov	edx, DWORD PTR sub_class$[rsp]
	mov	ecx, DWORD PTR class_code$[rsp]
	call	?AuGetDriverName@@YAXIIPEAEH@Z		; AuGetDriverName

; 281  : 				for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN6@AuDrvMngrI
$LN5@AuDrvMngrI:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN6@AuDrvMngrI:
	cmp	DWORD PTR i$5[rsp], 1000		; 000003e8H
	jge	SHORT $LN4@AuDrvMngrI

; 282  : 					;

	jmp	SHORT $LN5@AuDrvMngrI
$LN4@AuDrvMngrI:

; 283  : 			}

	jmp	$LN10@AuDrvMngrI
$LN9@AuDrvMngrI:

; 284  : 		}

	jmp	$LN13@AuDrvMngrI
$LN12@AuDrvMngrI:

; 285  : 	}

	jmp	$LN16@AuDrvMngrI
$LN15@AuDrvMngrI:

; 286  : 
; 287  : 
; 288  : 	/* Serially call each startup entries of each driver */
; 289  : 	for (int i = 0; i < driver_class_unique_id; i++) {

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN3@AuDrvMngrI
$LN2@AuDrvMngrI:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN3@AuDrvMngrI:
	mov	eax, DWORD PTR driver_class_unique_id
	cmp	DWORD PTR i$4[rsp], eax
	jae	SHORT $LN1@AuDrvMngrI

; 290  : 		AuDriver *driver = drivers[i];

	movsxd	rax, DWORD PTR i$4[rsp]
	lea	rcx, OFFSET FLAT:?drivers@@3PAPEAU_aurora_driver_@@A ; drivers
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR driver$7[rsp], rax

; 291  : 		AuDriverLoad(driver->name, driver);

	mov	rax, QWORD PTR driver$7[rsp]
	add	rax, 2
	mov	rdx, QWORD PTR driver$7[rsp]
	mov	rcx, rax
	call	?AuDriverLoad@@YAXPEADPEAU_aurora_driver_@@@Z ; AuDriverLoad

; 292  : 		driver->entry();

	mov	rax, QWORD PTR driver$7[rsp]
	call	QWORD PTR [rax+51]

; 293  : 	}

	jmp	SHORT $LN2@AuDrvMngrI
$LN1@AuDrvMngrI:

; 294  : 
; 295  : 	kfree(file);

	mov	rcx, QWORD PTR file$[rsp]
	call	kfree

; 296  : }

	add	rsp, 168				; 000000a8H
	ret	0
?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ENDP ; AuDrvMngrInitialize
_TEXT	ENDS
END
