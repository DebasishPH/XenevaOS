; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__89B5D5C8_timerserv@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?CreateTimer@@YAHHHE@Z				; CreateTimer
PUBLIC	?StartTimer@@YAHH@Z				; StartTimer
PUBLIC	?StopTimer@@YAHH@Z				; StopTimer
PUBLIC	?DestroyTimer@@YAHH@Z				; DestroyTimer
PUBLIC	?GetTimeOfDay@@YAHPEAX@Z			; GetTimeOfDay
PUBLIC	__JustMyCode_Default
EXTRN	?AuTimerCreate@@YAXGHE@Z:PROC			; AuTimerCreate
EXTRN	?AuTimerStart@@YAXG@Z:PROC			; AuTimerStart
EXTRN	?AuTimerStop@@YAXG@Z:PROC			; AuTimerStop
EXTRN	?AuTimerDestroy@@YAXG@Z:PROC			; AuTimerDestroy
EXTRN	x64_cli:PROC
EXTRN	AuGetTimeOfTheDay:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CreateTimer@@YAHHHE@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?CreateTimer@@YAHHHE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StartTimer@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?StartTimer@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StopTimer@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?StopTimer@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DestroyTimer@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?DestroyTimer@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTimeOfDay@@YAHPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?GetTimeOfDay@@YAHPEAX@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTimeOfDay@@YAHPEAX@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DestroyTimer@@YAHH@Z DD 025030e01H
	DD	0b209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StopTimer@@YAHH@Z DD 025030e01H
	DD	0b209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StartTimer@@YAHH@Z DD 025030e01H
	DD	0b209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CreateTimer@@YAHHHE@Z DD 025031701H
	DD	0b2122317H
	DD	0500eH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\timerserv.cpp
;	COMDAT ?GetTimeOfDay@@YAHPEAX@Z
_TEXT	SEGMENT
val$ = 0
ptr$ = 96
?GetTimeOfDay@@YAHPEAX@Z PROC				; GetTimeOfDay, COMDAT

; 84   : int GetTimeOfDay(void* ptr) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__89B5D5C8_timerserv@cpp
	call	__CheckForDebuggerJustMyCode

; 85   : 	x64_cli();

	call	x64_cli

; 86   : 	if (!ptr)

	cmp	QWORD PTR ptr$[rbp], 0
	jne	SHORT $LN2@GetTimeOfD

; 87   : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN1@GetTimeOfD
$LN2@GetTimeOfD:

; 88   : 	timeval *val = (timeval*)ptr;

	mov	rax, QWORD PTR ptr$[rbp]
	mov	QWORD PTR val$[rbp], rax

; 89   : 	AuGetTimeOfTheDay(val);

	mov	rcx, QWORD PTR val$[rbp]
	call	AuGetTimeOfTheDay

; 90   : 	return 0;

	xor	eax, eax
$LN1@GetTimeOfD:

; 91   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?GetTimeOfDay@@YAHPEAX@Z ENDP				; GetTimeOfDay
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\timerserv.cpp
;	COMDAT ?DestroyTimer@@YAHH@Z
_TEXT	SEGMENT
threadID$ = 80
?DestroyTimer@@YAHH@Z PROC				; DestroyTimer, COMDAT

; 72   : int DestroyTimer(int threadID) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__89B5D5C8_timerserv@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 	x64_cli();

	call	x64_cli

; 74   : 	AuTimerDestroy(threadID);

	movzx	ecx, WORD PTR threadID$[rbp]
	call	?AuTimerDestroy@@YAXG@Z			; AuTimerDestroy

; 75   : 	return 1;

	mov	eax, 1

; 76   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?DestroyTimer@@YAHH@Z ENDP				; DestroyTimer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\timerserv.cpp
;	COMDAT ?StopTimer@@YAHH@Z
_TEXT	SEGMENT
threadID$ = 80
?StopTimer@@YAHH@Z PROC					; StopTimer, COMDAT

; 61   : int StopTimer(int threadID) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__89B5D5C8_timerserv@cpp
	call	__CheckForDebuggerJustMyCode

; 62   : 	x64_cli();

	call	x64_cli

; 63   : 	AuTimerStop(threadID);

	movzx	ecx, WORD PTR threadID$[rbp]
	call	?AuTimerStop@@YAXG@Z			; AuTimerStop

; 64   : 	return 0;

	xor	eax, eax

; 65   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?StopTimer@@YAHH@Z ENDP					; StopTimer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\timerserv.cpp
;	COMDAT ?StartTimer@@YAHH@Z
_TEXT	SEGMENT
threadID$ = 80
?StartTimer@@YAHH@Z PROC				; StartTimer, COMDAT

; 52   : int StartTimer(int threadID) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__89B5D5C8_timerserv@cpp
	call	__CheckForDebuggerJustMyCode

; 53   : 	x64_cli();

	call	x64_cli

; 54   : 	AuTimerStart(threadID);

	movzx	ecx, WORD PTR threadID$[rbp]
	call	?AuTimerStart@@YAXG@Z			; AuTimerStart

; 55   : 	return 0;

	xor	eax, eax

; 56   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?StartTimer@@YAHH@Z ENDP				; StartTimer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Serv\timerserv.cpp
;	COMDAT ?CreateTimer@@YAHHHE@Z
_TEXT	SEGMENT
threadID$ = 80
maxTickLimit$ = 88
updatemode$ = 96
?CreateTimer@@YAHHHE@Z PROC				; CreateTimer, COMDAT

; 43   : int CreateTimer(int threadID,int maxTickLimit,uint8_t updatemode) {

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__89B5D5C8_timerserv@cpp
	call	__CheckForDebuggerJustMyCode

; 44   : 	x64_cli();

	call	x64_cli

; 45   : 	AuTimerCreate(threadID, maxTickLimit, updatemode);

	movzx	r8d, BYTE PTR updatemode$[rbp]
	mov	edx, DWORD PTR maxTickLimit$[rbp]
	movzx	ecx, WORD PTR threadID$[rbp]
	call	?AuTimerCreate@@YAXGHE@Z		; AuTimerCreate

; 46   : 	return 0;

	xor	eax, eax

; 47   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?CreateTimer@@YAHHHE@Z ENDP				; CreateTimer
_TEXT	ENDS
END
