; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__DEB88D02_ethernet@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?AuEthernetSend@@YAXPEAU__VFS_NODE__@@PEAX_KGPEAE@Z ; AuEthernetSend
PUBLIC	AuEthernetHandle
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BH@CPLBFLOA@Ethernet?5setuped?5?$CFd?5?$AN?6@ ; `string'
EXTRN	list_get_at:PROC
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	AuTextOut:PROC
EXTRN	?IPv4HandlePacket@@YAXPEAX@Z:PROC		; IPv4HandlePacket
EXTRN	?AuSocketAdd@@YAXPEAU_socket_@@PEAX_K@Z:PROC	; AuSocketAdd
EXTRN	?AuRawSocketGetList@@YAPEAU_list_@@XZ:PROC	; AuRawSocketGetList
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuEthernetSend@@YAXPEAU__VFS_NODE__@@PEAX_KGPEAE@Z DD imagerel $LN4
	DD	imagerel $LN4+299
	DD	imagerel $unwind$?AuEthernetSend@@YAXPEAU__VFS_NODE__@@PEAX_KGPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuEthernetHandle DD imagerel $LN10
	DD	imagerel $LN10+196
	DD	imagerel $unwind$AuEthernetHandle
pdata	ENDS
;	COMDAT ??_C@_0BH@CPLBFLOA@Ethernet?5setuped?5?$CFd?5?$AN?6@
CONST	SEGMENT
??_C@_0BH@CPLBFLOA@Ethernet?5setuped?5?$CFd?5?$AN?6@ DB 'Ethernet setuped'
	DB	' %d ', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuEthernetHandle DD 025041601H
	DD	01112316H
	DD	0500a0012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuEthernetSend@@YAXPEAU__VFS_NODE__@@PEAX_KGPEAE@Z DD 025032201H
	DD	0f21d2322H
	DD	05016H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Net\ethernet.cpp
;	COMDAT AuEthernetHandle
_TEXT	SEGMENT
frame$ = 0
raw_sockets$ = 8
i$1 = 16
sock$2 = 24
tv84 = 96
data$ = 128
size$ = 136
AuEthernetHandle PROC					; COMDAT

; 49   : AU_EXTERN AU_EXPORT void AuEthernetHandle(void *data, int size) {

$LN10:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEB88D02_ethernet@cpp
	call	__CheckForDebuggerJustMyCode

; 50   : 	Ethernet* frame = (Ethernet*)data;

	mov	rax, QWORD PTR data$[rbp]
	mov	QWORD PTR frame$[rbp], rax

; 51   : 	list_t *raw_sockets = AuRawSocketGetList();

	call	?AuRawSocketGetList@@YAPEAU_list_@@XZ	; AuRawSocketGetList
	mov	QWORD PTR raw_sockets$[rbp], rax

; 52   : 	for (int i = 0; i < raw_sockets->pointer; i++) {

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuEthernet
$LN2@AuEthernet:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuEthernet:
	mov	rax, QWORD PTR raw_sockets$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rbp], eax
	jae	SHORT $LN3@AuEthernet

; 53   : 		AuSocket *sock = (AuSocket*)list_get_at(raw_sockets, i);

	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR raw_sockets$[rbp]
	call	list_get_at
	mov	QWORD PTR sock$2[rbp], rax

; 54   : 		AuSocketAdd(sock, frame, size);

	movsxd	rax, DWORD PTR size$[rbp]
	mov	r8, rax
	mov	rdx, QWORD PTR frame$[rbp]
	mov	rcx, QWORD PTR sock$2[rbp]
	call	?AuSocketAdd@@YAXPEAU_socket_@@PEAX_K@Z	; AuSocketAdd

; 55   : 	}

	jmp	SHORT $LN2@AuEthernet
$LN3@AuEthernet:

; 56   : 	switch (ntohs(frame->typeLen)) {

	mov	rax, QWORD PTR frame$[rbp]
	movzx	eax, WORD PTR [rax+12]
	and	eax, 255				; 000000ffH
	shl	eax, 8
	mov	rcx, QWORD PTR frame$[rbp]
	movzx	ecx, WORD PTR [rcx+12]
	and	ecx, 65280				; 0000ff00H
	sar	ecx, 8
	or	eax, ecx
	mov	DWORD PTR tv84[rbp], eax
	cmp	DWORD PTR tv84[rbp], 2048		; 00000800H
	je	SHORT $LN8@AuEthernet
	jmp	SHORT $LN5@AuEthernet

; 57   : 	case ETHERNET_TYPE_ARP:
; 58   : 		break;

	jmp	SHORT $LN5@AuEthernet
$LN8@AuEthernet:

; 59   : 	case ETHERNET_TYPE_IPV4:
; 60   : 		IPv4HandlePacket((void*)&frame->payload);

	mov	rax, QWORD PTR frame$[rbp]
	add	rax, 14
	mov	rcx, rax
	call	?IPv4HandlePacket@@YAXPEAX@Z		; IPv4HandlePacket
$LN5@AuEthernet:

; 61   : 		break;
; 62   : 	}
; 63   : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
AuEthernetHandle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Net\ethernet.cpp
;	COMDAT ?AuEthernetSend@@YAXPEAU__VFS_NODE__@@PEAX_KGPEAE@Z
_TEXT	SEGMENT
ndev$ = 0
totalSz$ = 8
pacl$ = 16
src_mac$ = 24
nic$ = 112
data$ = 120
len$ = 128
type$ = 136
dest$ = 144
?AuEthernetSend@@YAXPEAU__VFS_NODE__@@PEAX_KGPEAE@Z PROC ; AuEthernetSend, COMDAT

; 72   : void AuEthernetSend(AuVFSNode* nic,void* data, size_t len, uint16_t type, uint8_t* dest) {

$LN4:
	mov	WORD PTR [rsp+32], r9w
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEB88D02_ethernet@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 	AuNetworkDevice* ndev = (AuNetworkDevice*)nic->device;

	mov	rax, QWORD PTR nic$[rbp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR ndev$[rbp], rax

; 74   : 	if (!ndev)

	cmp	QWORD PTR ndev$[rbp], 0
	jne	SHORT $LN2@AuEthernet

; 75   : 		return;

	jmp	$LN1@AuEthernet
$LN2@AuEthernet:

; 76   : 	size_t totalSz = sizeof(Ethernet)+len;

	mov	rax, QWORD PTR len$[rbp]
	add	rax, 14
	mov	QWORD PTR totalSz$[rbp], rax

; 77   : 	Ethernet* pacl = (Ethernet*)kmalloc(totalSz);

	mov	ecx, DWORD PTR totalSz$[rbp]
	call	kmalloc
	mov	QWORD PTR pacl$[rbp], rax

; 78   : 	memset(pacl, 0, totalSz);

	mov	r8d, DWORD PTR totalSz$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR pacl$[rbp]
	call	memset

; 79   : 	memcpy(pacl->dest, dest, 6);

	mov	rax, QWORD PTR pacl$[rbp]
	mov	r8d, 6
	mov	rdx, QWORD PTR dest$[rbp]
	mov	rcx, rax
	call	memcpy

; 80   : 	uint8_t *src_mac = ndev->mac;

	mov	rax, QWORD PTR ndev$[rbp]
	mov	QWORD PTR src_mac$[rbp], rax

; 81   : 	memcpy(pacl->src, src_mac, 6);

	mov	rax, QWORD PTR pacl$[rbp]
	add	rax, 6
	mov	r8d, 6
	mov	rdx, QWORD PTR src_mac$[rbp]
	mov	rcx, rax
	call	memcpy

; 82   : 	pacl->typeLen = htons(type);

	movzx	eax, WORD PTR type$[rbp]
	and	eax, 255				; 000000ffH
	shl	eax, 8
	movzx	ecx, WORD PTR type$[rbp]
	and	ecx, 65280				; 0000ff00H
	sar	ecx, 8
	or	eax, ecx
	mov	rcx, QWORD PTR pacl$[rbp]
	mov	WORD PTR [rcx+12], ax

; 83   : 	memcpy(pacl->payload, data, len);

	mov	rax, QWORD PTR pacl$[rbp]
	add	rax, 14
	mov	r8, QWORD PTR len$[rbp]
	mov	rdx, QWORD PTR data$[rbp]
	mov	rcx, rax
	call	memcpy

; 84   : 	
; 85   : 	AuTextOut("Ethernet setuped %d \r\n", ndev->type);

	mov	rax, QWORD PTR ndev$[rbp]
	movzx	eax, BYTE PTR [rax+10]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0BH@CPLBFLOA@Ethernet?5setuped?5?$CFd?5?$AN?6@
	call	AuTextOut

; 86   : 
; 87   : 	nic->write(nic, nic, (uint64_t*)pacl, totalSz);

	mov	r9d, DWORD PTR totalSz$[rbp]
	mov	r8, QWORD PTR pacl$[rbp]
	mov	rdx, QWORD PTR nic$[rbp]
	mov	rcx, QWORD PTR nic$[rbp]
	mov	rax, QWORD PTR nic$[rbp]
	call	QWORD PTR [rax+98]

; 88   : 	kfree(pacl);

	mov	rcx, QWORD PTR pacl$[rbp]
	call	kfree
$LN1@AuEthernet:

; 89   : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?AuEthernetSend@@YAXPEAU__VFS_NODE__@@PEAX_KGPEAE@Z ENDP ; AuEthernetSend
_TEXT	ENDS
END
