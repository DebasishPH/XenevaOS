; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__6835D7E3_x86_64_pic@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?AuInitialisePIC@@YAXXZ				; AuInitialisePIC
PUBLIC	?AuPICSetMask@@YAXE@Z				; AuPICSetMask
PUBLIC	?AuPICClearMask@@YAXE@Z				; AuPICClearMask
PUBLIC	?AuPITSleepMS@@YAXI@Z				; AuPITSleepMS
PUBLIC	?AuPICInterruptEOI@@YAXI@Z			; AuPICInterruptEOI
PUBLIC	?AuPITOneShotMode@@YAXXZ			; AuPITOneShotMode
PUBLIC	?AuPitOneShotWait@@YAXXZ			; AuPitOneShotWait
PUBLIC	?AuPITHandler@@YAX_KPEAX@Z			; AuPITHandler
PUBLIC	__JustMyCode_Default
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	setvect:PROC
EXTRN	x64_inportb:PROC
EXTRN	x64_outportb:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	_tls_index:DWORD
_BSS	SEGMENT
?pic_counter@@3_KA DQ 01H DUP (?)			; pic_counter
?ticks@?1??AuPITSleepMS@@YAXI@Z@4HA DD 01H DUP (?)	; `AuPITSleepMS'::`2'::ticks
?$TSS0@?1??AuPITSleepMS@@YAXI@Z@4HA DD 01H DUP (?)	; `AuPITSleepMS'::`2'::$TSS0
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuInitialisePIC@@YAXXZ DD imagerel $LN27
	DD	imagerel $LN27+490
	DD	imagerel $unwind$?AuInitialisePIC@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPICSetMask@@YAXE@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$?AuPICSetMask@@YAXE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPICClearMask@@YAXE@Z DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$?AuPICClearMask@@YAXE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPITSleepMS@@YAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$?AuPITSleepMS@@YAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPICInterruptEOI@@YAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$?AuPICInterruptEOI@@YAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPITOneShotMode@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$?AuPITOneShotMode@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPitOneShotWait@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+50
	DD	imagerel $unwind$?AuPitOneShotWait@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPITHandler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?AuPITHandler@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPITHandler@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPitOneShotWait@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPITOneShotMode@@YAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPICInterruptEOI@@YAXI@Z DD 025030e01H
	DD	0b209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPITSleepMS@@YAXI@Z DD 025030e01H
	DD	0b209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPICClearMask@@YAXE@Z DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPICSetMask@@YAXE@Z DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuInitialisePIC@@YAXXZ DD 025040e01H
	DD	0109230eH
	DD	050020012H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuPITHandler@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
param$ = 88
?AuPITHandler@@YAX_KPEAX@Z PROC				; AuPITHandler, COMDAT

; 57   : void AuPITHandler(size_t v, void* param) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode

; 58   : 	pic_counter++;

	mov	rax, QWORD PTR ?pic_counter@@3_KA
	inc	rax
	mov	QWORD PTR ?pic_counter@@3_KA, rax

; 59   : 	AuPICInterruptEOI(0);

	xor	ecx, ecx
	call	?AuPICInterruptEOI@@YAXI@Z		; AuPICInterruptEOI

; 60   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuPITHandler@@YAX_KPEAX@Z ENDP				; AuPITHandler
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuPitOneShotWait@@YAXXZ
_TEXT	SEGMENT
?AuPitOneShotWait@@YAXXZ PROC				; AuPitOneShotWait, COMDAT

; 163  : void AuPitOneShotWait() {

$LN5:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode
$LN2@AuPitOneSh:

; 164  : 	while (!(x64_inportb(COUNTER_2_CONTROLPORT) & (1 << 5))) {

	mov	cx, 97					; 00000061H
	call	x64_inportb
	movzx	eax, al
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN3@AuPitOneSh

; 165  : 		;
; 166  : 	}

	jmp	SHORT $LN2@AuPitOneSh
$LN3@AuPitOneSh:

; 167  : 
; 168  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuPitOneShotWait@@YAXXZ ENDP				; AuPitOneShotWait
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuPITOneShotMode@@YAXXZ
_TEXT	SEGMENT
val$ = 0
?AuPITOneShotMode@@YAXXZ PROC				; AuPITOneShotMode, COMDAT

; 152  : void AuPITOneShotMode() {

$LN3:
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode

; 153  : 	x64_outportb(COUNTER_2_CONTROLPORT, (x64_inportb(COUNTER_2_CONTROLPORT) & 0xFD) | 1);

	mov	cx, 97					; 00000061H
	call	x64_inportb
	movzx	eax, al
	and	eax, 253				; 000000fdH
	or	eax, 1
	movzx	edx, al
	mov	cx, 97					; 00000061H
	call	x64_outportb

; 154  : 	x64_outportb(COMMAND_REGISTER, 0x80 | 0x30 | 0x00 | SIXTEEN_BIT_BINARY);

	mov	dl, 176					; 000000b0H
	mov	cx, 67					; 00000043H
	call	x64_outportb

; 155  : 	uint32_t val = 1193182 / 20;

	mov	DWORD PTR val$[rbp], 59659		; 0000e90bH

; 156  : 	x64_outportb(COUNTER_2_DATAPORT, val & 0xff); //vall >> 8 & 0xff

	mov	eax, DWORD PTR val$[rbp]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	cx, 66					; 00000042H
	call	x64_outportb

; 157  : 	x64_outportb(COUNTER_2_DATAPORT, (val >> 8) & 0xff);

	mov	eax, DWORD PTR val$[rbp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	cx, 66					; 00000042H
	call	x64_outportb

; 158  : 	x64_outportb(COUNTER_2_CONTROLPORT, val);

	movzx	edx, BYTE PTR val$[rbp]
	mov	cx, 97					; 00000061H
	call	x64_outportb

; 159  : 	x64_outportb(COUNTER_2_CONTROLPORT, val | 1);

	mov	eax, DWORD PTR val$[rbp]
	or	eax, 1
	movzx	edx, al
	mov	cx, 97					; 00000061H
	call	x64_outportb

; 160  : 
; 161  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuPITOneShotMode@@YAXXZ ENDP				; AuPITOneShotMode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuPICInterruptEOI@@YAXI@Z
_TEXT	SEGMENT
intno$ = 80
?AuPICInterruptEOI@@YAXI@Z PROC				; AuPICInterruptEOI, COMDAT

; 45   : void AuPICInterruptEOI(unsigned int intno) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode

; 46   : 	if (intno > 16)

	cmp	DWORD PTR intno$[rbp], 16
	jbe	SHORT $LN2@AuPICInter

; 47   : 		return;

	jmp	SHORT $LN1@AuPICInter
$LN2@AuPICInter:

; 48   : 
; 49   : 	if (intno >= 8)

	cmp	DWORD PTR intno$[rbp], 8
	jb	SHORT $LN3@AuPICInter

; 50   : 		x64_outportb(PIC2_COMMAND, PIC_EOI);

	mov	dl, 32					; 00000020H
	mov	cx, 160					; 000000a0H
	call	x64_outportb
$LN3@AuPICInter:

; 51   : 
; 52   : 	x64_outportb(PIC1_COMMAND, PIC_EOI);

	mov	dl, 32					; 00000020H
	mov	cx, 32					; 00000020H
	call	x64_outportb
$LN1@AuPICInter:

; 53   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuPICInterruptEOI@@YAXI@Z ENDP				; AuPICInterruptEOI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuPITSleepMS@@YAXI@Z
_TEXT	SEGMENT
ms$ = 80
?AuPITSleepMS@@YAXI@Z PROC				; AuPITSleepMS, COMDAT

; 92   : void AuPITSleepMS(uint32_t ms) {

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode

; 93   : 	static int ticks = ms + pic_counter;

	mov	eax, OFFSET FLAT:_Init_thread_epoch
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	cmp	DWORD PTR ?$TSS0@?1??AuPITSleepMS@@YAXI@Z@4HA, eax
	jle	SHORT $LN2@AuPITSleep
	lea	rcx, OFFSET FLAT:?$TSS0@?1??AuPITSleepMS@@YAXI@Z@4HA
	call	_Init_thread_header
	cmp	DWORD PTR ?$TSS0@?1??AuPITSleepMS@@YAXI@Z@4HA, -1
	jne	SHORT $LN2@AuPITSleep
	mov	eax, DWORD PTR ms$[rbp]
	add	rax, QWORD PTR ?pic_counter@@3_KA
	mov	DWORD PTR ?ticks@?1??AuPITSleepMS@@YAXI@Z@4HA, eax
	lea	rcx, OFFSET FLAT:?$TSS0@?1??AuPITSleepMS@@YAXI@Z@4HA
	call	_Init_thread_footer
$LN2@AuPITSleep:
$LN3@AuPITSleep:

; 94   : 	while (ticks > pic_counter) {

	movsxd	rax, DWORD PTR ?ticks@?1??AuPITSleepMS@@YAXI@Z@4HA
	cmp	rax, QWORD PTR ?pic_counter@@3_KA
	jbe	SHORT $LN4@AuPITSleep

; 95   : 		;
; 96   : 	}

	jmp	SHORT $LN3@AuPITSleep
$LN4@AuPITSleep:

; 97   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuPITSleepMS@@YAXI@Z ENDP				; AuPITSleepMS
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuPICClearMask@@YAXE@Z
_TEXT	SEGMENT
port$ = 0
value$ = 4
irq$ = 96
?AuPICClearMask@@YAXE@Z PROC				; AuPICClearMask, COMDAT

; 77   : void AuPICClearMask(uint8_t irq) {

$LN5:
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode

; 78   : 	uint16_t port;
; 79   : 	uint8_t value;
; 80   : 
; 81   : 	if (irq < 8)

	movzx	eax, BYTE PTR irq$[rbp]
	cmp	eax, 8
	jge	SHORT $LN2@AuPICClear

; 82   : 		port = PIC1_DATA;

	mov	eax, 33					; 00000021H
	mov	WORD PTR port$[rbp], ax
	jmp	SHORT $LN3@AuPICClear
$LN2@AuPICClear:

; 83   : 	else {
; 84   : 		port = PIC2_DATA;

	mov	eax, 161				; 000000a1H
	mov	WORD PTR port$[rbp], ax

; 85   : 		irq -= 8;

	movzx	eax, BYTE PTR irq$[rbp]
	sub	eax, 8
	mov	BYTE PTR irq$[rbp], al
$LN3@AuPICClear:

; 86   : 	}
; 87   : 
; 88   : 	value = x64_inportb(port) & ~(1 << irq);

	movzx	ecx, WORD PTR port$[rbp]
	call	x64_inportb
	movzx	eax, al
	movzx	ecx, BYTE PTR irq$[rbp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	not	ecx
	and	eax, ecx
	mov	BYTE PTR value$[rbp], al

; 89   : 	x64_outportb(port, value);

	movzx	edx, BYTE PTR value$[rbp]
	movzx	ecx, WORD PTR port$[rbp]
	call	x64_outportb

; 90   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuPICClearMask@@YAXE@Z ENDP				; AuPICClearMask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuPICSetMask@@YAXE@Z
_TEXT	SEGMENT
port$ = 0
value$ = 4
irq$ = 96
?AuPICSetMask@@YAXE@Z PROC				; AuPICSetMask, COMDAT

; 62   : void AuPICSetMask(uint8_t irq) {

$LN5:
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode

; 63   : 	uint16_t port;
; 64   : 	uint8_t value;
; 65   : 
; 66   : 	if (irq < 8)

	movzx	eax, BYTE PTR irq$[rbp]
	cmp	eax, 8
	jge	SHORT $LN2@AuPICSetMa

; 67   : 		port = PIC1_DATA;

	mov	eax, 33					; 00000021H
	mov	WORD PTR port$[rbp], ax
	jmp	SHORT $LN3@AuPICSetMa
$LN2@AuPICSetMa:

; 68   : 	else{
; 69   : 		port = PIC2_DATA;

	mov	eax, 161				; 000000a1H
	mov	WORD PTR port$[rbp], ax

; 70   : 		irq -= 8;

	movzx	eax, BYTE PTR irq$[rbp]
	sub	eax, 8
	mov	BYTE PTR irq$[rbp], al
$LN3@AuPICSetMa:

; 71   : 	}
; 72   : 
; 73   : 	value = x64_inportb(port) | (1 << irq);

	movzx	ecx, WORD PTR port$[rbp]
	call	x64_inportb
	movzx	eax, al
	movzx	ecx, BYTE PTR irq$[rbp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	or	eax, ecx
	mov	BYTE PTR value$[rbp], al

; 74   : 	x64_outportb(port, value);

	movzx	edx, BYTE PTR value$[rbp]
	movzx	ecx, WORD PTR port$[rbp]
	call	x64_outportb

; 75   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuPICSetMask@@YAXE@Z ENDP				; AuPICSetMask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_pic.cpp
;	COMDAT ?AuInitialisePIC@@YAXXZ
_TEXT	SEGMENT
base0$ = 0
base1$ = 1
a1$ = 2
a2$ = 3
i$1 = 4
i$2 = 8
i$3 = 12
i$4 = 16
i$5 = 20
i$6 = 24
i$7 = 28
i$8 = 32
divisor$ = 36
?AuInitialisePIC@@YAXXZ PROC				; AuInitialisePIC, COMDAT

; 99   : void AuInitialisePIC() {

$LN27:
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__6835D7E3_x86_64_pic@cpp
	call	__CheckForDebuggerJustMyCode

; 100  : 	uint8_t base0 = 0x20;

	mov	BYTE PTR base0$[rbp], 32		; 00000020H

; 101  : 	uint8_t base1 = 0x28;

	mov	BYTE PTR base1$[rbp], 40		; 00000028H

; 102  : 
; 103  : 	unsigned char a1, a2;
; 104  : 	a1 = x64_inportb(PIC1_DATA);

	mov	cx, 33					; 00000021H
	call	x64_inportb
	mov	BYTE PTR a1$[rbp], al

; 105  : 	a2 = x64_inportb(PIC2_DATA);

	mov	cx, 161					; 000000a1H
	call	x64_inportb
	mov	BYTE PTR a2$[rbp], al

; 106  : 
; 107  : 	x64_outportb(PIC1_COMMAND, ICW1_INIT | ICW1_ICW4);

	mov	dl, 17
	mov	cx, 32					; 00000020H
	call	x64_outportb

; 108  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuInitiali
$LN2@AuInitiali:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuInitiali:
	cmp	DWORD PTR i$1[rbp], 1000		; 000003e8H
	jge	SHORT $LN3@AuInitiali

; 109  : 		;
; 110  : 	}

	jmp	SHORT $LN2@AuInitiali
$LN3@AuInitiali:

; 111  : 	x64_outportb(PIC2_COMMAND, ICW1_INIT | ICW1_ICW4);

	mov	dl, 17
	mov	cx, 160					; 000000a0H
	call	x64_outportb

; 112  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$2[rbp], 0
	jmp	SHORT $LN7@AuInitiali
$LN5@AuInitiali:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN7@AuInitiali:
	cmp	DWORD PTR i$2[rbp], 1000		; 000003e8H
	jge	SHORT $LN6@AuInitiali

; 113  : 		;
; 114  : 	}

	jmp	SHORT $LN5@AuInitiali
$LN6@AuInitiali:

; 115  : 
; 116  : 	x64_outportb(PIC1_DATA, base0);

	movzx	edx, BYTE PTR base0$[rbp]
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 117  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$3[rbp], 0
	jmp	SHORT $LN10@AuInitiali
$LN8@AuInitiali:
	mov	eax, DWORD PTR i$3[rbp]
	inc	eax
	mov	DWORD PTR i$3[rbp], eax
$LN10@AuInitiali:
	cmp	DWORD PTR i$3[rbp], 1000		; 000003e8H
	jge	SHORT $LN9@AuInitiali

; 118  : 		;
; 119  : 	}

	jmp	SHORT $LN8@AuInitiali
$LN9@AuInitiali:

; 120  : 	x64_outportb(PIC2_DATA, base1);

	movzx	edx, BYTE PTR base1$[rbp]
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 121  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN13@AuInitiali
$LN11@AuInitiali:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN13@AuInitiali:
	cmp	DWORD PTR i$4[rbp], 1000		; 000003e8H
	jge	SHORT $LN12@AuInitiali

; 122  : 		;
; 123  : 	}

	jmp	SHORT $LN11@AuInitiali
$LN12@AuInitiali:

; 124  : 	x64_outportb(PIC1_DATA, 4);

	mov	dl, 4
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 125  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$5[rbp], 0
	jmp	SHORT $LN16@AuInitiali
$LN14@AuInitiali:
	mov	eax, DWORD PTR i$5[rbp]
	inc	eax
	mov	DWORD PTR i$5[rbp], eax
$LN16@AuInitiali:
	cmp	DWORD PTR i$5[rbp], 1000		; 000003e8H
	jge	SHORT $LN15@AuInitiali

; 126  : 		;
; 127  : 	}

	jmp	SHORT $LN14@AuInitiali
$LN15@AuInitiali:

; 128  : 	x64_outportb(PIC2_DATA, 2);

	mov	dl, 2
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 129  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$6[rbp], 0
	jmp	SHORT $LN19@AuInitiali
$LN17@AuInitiali:
	mov	eax, DWORD PTR i$6[rbp]
	inc	eax
	mov	DWORD PTR i$6[rbp], eax
$LN19@AuInitiali:
	cmp	DWORD PTR i$6[rbp], 1000		; 000003e8H
	jge	SHORT $LN18@AuInitiali

; 130  : 		;
; 131  : 	}

	jmp	SHORT $LN17@AuInitiali
$LN18@AuInitiali:

; 132  : 	x64_outportb(PIC1_DATA, ICW4_8086);

	mov	dl, 1
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 133  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$7[rbp], 0
	jmp	SHORT $LN22@AuInitiali
$LN20@AuInitiali:
	mov	eax, DWORD PTR i$7[rbp]
	inc	eax
	mov	DWORD PTR i$7[rbp], eax
$LN22@AuInitiali:
	cmp	DWORD PTR i$7[rbp], 1000		; 000003e8H
	jge	SHORT $LN21@AuInitiali

; 134  : 		;
; 135  : 	}

	jmp	SHORT $LN20@AuInitiali
$LN21@AuInitiali:

; 136  : 	x64_outportb(PIC2_DATA, ICW4_8086);

	mov	dl, 1
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 137  : 	for (int i = 0; i < 1000; i++) {

	mov	DWORD PTR i$8[rbp], 0
	jmp	SHORT $LN25@AuInitiali
$LN23@AuInitiali:
	mov	eax, DWORD PTR i$8[rbp]
	inc	eax
	mov	DWORD PTR i$8[rbp], eax
$LN25@AuInitiali:
	cmp	DWORD PTR i$8[rbp], 1000		; 000003e8H
	jge	SHORT $LN24@AuInitiali

; 138  : 		;
; 139  : 	}

	jmp	SHORT $LN23@AuInitiali
$LN24@AuInitiali:

; 140  : 	x64_outportb(PIC1_DATA, a1);

	movzx	edx, BYTE PTR a1$[rbp]
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 141  : 	x64_outportb(PIC2_DATA, a2);

	movzx	edx, BYTE PTR a2$[rbp]
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 142  : 
; 143  : 	unsigned int divisor = 1193181 / 100;

	mov	DWORD PTR divisor$[rbp], 11931		; 00002e9bH

; 144  : 	x64_outportb(0x43, 0x00 | 0x06 | 0x30 | 0x00);

	mov	dl, 54					; 00000036H
	mov	cx, 67					; 00000043H
	call	x64_outportb

; 145  : 	x64_outportb(0x40, divisor);

	movzx	edx, BYTE PTR divisor$[rbp]
	mov	cx, 64					; 00000040H
	call	x64_outportb

; 146  : 	x64_outportb(0x40, divisor >> 8);

	mov	eax, DWORD PTR divisor$[rbp]
	shr	eax, 8
	movzx	edx, al
	mov	cx, 64					; 00000040H
	call	x64_outportb

; 147  : 	setvect(32 + 0, AuPITHandler);

	lea	rdx, OFFSET FLAT:?AuPITHandler@@YAX_KPEAX@Z ; AuPITHandler
	mov	ecx, 32					; 00000020H
	call	setvect

; 148  : 	pic_counter = 0;

	mov	QWORD PTR ?pic_counter@@3_KA, 0

; 149  : 	AuPICClearMask(0);

	xor	ecx, ecx
	call	?AuPICClearMask@@YAXE@Z			; AuPICClearMask

; 150  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?AuInitialisePIC@@YAXXZ ENDP				; AuInitialisePIC
_TEXT	ENDS
END
