; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__4F333CCD_time@cpp DB 01H
msvcjmc	ENDS
PUBLIC	AuGetCurrentTime
PUBLIC	__JustMyCode_Default
EXTRN	AuRTCGetYear:PROC
EXTRN	AuRTCGetCentury:PROC
EXTRN	AuRTCGetMinutes:PROC
EXTRN	AuRTCGetSecond:PROC
EXTRN	AuRTCGetDay:PROC
EXTRN	AuRTCGetHour:PROC
EXTRN	AuRTCGetMonth:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuGetCurrentTime DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$AuGetCurrentTime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuGetCurrentTime DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\time.cpp
;	COMDAT AuGetCurrentTime
_TEXT	SEGMENT
time$ = 80
AuGetCurrentTime PROC					; COMDAT

; 37   : AU_EXTERN AU_EXPORT void AuGetCurrentTime(AuTime* time) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4F333CCD_time@cpp
	call	__CheckForDebuggerJustMyCode

; 38   : 	if (!time)

	cmp	QWORD PTR time$[rbp], 0
	jne	SHORT $LN2@AuGetCurre

; 39   : 		return;

	jmp	SHORT $LN1@AuGetCurre
$LN2@AuGetCurre:

; 40   : 	time->century = AuRTCGetCentury();

	call	AuRTCGetCentury
	mov	rcx, QWORD PTR time$[rbp]
	mov	BYTE PTR [rcx], al

; 41   : 	time->day = AuRTCGetDay();

	call	AuRTCGetDay
	mov	rcx, QWORD PTR time$[rbp]
	mov	BYTE PTR [rcx+3], al

; 42   : 	time->hour = AuRTCGetHour();

	call	AuRTCGetHour
	mov	rcx, QWORD PTR time$[rbp]
	mov	BYTE PTR [rcx+4], al

; 43   : 	time->minute = AuRTCGetMinutes();

	call	AuRTCGetMinutes
	mov	rcx, QWORD PTR time$[rbp]
	mov	BYTE PTR [rcx+5], al

; 44   : 	time->month = AuRTCGetMonth();

	call	AuRTCGetMonth
	mov	rcx, QWORD PTR time$[rbp]
	mov	BYTE PTR [rcx+2], al

; 45   : 	time->second = AuRTCGetSecond();

	call	AuRTCGetSecond
	mov	rcx, QWORD PTR time$[rbp]
	mov	BYTE PTR [rcx+6], al

; 46   : 	time->year = AuRTCGetYear();

	call	AuRTCGetYear
	mov	rcx, QWORD PTR time$[rbp]
	mov	BYTE PTR [rcx+1], al
$LN1@AuGetCurre:

; 47   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuGetCurrentTime ENDP
_TEXT	ENDS
END
