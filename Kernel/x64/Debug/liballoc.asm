; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?l_freePages@@3PAPEAUboundary_tag@@A		; l_freePages
PUBLIC	?l_completePages@@3PAHA				; l_completePages
_BSS	SEGMENT
?l_freePages@@3PAPEAUboundary_tag@@A DQ 020H DUP (?)	; l_freePages
?l_completePages@@3PAHA DD 020H DUP (?)			; l_completePages
l_initialized DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG2991	DB	'Request page not aligned to page boundary ', 0dH, 0aH, 00H
CONST	ENDS
_DATA	SEGMENT
l_pageSize DD	01000H
l_pageCount DD	010H
_DATA	ENDS
PUBLIC	liballoc_lock
PUBLIC	liballoc_unlock
PUBLIC	liballoc_alloc
PUBLIC	liballoc_free
PUBLIC	port_malloc
PUBLIC	port_realloc
PUBLIC	port_calloc
PUBLIC	port_free
EXTRN	memset:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuMapPage:PROC
EXTRN	AuGetFreePage:PROC
EXTRN	AuFreePages:PROC
EXTRN	SeTextOut:PROC
pdata	SEGMENT
$pdata$liballoc_alloc DD imagerel $LN9
	DD	imagerel $LN9+201
	DD	imagerel $unwind$liballoc_alloc
$pdata$liballoc_free DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$liballoc_free
$pdata$port_malloc DD imagerel $LN17
	DD	imagerel $LN17+473
	DD	imagerel $unwind$port_malloc
$pdata$port_realloc DD imagerel $LN8
	DD	imagerel $LN8+194
	DD	imagerel $unwind$port_realloc
$pdata$port_calloc DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$port_calloc
$pdata$port_free DD imagerel $LN14
	DD	imagerel $LN14+401
	DD	imagerel $unwind$port_free
$pdata$?getexp@@YAHI@Z DD imagerel ?getexp@@YAHI@Z
	DD	imagerel ?getexp@@YAHI@Z+87
	DD	imagerel $unwind$?getexp@@YAHI@Z
$pdata$?liballoc_memset@@YAPEAXPEAXH_K@Z DD imagerel ?liballoc_memset@@YAPEAXPEAXH_K@Z
	DD	imagerel ?liballoc_memset@@YAPEAXPEAXH_K@Z+75
	DD	imagerel $unwind$?liballoc_memset@@YAPEAXPEAXH_K@Z
$pdata$?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z DD imagerel ?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z
	DD	imagerel ?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z+194
	DD	imagerel $unwind$?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z
$pdata$?insert_tag@@YAXPEAUboundary_tag@@H@Z DD imagerel ?insert_tag@@YAXPEAUboundary_tag@@H@Z
	DD	imagerel ?insert_tag@@YAXPEAUboundary_tag@@H@Z+183
	DD	imagerel $unwind$?insert_tag@@YAXPEAUboundary_tag@@H@Z
$pdata$?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z DD imagerel ?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z
	DD	imagerel ?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z+99
	DD	imagerel $unwind$?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z
$pdata$?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z DD imagerel ?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z
	DD	imagerel ?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z+115
	DD	imagerel $unwind$?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z
$pdata$?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z DD imagerel ?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z
	DD	imagerel ?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z+235
	DD	imagerel $unwind$?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z
$pdata$?allocate_new_tag@@YAPEAUboundary_tag@@I@Z DD imagerel ?allocate_new_tag@@YAPEAUboundary_tag@@I@Z
	DD	imagerel ?allocate_new_tag@@YAPEAUboundary_tag@@I@Z+228
	DD	imagerel $unwind$?allocate_new_tag@@YAPEAUboundary_tag@@I@Z
pdata	ENDS
xdata	SEGMENT
$unwind$liballoc_alloc DD 010801H
	DD	0a208H
$unwind$liballoc_free DD 010d01H
	DD	0420dH
$unwind$port_malloc DD 010801H
	DD	0a208H
$unwind$port_realloc DD 010d01H
	DD	0820dH
$unwind$port_calloc DD 010e01H
	DD	0620eH
$unwind$port_free DD 010901H
	DD	06209H
$unwind$?getexp@@YAHI@Z DD 010801H
	DD	02208H
$unwind$?liballoc_memset@@YAPEAXPEAXH_K@Z DD 011201H
	DD	02212H
$unwind$?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z DD 011301H
	DD	04213H
$unwind$?insert_tag@@YAXPEAUboundary_tag@@H@Z DD 010d01H
	DD	0620dH
$unwind$?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z DD 010901H
	DD	02209H
$unwind$?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z DD 010901H
	DD	06209H
$unwind$?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z DD 010901H
	DD	06209H
$unwind$?allocate_new_tag@@YAPEAUboundary_tag@@I@Z DD 010801H
	DD	06208H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
pages$ = 32
usage$ = 36
tag$ = 40
size$ = 64
?allocate_new_tag@@YAPEAUboundary_tag@@I@Z PROC		; allocate_new_tag

; 270  : {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 271  : 	unsigned int pages;
; 272  : 	unsigned int usage;
; 273  : 	struct boundary_tag *tag;
; 274  : 
; 275  : 	// This is how much space is required.
; 276  : 	usage = size + sizeof(struct boundary_tag);

	mov	eax, DWORD PTR size$[rsp]
	add	rax, 48					; 00000030H
	mov	DWORD PTR usage$[rsp], eax

; 277  : 
; 278  : 	// Perfect amount of space
; 279  : 	pages = usage / l_pageSize;

	xor	edx, edx
	mov	eax, DWORD PTR usage$[rsp]
	div	DWORD PTR l_pageSize
	mov	DWORD PTR pages$[rsp], eax

; 280  : 	if ((usage % l_pageSize) != 0) pages += 1;

	xor	edx, edx
	mov	eax, DWORD PTR usage$[rsp]
	div	DWORD PTR l_pageSize
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN3@allocate_n
	mov	eax, DWORD PTR pages$[rsp]
	inc	eax
	mov	DWORD PTR pages$[rsp], eax
$LN3@allocate_n:

; 281  : 
; 282  : 	// Make sure it's >= the minimum size.
; 283  : 	if (pages < l_pageCount) pages = l_pageCount;

	mov	eax, DWORD PTR l_pageCount
	cmp	DWORD PTR pages$[rsp], eax
	jae	SHORT $LN2@allocate_n
	mov	eax, DWORD PTR l_pageCount
	mov	DWORD PTR pages$[rsp], eax
$LN2@allocate_n:

; 284  : 
; 285  : 	tag = (struct boundary_tag*)liballoc_alloc(pages);

	mov	ecx, DWORD PTR pages$[rsp]
	call	liballoc_alloc
	mov	QWORD PTR tag$[rsp], rax

; 286  : 
; 287  : 	if (tag == NULL) return NULL;	// uh oh, we ran out of memory.

	cmp	QWORD PTR tag$[rsp], 0
	jne	SHORT $LN1@allocate_n
	xor	eax, eax
	jmp	SHORT $LN4@allocate_n
$LN1@allocate_n:

; 288  : 
; 289  : 	tag->magic = LIBALLOC_MAGIC;

	mov	rax, QWORD PTR tag$[rsp]
	mov	DWORD PTR [rax], -1073626914		; c001c0deH

; 290  : 	tag->size = size;

	mov	rax, QWORD PTR tag$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 291  : 	tag->real_size = pages * l_pageSize;

	mov	eax, DWORD PTR pages$[rsp]
	imul	eax, DWORD PTR l_pageSize
	mov	rcx, QWORD PTR tag$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 292  : 	tag->index = -1;

	mov	rax, QWORD PTR tag$[rsp]
	mov	DWORD PTR [rax+12], -1

; 293  : 
; 294  : 	tag->next = NULL;

	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+32], 0

; 295  : 	tag->prev = NULL;

	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+40], 0

; 296  : 	tag->split_left = NULL;

	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+16], 0

; 297  : 	tag->split_right = NULL;

	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+24], 0

; 298  : 
; 299  : 
; 300  : #ifdef DEBUG
; 301  : 	printf("Resource allocated %x of %i pages (%i bytes) for %i size.\n", tag, pages, pages * l_pageSize, size);
; 302  : 
; 303  : 	l_allocated += pages * l_pageSize;
; 304  : 
; 305  : 	printf("Total memory usage = %i KB\n", (int)((l_allocated / (1024))));
; 306  : #endif
; 307  : 
; 308  : 	return tag;

	mov	rax, QWORD PTR tag$[rsp]
$LN4@allocate_n:

; 309  : }

	add	rsp, 56					; 00000038H
	ret	0
?allocate_new_tag@@YAPEAUboundary_tag@@I@Z ENDP		; allocate_new_tag
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
remainder$ = 32
new_tag$ = 40
tag$ = 64
?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z PROC		; split_tag

; 241  : {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 242  : 	unsigned int remainder = tag->real_size - sizeof(struct boundary_tag) - tag->size;

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	rax, 48					; 00000030H
	mov	rcx, QWORD PTR tag$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	sub	rax, rcx
	mov	DWORD PTR remainder$[rsp], eax

; 243  : 	struct boundary_tag *new_tag =
; 244  : 		(struct boundary_tag*)((size_t)tag + sizeof(struct boundary_tag) + tag->size);

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tag$[rsp]
	lea	rax, QWORD PTR [rcx+rax+48]
	mov	QWORD PTR new_tag$[rsp], rax

; 245  : 	new_tag->magic = LIBALLOC_MAGIC;

	mov	rax, QWORD PTR new_tag$[rsp]
	mov	DWORD PTR [rax], -1073626914		; c001c0deH

; 246  : 	new_tag->real_size = remainder;

	mov	rax, QWORD PTR new_tag$[rsp]
	mov	ecx, DWORD PTR remainder$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 247  : 
; 248  : 	new_tag->next = NULL;

	mov	rax, QWORD PTR new_tag$[rsp]
	mov	QWORD PTR [rax+32], 0

; 249  : 	new_tag->prev = NULL;

	mov	rax, QWORD PTR new_tag$[rsp]
	mov	QWORD PTR [rax+40], 0

; 250  : 
; 251  : 	new_tag->split_left = tag;

	mov	rax, QWORD PTR new_tag$[rsp]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 252  : 	new_tag->split_right = tag->split_right;

	mov	rax, QWORD PTR new_tag$[rsp]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 253  : 
; 254  : 	if (new_tag->split_right != NULL) new_tag->split_right->split_left = new_tag;

	mov	rax, QWORD PTR new_tag$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN1@split_tag
	mov	rax, QWORD PTR new_tag$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR new_tag$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN1@split_tag:

; 255  : 	tag->split_right = new_tag;

	mov	rax, QWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR new_tag$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 256  : 
; 257  : 	tag->real_size -= new_tag->real_size;

	mov	rax, QWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR new_tag$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR tag$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 258  : 	insert_tag(new_tag, -1);

	mov	edx, -1
	mov	rcx, QWORD PTR new_tag$[rsp]
	call	?insert_tag@@YAXPEAUboundary_tag@@H@Z	; insert_tag

; 259  : 
; 260  : 	return new_tag;

	mov	rax, QWORD PTR new_tag$[rsp]

; 261  : }

	add	rsp, 56					; 00000038H
	ret	0
?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z ENDP		; split_tag
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
right$ = 32
tag$ = 64
?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z PROC	; absorb_right

; 226  : {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 227  : 	struct boundary_tag *right = tag->split_right;

	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR right$[rsp], rax

; 228  : 
; 229  : 	remove_tag(right);		// Remove right from free pages.

	mov	rcx, QWORD PTR right$[rsp]
	call	?remove_tag@@YAXPEAUboundary_tag@@@Z	; remove_tag

; 230  : 
; 231  : 	tag->real_size += right->real_size;

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR right$[rsp]
	add	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 232  : 
; 233  : 	tag->split_right = right->split_right;

	mov	rax, QWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR right$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 234  : 	if (right->split_right != NULL)

	mov	rax, QWORD PTR right$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN1@absorb_rig

; 235  : 		right->split_right->split_left = tag;

	mov	rax, QWORD PTR right$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN1@absorb_rig:

; 236  : 
; 237  : 	return tag;

	mov	rax, QWORD PTR tag$[rsp]

; 238  : }

	add	rsp, 56					; 00000038H
	ret	0
?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z ENDP	; absorb_right
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
left$ = 0
tag$ = 32
?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z PROC		; melt_left

; 213  : {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 214  : 	struct boundary_tag *left = tag->split_left;

	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR left$[rsp], rax

; 215  : 
; 216  : 	left->real_size += tag->real_size;

	mov	rax, QWORD PTR left$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR tag$[rsp]
	add	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR left$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 217  : 	left->split_right = tag->split_right;

	mov	rax, QWORD PTR left$[rsp]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 218  : 
; 219  : 	if (tag->split_right != NULL) tag->split_right->split_left = left;

	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN1@melt_left
	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR left$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN1@melt_left:

; 220  : 
; 221  : 	return left;

	mov	rax, QWORD PTR left$[rsp]

; 222  : }

	add	rsp, 24
	ret	0
?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z ENDP		; melt_left
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
tag$ = 8
?remove_tag@@YAXPEAUboundary_tag@@@Z PROC		; remove_tag

; 200  : {

	mov	QWORD PTR [rsp+8], rcx

; 201  : 	if (l_freePages[tag->index] == tag) l_freePages[tag->index] = tag->next;

	mov	rax, QWORD PTR tag$[rsp]
	movsxd	rax, DWORD PTR [rax+12]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	mov	rdx, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rcx+rax*8], rdx
	jne	SHORT $LN3@remove_tag
	mov	rax, QWORD PTR tag$[rsp]
	movsxd	rax, DWORD PTR [rax+12]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	mov	rdx, QWORD PTR tag$[rsp]
	mov	rdx, QWORD PTR [rdx+32]
	mov	QWORD PTR [rcx+rax*8], rdx
$LN3@remove_tag:

; 202  : 
; 203  : 	if (tag->prev != NULL) tag->prev->next = tag->next;

	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN2@remove_tag
	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+32], rcx
$LN2@remove_tag:

; 204  : 	if (tag->next != NULL) tag->next->prev = tag->prev;

	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN1@remove_tag
	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+40], rcx
$LN1@remove_tag:

; 205  : 
; 206  : 	tag->next = NULL;

	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+32], 0

; 207  : 	tag->prev = NULL;

	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+40], 0

; 208  : 	tag->index = -1;

	mov	rax, QWORD PTR tag$[rsp]
	mov	DWORD PTR [rax+12], -1

; 209  : }

	ret	0
?remove_tag@@YAXPEAUboundary_tag@@@Z ENDP		; remove_tag
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
realIndex$ = 32
tag$ = 64
index$ = 72
?insert_tag@@YAXPEAUboundary_tag@@H@Z PROC		; insert_tag

; 176  : {

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 177  : 	int realIndex = 0;

	mov	DWORD PTR realIndex$[rsp], 0

; 178  : 
; 179  : 	if (index < 0)

	cmp	DWORD PTR index$[rsp], 0
	jge	SHORT $LN4@insert_tag

; 180  : 	{
; 181  : 		realIndex = getexp(tag->real_size - sizeof(struct boundary_tag));

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	rax, 48					; 00000030H
	mov	ecx, eax
	call	?getexp@@YAHI@Z				; getexp
	mov	DWORD PTR realIndex$[rsp], eax

; 182  : 
; 183  : 		if (realIndex < MINEXP) realIndex = MINEXP;

	cmp	DWORD PTR realIndex$[rsp], 8
	jge	SHORT $LN3@insert_tag
	mov	DWORD PTR realIndex$[rsp], 8
$LN3@insert_tag:

; 184  : 	}
; 185  : 	else

	jmp	SHORT $LN2@insert_tag
$LN4@insert_tag:

; 186  : 		realIndex = index;

	mov	eax, DWORD PTR index$[rsp]
	mov	DWORD PTR realIndex$[rsp], eax
$LN2@insert_tag:

; 187  : 
; 188  : 	tag->index = realIndex;

	mov	rax, QWORD PTR tag$[rsp]
	mov	ecx, DWORD PTR realIndex$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 189  : 
; 190  : 	if (l_freePages[realIndex] != NULL)

	movsxd	rax, DWORD PTR realIndex$[rsp]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN1@insert_tag

; 191  : 	{
; 192  : 		l_freePages[realIndex]->prev = tag;

	movsxd	rax, DWORD PTR realIndex$[rsp]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 193  : 		tag->next = l_freePages[realIndex];

	movsxd	rax, DWORD PTR realIndex$[rsp]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	mov	rdx, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR [rdx+32], rax
$LN1@insert_tag:

; 194  : 	}
; 195  : 
; 196  : 	l_freePages[realIndex] = tag;

	movsxd	rax, DWORD PTR realIndex$[rsp]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	mov	rdx, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 197  : }

	add	rsp, 56					; 00000038H
	ret	0
?insert_tag@@YAXPEAUboundary_tag@@H@Z ENDP		; insert_tag
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
ldest$ = 0
lsrc$ = 8
cdest$ = 16
csrc$ = 24
s1$ = 48
s2$ = 56
n$ = 64
?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z PROC		; liballoc_memcpy

; 115  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 116  : 	char *cdest;
; 117  : 	char *csrc;
; 118  : 	unsigned int *ldest = (unsigned int*)s1;

	mov	rax, QWORD PTR s1$[rsp]
	mov	QWORD PTR ldest$[rsp], rax

; 119  : 	unsigned int *lsrc = (unsigned int*)s2;

	mov	rax, QWORD PTR s2$[rsp]
	mov	QWORD PTR lsrc$[rsp], rax
$LN4@liballoc_m:

; 120  : 
; 121  : 	while (n >= sizeof(unsigned int))

	cmp	QWORD PTR n$[rsp], 4
	jb	SHORT $LN3@liballoc_m

; 122  : 	{
; 123  : 		*ldest++ = *lsrc++;

	mov	rax, QWORD PTR ldest$[rsp]
	mov	rcx, QWORD PTR lsrc$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR ldest$[rsp]
	add	rax, 4
	mov	QWORD PTR ldest$[rsp], rax
	mov	rax, QWORD PTR lsrc$[rsp]
	add	rax, 4
	mov	QWORD PTR lsrc$[rsp], rax

; 124  : 		n -= sizeof(unsigned int);

	mov	rax, QWORD PTR n$[rsp]
	sub	rax, 4
	mov	QWORD PTR n$[rsp], rax

; 125  : 	}

	jmp	SHORT $LN4@liballoc_m
$LN3@liballoc_m:

; 126  : 
; 127  : 	cdest = (char*)ldest;

	mov	rax, QWORD PTR ldest$[rsp]
	mov	QWORD PTR cdest$[rsp], rax

; 128  : 	csrc = (char*)lsrc;

	mov	rax, QWORD PTR lsrc$[rsp]
	mov	QWORD PTR csrc$[rsp], rax
$LN2@liballoc_m:

; 129  : 
; 130  : 	while (n > 0)

	cmp	QWORD PTR n$[rsp], 0
	jbe	SHORT $LN1@liballoc_m

; 131  : 	{
; 132  : 		*cdest++ = *csrc++;

	mov	rax, QWORD PTR cdest$[rsp]
	mov	rcx, QWORD PTR csrc$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR cdest$[rsp]
	inc	rax
	mov	QWORD PTR cdest$[rsp], rax
	mov	rax, QWORD PTR csrc$[rsp]
	inc	rax
	mov	QWORD PTR csrc$[rsp], rax

; 133  : 		n -= 1;

	mov	rax, QWORD PTR n$[rsp]
	dec	rax
	mov	QWORD PTR n$[rsp], rax

; 134  : 	}

	jmp	SHORT $LN2@liballoc_m
$LN1@liballoc_m:

; 135  : 
; 136  : 	return s1;

	mov	rax, QWORD PTR s1$[rsp]

; 137  : }

	add	rsp, 40					; 00000028H
	ret	0
?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z ENDP		; liballoc_memcpy
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
i$ = 0
s$ = 32
c$ = 40
n$ = 48
?liballoc_memset@@YAPEAXPEAXH_K@Z PROC			; liballoc_memset

; 106  : {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 107  : 	int i;
; 108  : 	for (i = 0; i < n; i++)

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN3@liballoc_m
$LN2@liballoc_m:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN3@liballoc_m:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	rax, QWORD PTR n$[rsp]
	jae	SHORT $LN1@liballoc_m

; 109  : 		((char*)s)[i] = c;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	jmp	SHORT $LN2@liballoc_m
$LN1@liballoc_m:

; 110  : 
; 111  : 	return s;

	mov	rax, QWORD PTR s$[rsp]

; 112  : }

	add	rsp, 24
	ret	0
?liballoc_memset@@YAPEAXPEAXH_K@Z ENDP			; liballoc_memset
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
shift$ = 0
tv72 = 4
size$ = 32
?getexp@@YAHI@Z PROC					; getexp

; 79   : {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 80   : 	if (size < (1 << MINEXP))

	cmp	DWORD PTR size$[rsp], 256		; 00000100H
	jae	SHORT $LN4@getexp

; 81   : 	{
; 82   : #ifdef DEBUG
; 83   : 		printf("getexp returns -1 for %i less than MINEXP\n", size);
; 84   : #endif
; 85   : 		return -1;	// Smaller than the quantum.

	mov	eax, -1
	jmp	SHORT $LN5@getexp
$LN4@getexp:

; 86   : 	}
; 87   : 
; 88   : 
; 89   : 	int shift = MINEXP;

	mov	DWORD PTR shift$[rsp], 8
$LN3@getexp:

; 90   : 
; 91   : 	while (shift < MAXEXP)

	cmp	DWORD PTR shift$[rsp], 32		; 00000020H
	jge	SHORT $LN2@getexp

; 92   : 	{
; 93   : 		if ((1 << shift) > size) break;

	mov	eax, DWORD PTR shift$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv72[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv72[rsp]
	shl	eax, cl
	cmp	eax, DWORD PTR size$[rsp]
	jbe	SHORT $LN1@getexp
	jmp	SHORT $LN2@getexp
$LN1@getexp:

; 94   : 		shift += 1;

	mov	eax, DWORD PTR shift$[rsp]
	inc	eax
	mov	DWORD PTR shift$[rsp], eax

; 95   : 	}

	jmp	SHORT $LN3@getexp
$LN2@getexp:

; 96   : 
; 97   : #ifdef DEBUG
; 98   : 	printf("getexp returns %i (%i bytes) for %i size\n", shift - 1, (1 << (shift - 1)), size);
; 99   : #endif
; 100  : 
; 101  : 	return shift - 1;

	mov	eax, DWORD PTR shift$[rsp]
	dec	eax
$LN5@getexp:

; 102  : }

	add	rsp, 24
	ret	0
?getexp@@YAHI@Z ENDP					; getexp
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
index$ = 32
pages$1 = 36
tag$ = 40
ptr$ = 64
port_free PROC

; 425  : {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 426  : 	int index;
; 427  : 	struct boundary_tag *tag;
; 428  : 
; 429  : 	if (ptr == NULL) return;

	cmp	QWORD PTR ptr$[rsp], 0
	jne	SHORT $LN11@port_free
	jmp	$LN12@port_free
$LN11@port_free:

; 430  : 
; 431  : 	liballoc_lock();

	call	liballoc_lock

; 432  : 
; 433  : 
; 434  : 	tag = (struct boundary_tag*)((size_t)ptr - sizeof(boundary_tag));

	mov	rax, QWORD PTR ptr$[rsp]
	sub	rax, 48					; 00000030H
	mov	QWORD PTR tag$[rsp], rax

; 435  : 
; 436  : 	if (tag->magic != LIBALLOC_MAGIC)

	mov	rax, QWORD PTR tag$[rsp]
	cmp	DWORD PTR [rax], -1073626914		; c001c0deH
	je	SHORT $LN10@port_free

; 437  : 	{
; 438  : 		liballoc_unlock();		// release the lock

	call	liballoc_unlock

; 439  : 		return;

	jmp	$LN12@port_free
$LN10@port_free:
$LN9@port_free:

; 440  : 	}
; 441  : 
; 442  : 
; 443  : 
; 444  : #ifdef DEBUG
; 445  : 	l_inuse -= tag->size;
; 446  : 	printf("free: %x, %i, %i\n", ptr, (int)l_inuse / 1024, (int)l_allocated / 1024);
; 447  : #endif
; 448  : 
; 449  : 	// MELT LEFT...
; 450  : 	while ((tag->split_left != NULL) && (tag->split_left->index >= 0))

	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN8@port_free
	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+16]
	cmp	DWORD PTR [rax+12], 0
	jl	SHORT $LN8@port_free

; 451  : 	{
; 452  : #ifdef DEBUG
; 453  : 		printf("Melting tag left into available memory. Left was %i, becomes %i (%i)\n", tag->split_left->real_size, tag->split_left->real_size + tag->real_size, tag->split_left->real_size);
; 454  : #endif
; 455  : 		tag = melt_left(tag);

	mov	rcx, QWORD PTR tag$[rsp]
	call	?melt_left@@YAPEAUboundary_tag@@PEAU1@@Z ; melt_left
	mov	QWORD PTR tag$[rsp], rax

; 456  : 		remove_tag(tag);

	mov	rcx, QWORD PTR tag$[rsp]
	call	?remove_tag@@YAXPEAUboundary_tag@@@Z	; remove_tag

; 457  : 	}

	jmp	SHORT $LN9@port_free
$LN8@port_free:
$LN7@port_free:

; 458  : 
; 459  : 	// MELT RIGHT...
; 460  : 	while ((tag->split_right != NULL) && (tag->split_right->index >= 0))

	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN6@port_free
	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+24]
	cmp	DWORD PTR [rax+12], 0
	jl	SHORT $LN6@port_free

; 461  : 	{
; 462  : #ifdef DEBUG
; 463  : 		printf("Melting tag right into available memory. This was was %i, becomes %i (%i)\n", tag->real_size, tag->split_right->real_size + tag->real_size, tag->split_right->real_size);
; 464  : #endif
; 465  : 		tag = absorb_right(tag);

	mov	rcx, QWORD PTR tag$[rsp]
	call	?absorb_right@@YAPEAUboundary_tag@@PEAU1@@Z ; absorb_right
	mov	QWORD PTR tag$[rsp], rax

; 466  : 	}

	jmp	SHORT $LN7@port_free
$LN6@port_free:

; 467  : 
; 468  : 
; 469  : 	// Where is it going back to?
; 470  : 	index = getexp(tag->real_size - sizeof(struct boundary_tag));

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	rax, 48					; 00000030H
	mov	ecx, eax
	call	?getexp@@YAHI@Z				; getexp
	mov	DWORD PTR index$[rsp], eax

; 471  : 	if (index < MINEXP) index = MINEXP;

	cmp	DWORD PTR index$[rsp], 8
	jge	SHORT $LN5@port_free
	mov	DWORD PTR index$[rsp], 8
$LN5@port_free:

; 472  : 
; 473  : 	// A whole, empty block?
; 474  : 	if ((tag->split_left == NULL) && (tag->split_right == NULL))

	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	$LN4@port_free
	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	$LN4@port_free

; 475  : 	{
; 476  : 
; 477  : 		if (l_completePages[index] == MAXCOMPLETE)

	movsxd	rax, DWORD PTR index$[rsp]
	lea	rcx, OFFSET FLAT:?l_completePages@@3PAHA ; l_completePages
	cmp	DWORD PTR [rcx+rax*4], 5
	jne	SHORT $LN3@port_free

; 478  : 		{
; 479  : 			// Too many standing by to keep. Free this one.
; 480  : 			unsigned int pages = tag->real_size / l_pageSize;

	xor	edx, edx
	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	div	DWORD PTR l_pageSize
	mov	DWORD PTR pages$1[rsp], eax

; 481  : 
; 482  : 			if ((tag->real_size % l_pageSize) != 0) pages += 1;

	xor	edx, edx
	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	div	DWORD PTR l_pageSize
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN2@port_free
	mov	eax, DWORD PTR pages$1[rsp]
	inc	eax
	mov	DWORD PTR pages$1[rsp], eax
$LN2@port_free:

; 483  : 			if (pages < l_pageCount) pages = l_pageCount;

	mov	eax, DWORD PTR l_pageCount
	cmp	DWORD PTR pages$1[rsp], eax
	jae	SHORT $LN1@port_free
	mov	eax, DWORD PTR l_pageCount
	mov	DWORD PTR pages$1[rsp], eax
$LN1@port_free:

; 484  : 
; 485  : 			liballoc_free(tag, pages);

	mov	edx, DWORD PTR pages$1[rsp]
	mov	rcx, QWORD PTR tag$[rsp]
	call	liballoc_free

; 486  : 
; 487  : #ifdef DEBUG
; 488  : 			l_allocated -= pages * l_pageSize;
; 489  : 			printf("Resource freeing %x of %i pages\n", tag, pages);
; 490  : 			dump_array();
; 491  : #endif
; 492  : 
; 493  : 			liballoc_unlock();

	call	liballoc_unlock

; 494  : 			return;

	jmp	SHORT $LN12@port_free
$LN3@port_free:

; 495  : 		}
; 496  : 
; 497  : 
; 498  : 		l_completePages[index] += 1;	// Increase the count of complete pages.

	movsxd	rax, DWORD PTR index$[rsp]
	lea	rcx, OFFSET FLAT:?l_completePages@@3PAHA ; l_completePages
	mov	eax, DWORD PTR [rcx+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR index$[rsp]
	lea	rdx, OFFSET FLAT:?l_completePages@@3PAHA ; l_completePages
	mov	DWORD PTR [rdx+rcx*4], eax
$LN4@port_free:

; 499  : 	}
; 500  : 
; 501  : 
; 502  : 	// ..........
; 503  : 
; 504  : 
; 505  : 	insert_tag(tag, index);

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR tag$[rsp]
	call	?insert_tag@@YAXPEAUboundary_tag@@H@Z	; insert_tag

; 506  : 
; 507  : #ifdef DEBUG
; 508  : 	printf("Returning tag with %i bytes (requested %i bytes), which has exponent: %i\n", tag->real_size, tag->size, index);
; 509  : 	dump_array();
; 510  : #endif
; 511  : 
; 512  : 	liballoc_unlock();

	call	liballoc_unlock
$LN12@port_free:

; 513  : }

	add	rsp, 56					; 00000038H
	ret	0
port_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
real_size$ = 32
p$ = 40
nobj$ = 64
size$ = 72
port_calloc PROC

; 519  : {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 520  : 	int real_size;
; 521  : 	void *p;
; 522  : 
; 523  : 	real_size = nobj * size;

	mov	rax, QWORD PTR nobj$[rsp]
	imul	rax, QWORD PTR size$[rsp]
	mov	DWORD PTR real_size$[rsp], eax

; 524  : 
; 525  : 	p = port_malloc(real_size);

	mov	ecx, DWORD PTR real_size$[rsp]
	call	port_malloc
	mov	QWORD PTR p$[rsp], rax

; 526  : 
; 527  : 	liballoc_memset(p, 0, real_size);

	movsxd	rax, DWORD PTR real_size$[rsp]
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR p$[rsp]
	call	?liballoc_memset@@YAPEAXPEAXH_K@Z	; liballoc_memset

; 528  : 
; 529  : 	return p;

	mov	rax, QWORD PTR p$[rsp]

; 530  : }

	add	rsp, 56					; 00000038H
	ret	0
port_calloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
real_size$ = 32
ptr$ = 40
tag$ = 48
p$ = 80
size$ = 88
port_realloc PROC

; 535  : {

$LN8:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 536  : 	void *ptr;
; 537  : 	struct boundary_tag *tag;
; 538  : 	int real_size;
; 539  : 
; 540  : 	if (size == 0)

	cmp	DWORD PTR size$[rsp], 0
	jne	SHORT $LN5@port_reall

; 541  : 	{
; 542  : 		port_free(p);

	mov	rcx, QWORD PTR p$[rsp]
	call	port_free

; 543  : 		return NULL;

	xor	eax, eax
	jmp	$LN6@port_reall
$LN5@port_reall:

; 544  : 	}
; 545  : 	if (p == NULL) return port_malloc(size);

	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN4@port_reall
	mov	ecx, DWORD PTR size$[rsp]
	call	port_malloc
	jmp	$LN6@port_reall
$LN4@port_reall:

; 546  : 
; 547  : 	if (liballoc_lock != NULL) liballoc_lock();		// lockit

	lea	rax, OFFSET FLAT:liballoc_lock
	test	rax, rax
	je	SHORT $LN3@port_reall
	call	liballoc_lock
$LN3@port_reall:

; 548  : 	tag = (boundary_tag*)((size_t)p - sizeof(boundary_tag));

	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 48					; 00000030H
	mov	QWORD PTR tag$[rsp], rax

; 549  : 	real_size = tag->size;

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR real_size$[rsp], eax

; 550  : 	if (liballoc_unlock != NULL) liballoc_unlock();

	lea	rax, OFFSET FLAT:liballoc_unlock
	test	rax, rax
	je	SHORT $LN2@port_reall
	call	liballoc_unlock
$LN2@port_reall:

; 551  : 
; 552  : 	if (real_size > size) real_size = size;

	mov	eax, DWORD PTR size$[rsp]
	cmp	DWORD PTR real_size$[rsp], eax
	jbe	SHORT $LN1@port_reall
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR real_size$[rsp], eax
$LN1@port_reall:

; 553  : 
; 554  : 	ptr = port_malloc(size);

	mov	ecx, DWORD PTR size$[rsp]
	call	port_malloc
	mov	QWORD PTR ptr$[rsp], rax

; 555  : 	liballoc_memcpy(ptr, p, real_size);

	movsxd	rax, DWORD PTR real_size$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR ptr$[rsp]
	call	?liballoc_memcpy@@YAPEAXPEAXPEBX_K@Z	; liballoc_memcpy

; 556  : 	port_free(p);

	mov	rcx, QWORD PTR p$[rsp]
	call	port_free

; 557  : 	return ptr;

	mov	rax, QWORD PTR ptr$[rsp]
$LN6@port_reall:

; 558  : }

	add	rsp, 72					; 00000048H
	ret	0
port_realloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
index$ = 32
remainder$ = 36
childIndex$1 = 40
tag$ = 48
new_tag$2 = 56
ptr$ = 64
test$ = 72
size$ = 96
port_malloc PROC

; 314  : {

$LN17:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 315  : 	int index;
; 316  : 	void *ptr;
; 317  : 	struct boundary_tag *tag = NULL;

	mov	QWORD PTR tag$[rsp], 0

; 318  : 
; 319  : 	liballoc_lock();

	call	liballoc_lock

; 320  : 
; 321  : 	if (l_initialized == 0)

	cmp	DWORD PTR l_initialized, 0
	jne	SHORT $LN14@port_mallo

; 322  : 	{
; 323  : #ifdef DEBUG
; 324  : 		printf("%s\n", "liballoc initializing.");
; 325  : #endif
; 326  : 		for (index = 0; index < MAXEXP; index++)

	mov	DWORD PTR index$[rsp], 0
	jmp	SHORT $LN13@port_mallo
$LN12@port_mallo:
	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	DWORD PTR index$[rsp], eax
$LN13@port_mallo:
	cmp	DWORD PTR index$[rsp], 32		; 00000020H
	jge	SHORT $LN11@port_mallo

; 327  : 		{
; 328  : 			l_freePages[index] = NULL;

	movsxd	rax, DWORD PTR index$[rsp]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	mov	QWORD PTR [rcx+rax*8], 0

; 329  : 			l_completePages[index] = 0;

	movsxd	rax, DWORD PTR index$[rsp]
	lea	rcx, OFFSET FLAT:?l_completePages@@3PAHA ; l_completePages
	mov	DWORD PTR [rcx+rax*4], 0

; 330  : 		}

	jmp	SHORT $LN12@port_mallo
$LN11@port_mallo:

; 331  : 		l_initialized = 1;

	mov	DWORD PTR l_initialized, 1
$LN14@port_mallo:

; 332  : 	}
; 333  : 
; 334  : 	index = getexp(size) + MODE;

	mov	ecx, DWORD PTR size$[rsp]
	call	?getexp@@YAHI@Z				; getexp
	mov	DWORD PTR index$[rsp], eax

; 335  : 
; 336  : 	if (index < MINEXP) index = MINEXP;

	cmp	DWORD PTR index$[rsp], 8
	jge	SHORT $LN10@port_mallo
	mov	DWORD PTR index$[rsp], 8
$LN10@port_mallo:

; 337  : 
; 338  : 
; 339  : 	// Find one big enough.
; 340  : 	tag = l_freePages[index];				// Start at the front of the list.

	movsxd	rax, DWORD PTR index$[rsp]
	lea	rcx, OFFSET FLAT:?l_freePages@@3PAPEAUboundary_tag@@A ; l_freePages
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tag$[rsp], rax
$LN9@port_mallo:

; 341  : 	while (tag != NULL)

	cmp	QWORD PTR tag$[rsp], 0
	je	SHORT $LN8@port_mallo

; 342  : 	{
; 343  : 		// If there's enough space in this tag.
; 344  : 		if ((tag->real_size - sizeof(struct boundary_tag))
; 345  : 			>= (size + sizeof(struct boundary_tag)))

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	rax, 48					; 00000030H
	mov	ecx, DWORD PTR size$[rsp]
	add	rcx, 48					; 00000030H
	cmp	rax, rcx
	jb	SHORT $LN7@port_mallo

; 346  : 		{
; 347  : #ifdef DEBUG
; 348  : 			printf("Tag search found %i >= %i\n", (tag->real_size - sizeof(struct boundary_tag)), (size + sizeof(struct boundary_tag)));
; 349  : #endif
; 350  : 			break;

	jmp	SHORT $LN8@port_mallo
$LN7@port_mallo:

; 351  : 		}
; 352  : 
; 353  : 		tag = tag->next;

	mov	rax, QWORD PTR tag$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tag$[rsp], rax

; 354  : 	}

	jmp	SHORT $LN9@port_mallo
$LN8@port_mallo:

; 355  : 
; 356  : 
; 357  : 	// No page found. Make one.
; 358  : 	if (tag == NULL)

	cmp	QWORD PTR tag$[rsp], 0
	jne	SHORT $LN6@port_mallo

; 359  : 	{
; 360  : 		if ((tag = allocate_new_tag(size)) == NULL)

	mov	ecx, DWORD PTR size$[rsp]
	call	?allocate_new_tag@@YAPEAUboundary_tag@@I@Z ; allocate_new_tag
	mov	QWORD PTR tag$[rsp], rax
	cmp	QWORD PTR tag$[rsp], 0
	jne	SHORT $LN5@port_mallo

; 361  : 		{
; 362  : 			liballoc_unlock();

	call	liballoc_unlock

; 363  : 			return NULL;

	xor	eax, eax
	jmp	$LN15@port_mallo
$LN5@port_mallo:

; 364  : 		}
; 365  : 		index = getexp(tag->real_size - sizeof(struct boundary_tag));

	mov	rax, QWORD PTR tag$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	rax, 48					; 00000030H
	mov	ecx, eax
	call	?getexp@@YAHI@Z				; getexp
	mov	DWORD PTR index$[rsp], eax

; 366  : 	}
; 367  : 	else

	jmp	SHORT $LN4@port_mallo
$LN6@port_mallo:

; 368  : 	{
; 369  : 		remove_tag(tag);

	mov	rcx, QWORD PTR tag$[rsp]
	call	?remove_tag@@YAXPEAUboundary_tag@@@Z	; remove_tag

; 370  : 
; 371  : 		if ((tag->split_left == NULL) && (tag->split_right == NULL))

	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN3@port_mallo
	mov	rax, QWORD PTR tag$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN3@port_mallo

; 372  : 			l_completePages[index] -= 1;

	movsxd	rax, DWORD PTR index$[rsp]
	lea	rcx, OFFSET FLAT:?l_completePages@@3PAHA ; l_completePages
	mov	eax, DWORD PTR [rcx+rax*4]
	dec	eax
	movsxd	rcx, DWORD PTR index$[rsp]
	lea	rdx, OFFSET FLAT:?l_completePages@@3PAHA ; l_completePages
	mov	DWORD PTR [rdx+rcx*4], eax
$LN3@port_mallo:
$LN4@port_mallo:

; 373  : 	}
; 374  : 
; 375  : 	// We have a free page.  Remove it from the free pages list.
; 376  : 	tag->size = size;

	mov	rax, QWORD PTR tag$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 377  : 
; 378  : 	// Removed... see if we can re-use the excess space.
; 379  : 
; 380  : #ifdef DEBUG
; 381  : 	printf("Found tag with %i bytes available (requested %i bytes, leaving %i), which has exponent: %i (%i bytes)\n", tag->real_size - sizeof(struct boundary_tag), size, tag->real_size - size - sizeof(struct boundary_tag), index, 1 << index);
; 382  : #endif
; 383  : 	unsigned int remainder = tag->real_size - size - sizeof(boundary_tag)* 2; // Support a new tag + remainder

	mov	rax, QWORD PTR tag$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	eax, eax
	sub	rax, 96					; 00000060H
	mov	DWORD PTR remainder$[rsp], eax

; 384  : 
; 385  : 
; 386  : 	if (remainder > 0 /*&& ( (tag->real_size - remainder) >= (1<<MINEXP))*/)

	cmp	DWORD PTR remainder$[rsp], 0
	jbe	SHORT $LN2@port_mallo

; 387  : 	{
; 388  : 		int childIndex = getexp(remainder);

	mov	ecx, DWORD PTR remainder$[rsp]
	call	?getexp@@YAHI@Z				; getexp
	mov	DWORD PTR childIndex$1[rsp], eax

; 389  : 
; 390  : 		if (childIndex >= 0)

	cmp	DWORD PTR childIndex$1[rsp], 0
	jl	SHORT $LN1@port_mallo

; 391  : 		{
; 392  : #ifdef DEBUG
; 393  : 			printf("Seems to be splittable: %i >= 2^%i .. %i\n", remainder, childIndex, (1 << childIndex));
; 394  : #endif
; 395  : 			boundary_tag *new_tag = split_tag(tag);

	mov	rcx, QWORD PTR tag$[rsp]
	call	?split_tag@@YAPEAUboundary_tag@@PEAU1@@Z ; split_tag
	mov	QWORD PTR new_tag$2[rsp], rax

; 396  : 
; 397  : 			new_tag = new_tag;	// Get around the compiler warning about unused variables.

	mov	rax, QWORD PTR new_tag$2[rsp]
	mov	QWORD PTR new_tag$2[rsp], rax
$LN1@port_mallo:
$LN2@port_mallo:

; 398  : #ifdef DEBUG
; 399  : 			printf("Old tag has become %i bytes, new tag is now %i bytes (%i exp)\n", tag->real_size, new_tag->real_size, new_tag->index);
; 400  : #endif
; 401  : 		}
; 402  : 	}
; 403  : 
; 404  : 
; 405  : 	ptr = (void*)((size_t)tag + sizeof(struct boundary_tag));

	mov	rax, QWORD PTR tag$[rsp]
	add	rax, 48					; 00000030H
	mov	QWORD PTR ptr$[rsp], rax

; 406  : 
; 407  : 	boundary_tag *test = (boundary_tag*)((size_t)ptr - sizeof(boundary_tag));

	mov	rax, QWORD PTR ptr$[rsp]
	sub	rax, 48					; 00000030H
	mov	QWORD PTR test$[rsp], rax

; 408  : 
; 409  : #ifdef DEBUG
; 410  : 	l_inuse += size;
; 411  : 	printf("malloc: %x,  %i, %i\n", ptr, (int)l_inuse / 1024, (int)l_allocated / 1024);
; 412  : 	dump_array();
; 413  : #endif
; 414  : 
; 415  : 
; 416  : 	liballoc_unlock();

	call	liballoc_unlock

; 417  : 	return ptr;

	mov	rax, QWORD PTR ptr$[rsp]
$LN15@port_mallo:

; 418  : }

	add	rsp, 88					; 00000058H
	ret	0
port_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
ptr$ = 48
pages$ = 56
liballoc_free PROC

; 588  : int liballoc_free(void* ptr, int pages) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 589  : 	AuFreePages((uint64_t)ptr, true, pages);

	movsxd	rax, DWORD PTR pages$[rsp]
	mov	r8, rax
	mov	dl, 1
	mov	rcx, QWORD PTR ptr$[rsp]
	call	AuFreePages

; 590  : 	return 0;

	xor	eax, eax

; 591  : }

	add	rsp, 40					; 00000028H
	ret	0
liballoc_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
i$1 = 32
page$ = 40
page_$ = 48
p$2 = 56
size$ = 64
pages$ = 96
liballoc_alloc PROC

; 570  : void* liballoc_alloc(int pages) {

$LN9:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 571  : 	size_t size = pages * 4096;

	imul	eax, DWORD PTR pages$[rsp], 4096	; 00001000H
	cdqe
	mov	QWORD PTR size$[rsp], rax

; 572  : 	uint64_t* page = AuGetFreePage(0, false);

	xor	edx, edx
	xor	ecx, ecx
	call	AuGetFreePage
	mov	QWORD PTR page$[rsp], rax

; 573  : 	uint64_t page_ = (uint64_t)page;

	mov	rax, QWORD PTR page$[rsp]
	mov	QWORD PTR page_$[rsp], rax

; 574  : 
; 575  : 	for (size_t i = 0; i < pages; i++) {

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@liballoc_a
$LN5@liballoc_a:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN6@liballoc_a:
	movsxd	rax, DWORD PTR pages$[rsp]
	cmp	QWORD PTR i$1[rsp], rax
	jae	SHORT $LN4@liballoc_a

; 576  : 		void* p = AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR p$2[rsp], rax

; 577  : 		AuMapPage((uint64_t)p, page_ + i * 4096, 0);

	imul	rax, QWORD PTR i$1[rsp], 4096		; 00001000H
	mov	rcx, QWORD PTR page_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR p$2[rsp]
	call	AuMapPage

; 578  : 	}

	jmp	SHORT $LN5@liballoc_a
$LN4@liballoc_a:

; 579  : 	memset(page, 0, pages*PAGE_SIZE);

	imul	eax, DWORD PTR pages$[rsp], 4096	; 00001000H
	mov	r8d, eax
	xor	edx, edx
	mov	rcx, QWORD PTR page$[rsp]
	call	memset

; 580  : 	if ((page_ % PAGE_SIZE) != 0){

	xor	edx, edx
	mov	rax, QWORD PTR page_$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN3@liballoc_a

; 581  : 		SeTextOut("Request page not aligned to page boundary \r\n");

	lea	rcx, OFFSET FLAT:$SG2991
	call	SeTextOut
$LN2@liballoc_a:

; 582  : 		for (;;);

	jmp	SHORT $LN2@liballoc_a
$LN3@liballoc_a:

; 583  : 	}
; 584  : 
; 585  : 	return page;

	mov	rax, QWORD PTR page$[rsp]

; 586  : }

	add	rsp, 88					; 00000058H
	ret	0
liballoc_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
liballoc_unlock PROC

; 567  : 	return 0;

	xor	eax, eax

; 568  : }

	ret	0
liballoc_unlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\mm\liballoc\liballoc.cpp
_TEXT	SEGMENT
liballoc_lock PROC

; 562  : 	return 0;

	xor	eax, eax

; 563  : }

	ret	0
liballoc_lock ENDP
_TEXT	ENDS
END
