; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?early_spin@@3PAU_spinlock_@@A			; early_spin
_BSS	SEGMENT
?early_spin@@3PAU_spinlock_@@A DQ 08H DUP (?)		; early_spin
early_spinlock_cnt DB 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG2874	DB	'[aurora kernel]: lock -> %x is corrupted ', 0dH, 0aH, 00H
CONST	ENDS
PUBLIC	AuCreateSpinlock
PUBLIC	AuDeleteSpinlock
PUBLIC	AuAcquireSpinlock
PUBLIC	AuReleaseSpinlock
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	SeTextOut:PROC
EXTRN	x64_pause:PROC
EXTRN	x64_lock_test:PROC
pdata	SEGMENT
$pdata$AuCreateSpinlock DD imagerel $LN5
	DD	imagerel $LN5+115
	DD	imagerel $unwind$AuCreateSpinlock
$pdata$AuDeleteSpinlock DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$AuDeleteSpinlock
$pdata$AuAcquireSpinlock DD imagerel $LN10
	DD	imagerel $LN10+122
	DD	imagerel $unwind$AuAcquireSpinlock
$pdata$AuReleaseSpinlock DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$AuReleaseSpinlock
pdata	ENDS
xdata	SEGMENT
$unwind$AuCreateSpinlock DD 010801H
	DD	06208H
$unwind$AuDeleteSpinlock DD 010901H
	DD	04209H
$unwind$AuAcquireSpinlock DD 010901H
	DD	06209H
$unwind$AuReleaseSpinlock DD 010901H
	DD	04209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\sync\spinlock.cpp
_TEXT	SEGMENT
lock$ = 48
AuReleaseSpinlock PROC

; 89   : AU_EXTERN AU_EXPORT void AuReleaseSpinlock(Spinlock* lock) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 90   : 	if (!x64_lock_test(&lock->value, 1, 0))

	mov	rax, QWORD PTR lock$[rsp]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	x64_lock_test
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@AuReleaseS

; 91   : 		lock->value = 0;

	mov	rax, QWORD PTR lock$[rsp]
	mov	QWORD PTR [rax], 0
$LN1@AuReleaseS:

; 92   : }

	add	rsp, 40					; 00000028H
	ret	0
AuReleaseSpinlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\sync\spinlock.cpp
_TEXT	SEGMENT
lockd$1 = 32
lock$ = 64
AuAcquireSpinlock PROC

; 70   : AU_EXTERN AU_EXPORT void AuAcquireSpinlock(Spinlock* lock) {

$LN10:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 71   : 	if (lock->value > 1)  {

	mov	rax, QWORD PTR lock$[rsp]
	cmp	QWORD PTR [rax], 1
	jbe	SHORT $LN7@AuAcquireS

; 72   : 		SeTextOut("[aurora kernel]: lock -> %x is corrupted \r\n", lock);

	mov	rdx, QWORD PTR lock$[rsp]
	lea	rcx, OFFSET FLAT:$SG2874
	call	SeTextOut

; 73   : 		lock->value = 0;

	mov	rax, QWORD PTR lock$[rsp]
	mov	QWORD PTR [rax], 0
$LN7@AuAcquireS:
$LN6@AuAcquireS:

; 74   : 	}
; 75   : 	do {
; 76   : 		if (x64_lock_test(&lock->value, 0, 1)) {

	mov	rax, QWORD PTR lock$[rsp]
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, rax
	call	x64_lock_test
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@AuAcquireS

; 77   : 			break;

	jmp	SHORT $LN4@AuAcquireS
$LN3@AuAcquireS:

; 78   : 		}
; 79   : 		x64_pause();

	call	x64_pause

; 80   : 		volatile size_t* lockd = &lock->value;

	mov	rax, QWORD PTR lock$[rsp]
	mov	QWORD PTR lockd$1[rsp], rax
$LN2@AuAcquireS:

; 81   : 		while (*lockd == 1);

	mov	rax, QWORD PTR lockd$1[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	rax, 1
	jne	SHORT $LN1@AuAcquireS
	jmp	SHORT $LN2@AuAcquireS
$LN1@AuAcquireS:

; 82   : 	} while (1);

	xor	eax, eax
	cmp	eax, 1
	jne	SHORT $LN6@AuAcquireS
$LN4@AuAcquireS:

; 83   : }

	add	rsp, 56					; 00000038H
	ret	0
AuAcquireSpinlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\sync\spinlock.cpp
_TEXT	SEGMENT
lock$ = 48
AuDeleteSpinlock PROC

; 62   : AU_EXTERN AU_EXPORT void AuDeleteSpinlock(Spinlock* lock) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 63   : 	kfree(lock);

	mov	rcx, QWORD PTR lock$[rsp]
	call	kfree

; 64   : }

	add	rsp, 40					; 00000028H
	ret	0
AuDeleteSpinlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\sync\spinlock.cpp
_TEXT	SEGMENT
spinlock$ = 32
early$ = 64
AuCreateSpinlock PROC

; 44   : AU_EXTERN AU_EXPORT Spinlock* AuCreateSpinlock(bool early) {

$LN5:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 45   : 	Spinlock* spinlock = NULL;

	mov	QWORD PTR spinlock$[rsp], 0

; 46   : 	if (early) {

	movzx	eax, BYTE PTR early$[rsp]
	test	eax, eax
	je	SHORT $LN2@AuCreateSp

; 47   : 		spinlock = &early_spin[early_spinlock_cnt];

	movzx	eax, BYTE PTR early_spinlock_cnt
	lea	rcx, OFFSET FLAT:?early_spin@@3PAU_spinlock_@@A ; early_spin
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR spinlock$[rsp], rax

; 48   : 		spinlock->value = 0;

	mov	rax, QWORD PTR spinlock$[rsp]
	mov	QWORD PTR [rax], 0

; 49   : 		early_spinlock_cnt++;

	movzx	eax, BYTE PTR early_spinlock_cnt
	inc	al
	mov	BYTE PTR early_spinlock_cnt, al

; 50   : 	}
; 51   : 	else {

	jmp	SHORT $LN1@AuCreateSp
$LN2@AuCreateSp:

; 52   : 		spinlock = (Spinlock*)kmalloc(sizeof(Spinlock));

	mov	ecx, 8
	call	kmalloc
	mov	QWORD PTR spinlock$[rsp], rax

; 53   : 		spinlock->value = 0;

	mov	rax, QWORD PTR spinlock$[rsp]
	mov	QWORD PTR [rax], 0
$LN1@AuCreateSp:

; 54   : 	}
; 55   : 
; 56   : 	return spinlock;

	mov	rax, QWORD PTR spinlock$[rsp]

; 57   : }

	add	rsp, 56					; 00000038H
	ret	0
AuCreateSpinlock ENDP
_TEXT	ENDS
END
