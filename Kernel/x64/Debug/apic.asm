; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ADBAD9C4_apic@cpp DB 01H
__303BDA61_stdint@h DB 01H
msvcjmc	ENDS
PUBLIC	?ReadAPICRegister@@YA_KG@Z			; ReadAPICRegister
PUBLIC	?WriteAPICRegister@@YAXG_K@Z			; WriteAPICRegister
PUBLIC	?AuAPICInitialise@@YAX_N@Z			; AuAPICInitialise
PUBLIC	?APICLocalEOI@@YAXXZ				; APICLocalEOI
PUBLIC	?APICTimerSleep@@YAXI@Z				; APICTimerSleep
PUBLIC	?X2APICSupported@@YA_NXZ			; X2APICSupported
PUBLIC	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z		; raw_offset<unsigned int volatile *,void *>
PUBLIC	?IOWait@@YAXXZ					; IOWait
PUBLIC	?APICSpuriousInterrupt@@YAX_KPEAX@Z		; APICSpuriousInterrupt
PUBLIC	?ApicTimerInterrupt@@YAX_KPEAX@Z		; ApicTimerInterrupt
PUBLIC	__JustMyCode_Default
EXTRN	?IOAPICInitialise@@YAXPEAX@Z:PROC		; IOAPICInitialise
EXTRN	?cpu_read_tsc@@YA_KXZ:PROC			; cpu_read_tsc
EXTRN	setvect:PROC
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	x64_outportb:PROC
EXTRN	x64_read_msr:PROC
EXTRN	x64_write_msr:PROC
EXTRN	x64_mfence:PROC
EXTRN	x64_cpuid:PROC
EXTRN	AuMapMMIO:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
_BSS	SEGMENT
?__x2apic@@3_NA DB 01H DUP (?)				; __x2apic
	ALIGN	8

?_apic@@3PEAXEA DQ 01H DUP (?)				; _apic
?apic_timer_count@@3HA DD 01H DUP (?)			; apic_timer_count
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ReadAPICRegister@@YA_KG@Z DD imagerel $LN6
	DD	imagerel $LN6+194
	DD	imagerel $unwind$?ReadAPICRegister@@YA_KG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WriteAPICRegister@@YAXG_K@Z DD imagerel $LN6
	DD	imagerel $LN6+259
	DD	imagerel $unwind$?WriteAPICRegister@@YAXG_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuAPICInitialise@@YAX_N@Z DD imagerel $LN12
	DD	imagerel $LN12+503
	DD	imagerel $unwind$?AuAPICInitialise@@YAX_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?APICLocalEOI@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?APICLocalEOI@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?APICTimerSleep@@YAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$?APICTimerSleep@@YAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?X2APICSupported@@YA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?X2APICSupported@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IOWait@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+64
	DD	imagerel $unwind$?IOWait@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?APICSpuriousInterrupt@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?APICSpuriousInterrupt@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ApicTimerInterrupt@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?ApicTimerInterrupt@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ApicTimerInterrupt@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?APICSpuriousInterrupt@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	017H
	DB	021H
	DB	028H
	DB	02cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IOWait@@YAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?X2APICSupported@@YA_NXZ DD 035040e01H
	DD	0109330eH
	DD	050020012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?APICTimerSleep@@YAXI@Z DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?APICLocalEOI@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuAPICInitialise@@YAX_N@Z DD 025041101H
	DD	010c2311H
	DD	050050014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0c5H
	DB	0d3H
	DB	0fbH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WriteAPICRegister@@YAXG_K@Z DD 025041701H
	DD	01122317H
	DD	0500b0012H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	086H
	DB	08eH
	DB	0b8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReadAPICRegister@@YA_KG@Z DD 025031201H
	DD	0f20d2312H
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?ApicTimerInterrupt@@YAX_KPEAX@Z
_TEXT	SEGMENT
p$ = 80
param$ = 88
?ApicTimerInterrupt@@YAX_KPEAX@Z PROC			; ApicTimerInterrupt, COMDAT

; 136  : void ApicTimerInterrupt(size_t p, void* param) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 137  : 	x64_cli();

	call	x64_cli

; 138  : 	apic_timer_count++;

	mov	eax, DWORD PTR ?apic_timer_count@@3HA
	inc	eax
	mov	DWORD PTR ?apic_timer_count@@3HA, eax

; 139  : 	APICLocalEOI();

	call	?APICLocalEOI@@YAXXZ			; APICLocalEOI

; 140  : 	x64_sti();

	call	x64_sti

; 141  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ApicTimerInterrupt@@YAX_KPEAX@Z ENDP			; ApicTimerInterrupt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?APICSpuriousInterrupt@@YAX_KPEAX@Z
_TEXT	SEGMENT
p$ = 80
param$ = 88
?APICSpuriousInterrupt@@YAX_KPEAX@Z PROC		; APICSpuriousInterrupt, COMDAT

; 109  : void APICSpuriousInterrupt(size_t p, void* param){

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 110  : 
; 111  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?APICSpuriousInterrupt@@YAX_KPEAX@Z ENDP		; APICSpuriousInterrupt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?IOWait@@YAXXZ
_TEXT	SEGMENT
counter$ = 0
?IOWait@@YAXXZ PROC					; IOWait, COMDAT

; 104  : void IOWait() {

$LN6:
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 105  : 	volatile size_t counter = 0;

	mov	QWORD PTR counter$[rbp], 0
	jmp	SHORT $LN4@IOWait
$LN2@IOWait:

; 106  : 	for (; counter < 1000; ++counter);

	mov	rax, QWORD PTR counter$[rbp]
	inc	rax
	mov	QWORD PTR counter$[rbp], rax
$LN4@IOWait:
	mov	rax, QWORD PTR counter$[rbp]
	cmp	rax, 1000				; 000003e8H
	jae	SHORT $LN3@IOWait
	jmp	SHORT $LN2@IOWait
$LN3@IOWait:

; 107  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?IOWait@@YAXXZ ENDP					; IOWait
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z PROC		; raw_offset<unsigned int volatile *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z ENDP		; raw_offset<unsigned int volatile *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?X2APICSupported@@YA_NXZ
_TEXT	SEGMENT
a$ = 0
b$ = 8
c$ = 16
d$ = 24
?X2APICSupported@@YA_NXZ PROC				; X2APICSupported, COMDAT

; 98   : bool X2APICSupported() {

$LN3:
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 99   : 	size_t a, b, c, d;
; 100  : 	x64_cpuid(0x1, &a, &b, &c, &d);

	mov	QWORD PTR [rsp+40], 0
	lea	rax, QWORD PTR d$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR c$[rbp]
	lea	r8, QWORD PTR b$[rbp]
	lea	rdx, QWORD PTR a$[rbp]
	mov	ecx, 1
	call	x64_cpuid

; 101  : 	return false;

	xor	al, al

; 102  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?X2APICSupported@@YA_NXZ ENDP				; X2APICSupported
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?APICTimerSleep@@YAXI@Z
_TEXT	SEGMENT
tick$ = 0
ms$ = 96
?APICTimerSleep@@YAXI@Z PROC				; APICTimerSleep, COMDAT

; 208  : void APICTimerSleep(uint32_t ms) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 209  : 	uint32_t tick = ms + apic_timer_count;

	mov	eax, DWORD PTR ?apic_timer_count@@3HA
	mov	ecx, DWORD PTR ms$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tick$[rbp], eax
$LN2@APICTimerS:

; 210  : 	while (tick > apic_timer_count)

	mov	eax, DWORD PTR ?apic_timer_count@@3HA
	cmp	DWORD PTR tick$[rbp], eax
	jbe	SHORT $LN3@APICTimerS

; 211  : 		;

	jmp	SHORT $LN2@APICTimerS
$LN3@APICTimerS:

; 212  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?APICTimerSleep@@YAXI@Z ENDP				; APICTimerSleep
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?APICLocalEOI@@YAXXZ
_TEXT	SEGMENT
?APICLocalEOI@@YAXXZ PROC				; APICLocalEOI, COMDAT

; 94   : void APICLocalEOI() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 95   : 	WriteAPICRegister(LAPIC_REGISTER_EOI, 1);

	mov	edx, 1
	mov	cx, 11
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 96   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?APICLocalEOI@@YAXXZ ENDP				; APICLocalEOI
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?AuAPICInitialise@@YAX_N@Z
_TEXT	SEGMENT
apic_base$ = 0
before$ = 8
after$ = 16
ms$ = 24
target$ = 32
timer_vect$ = 40
timer_reg$ = 48
tv81 = 120
bsp$ = 144
?AuAPICInitialise@@YAX_N@Z PROC				; AuAPICInitialise, COMDAT

; 148  : void AuAPICInitialise(bool bsp) {

$LN12:
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 160				; 000000a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 149  : 	size_t apic_base;
; 150  : 	if (bsp) {

	movzx	eax, BYTE PTR bsp$[rbp]
	test	eax, eax
	je	SHORT $LN4@AuAPICInit

; 151  : 		apic_base = (size_t)0xFEE00000;

	mov	eax, -18874368				; fee00000H
	mov	QWORD PTR apic_base$[rbp], rax

; 152  : 		apic_timer_count = 0;

	mov	DWORD PTR ?apic_timer_count@@3HA, 0

; 153  : 
; 154  : 		if (X2APICSupported()) {

	call	?X2APICSupported@@YA_NXZ		; X2APICSupported
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@AuAPICInit

; 155  : 			__x2apic = true;

	mov	BYTE PTR ?__x2apic@@3_NA, 1

; 156  : 			apic_base |= IA32_APIC_BASE_MSR_X2APIC;

	mov	rax, QWORD PTR apic_base$[rbp]
	bts	rax, 10
	mov	QWORD PTR apic_base$[rbp], rax

; 157  : 		}

	jmp	SHORT $LN7@AuAPICInit
$LN6@AuAPICInit:

; 158  : 		else {
; 159  : 			_apic = (void*)AuMapMMIO(apic_base, 4);

	mov	edx, 4
	mov	rcx, QWORD PTR apic_base$[rbp]
	call	AuMapMMIO
	mov	QWORD PTR ?_apic@@3PEAXEA, rax
$LN7@AuAPICInit:

; 160  : 		}
; 161  : 
; 162  : 		apic_base |= IA32_APIC_BASE_MSR_ENABLE;

	mov	rax, QWORD PTR apic_base$[rbp]
	bts	rax, 11
	mov	QWORD PTR apic_base$[rbp], rax

; 163  : 		x64_write_msr(IA32_APIC_BASE_MSR, apic_base);

	mov	rdx, QWORD PTR apic_base$[rbp]
	mov	ecx, 27
	call	x64_write_msr

; 164  : 	}

	jmp	SHORT $LN5@AuAPICInit
$LN4@AuAPICInit:

; 165  :  else
; 166  : 	x64_write_msr(IA32_APIC_BASE_MSR, x64_read_msr(IA32_APIC_BASE_MSR) | IA32_APIC_BASE_MSR_ENABLE |

	movzx	eax, BYTE PTR ?__x2apic@@3_NA
	test	eax, eax
	je	SHORT $LN10@AuAPICInit
	mov	DWORD PTR tv81[rbp], 1024		; 00000400H
	jmp	SHORT $LN11@AuAPICInit
$LN10@AuAPICInit:
	mov	DWORD PTR tv81[rbp], 0
$LN11@AuAPICInit:
	mov	ecx, 27
	call	x64_read_msr
	bts	rax, 11
	movsxd	rcx, DWORD PTR tv81[rbp]
	or	rax, rcx
	mov	rdx, rax
	mov	ecx, 27
	call	x64_write_msr
$LN5@AuAPICInit:

; 167  : 		(__x2apic ? IA32_APIC_BASE_MSR_X2APIC : 0));
; 168  : 
; 169  : 	setvect(0xFF, APICSpuriousInterrupt);

	lea	rdx, OFFSET FLAT:?APICSpuriousInterrupt@@YAX_KPEAX@Z ; APICSpuriousInterrupt
	mov	ecx, 255				; 000000ffH
	call	setvect

; 170  : 
; 171  : 	WriteAPICRegister(LAPIC_REGISTER_SVR, ReadAPICRegister(LAPIC_REGISTER_SVR) |

	mov	cx, 15
	call	?ReadAPICRegister@@YA_KG@Z		; ReadAPICRegister
	bts	rax, 8
	or	rax, 255				; 000000ffH
	mov	rdx, rax
	mov	cx, 15
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 172  : 		IA32_APIC_SVR_ENABLE | 0xFF);
; 173  : 
; 174  : 
; 175  : 	/* here i thought to use pit for timer tuning, but
; 176  : 	 * apic stops working here when interrupt is enabled for
; 177  : 	 * pic
; 178  : 	 */
; 179  : 
; 180  : 	WriteAPICRegister(LAPIC_TIMER_DIV, 0x6);

	mov	edx, 6
	mov	cx, 992					; 000003e0H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 181  : 	uint64_t before = cpu_read_tsc();

	call	?cpu_read_tsc@@YA_KXZ			; cpu_read_tsc
	mov	QWORD PTR before$[rbp], rax

; 182  : 	WriteAPICRegister(LAPIC_REGISTER_TMRINITCNT, 1000000); //10000000000UL 

	mov	edx, 1000000				; 000f4240H
	mov	cx, 56					; 00000038H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister
$LN2@AuAPICInit:

; 183  : 	while (ReadAPICRegister(LAPIC_REGISTER_TMRCURRCNT));

	mov	cx, 57					; 00000039H
	call	?ReadAPICRegister@@YA_KG@Z		; ReadAPICRegister
	test	rax, rax
	je	SHORT $LN3@AuAPICInit
	jmp	SHORT $LN2@AuAPICInit
$LN3@AuAPICInit:

; 184  : 	uint64_t after = cpu_read_tsc();

	call	?cpu_read_tsc@@YA_KXZ			; cpu_read_tsc
	mov	QWORD PTR after$[rbp], rax

; 185  : 
; 186  : 
; 187  : 	uint64_t ms = (after - before) / 1190;

	mov	rax, QWORD PTR before$[rbp]
	mov	rcx, QWORD PTR after$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	xor	edx, edx
	mov	ecx, 1190				; 000004a6H
	div	rcx
	mov	QWORD PTR ms$[rbp], rax

; 188  : 	uint64_t target = 10000000000UL / ms;

	xor	edx, edx
	mov	rax, 10000000000			; 00000002540be400H
	div	QWORD PTR ms$[rbp]
	mov	QWORD PTR target$[rbp], rax

; 189  : 	size_t timer_vect = 0x40;

	mov	QWORD PTR timer_vect$[rbp], 64		; 00000040H

; 190  : 	setvect(timer_vect, ApicTimerInterrupt);

	lea	rdx, OFFSET FLAT:?ApicTimerInterrupt@@YAX_KPEAX@Z ; ApicTimerInterrupt
	mov	rcx, QWORD PTR timer_vect$[rbp]
	call	setvect

; 191  : 	WriteAPICRegister(LAPIC_REGISTER_TMRDIV,0x6);   //bit 0,1 and 3

	mov	edx, 6
	mov	cx, 62					; 0000003eH
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 192  : 	size_t timer_reg = (1 << 17) | timer_vect;

	mov	rax, QWORD PTR timer_vect$[rbp]
	bts	rax, 17
	mov	QWORD PTR timer_reg$[rbp], rax

; 193  : 	WriteAPICRegister(LAPIC_REGISTER_LVT_TIMER, timer_reg);

	mov	rdx, QWORD PTR timer_reg$[rbp]
	mov	cx, 50					; 00000032H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 194  : 	IOWait();

	call	?IOWait@@YAXXZ				; IOWait

; 195  : 
; 196  : 	WriteAPICRegister(LAPIC_REGISTER_TMRINITCNT, target);  //123456  //(target / 100) //target/100

	mov	rdx, QWORD PTR target$[rbp]
	mov	cx, 56					; 00000038H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 197  : 	
; 198  : 	x64_outportb(PIC1_DATA, 0xFF);

	mov	dl, 255					; 000000ffH
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 199  : 	IOWait();

	call	?IOWait@@YAXXZ				; IOWait

; 200  : 	x64_outportb(PIC2_DATA, 0xFF);

	mov	dl, 255					; 000000ffH
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 201  : 	//for (;;);
; 202  : 	/* initialise IOAPIC here*/
; 203  : 	if (bsp)

	movzx	eax, BYTE PTR bsp$[rbp]
	test	eax, eax
	je	SHORT $LN8@AuAPICInit

; 204  : 		IOAPICInitialise((void*)0xFEC00000);

	mov	ecx, -20971520				; fffffffffec00000H
	call	?IOAPICInitialise@@YAXPEAX@Z		; IOAPICInitialise
$LN8@AuAPICInit:

; 205  : }

	lea	rsp, QWORD PTR [rbp+128]
	pop	rbp
	ret	0
?AuAPICInitialise@@YAX_N@Z ENDP				; AuAPICInitialise
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?WriteAPICRegister@@YAXG_K@Z
_TEXT	SEGMENT
msr$1 = 0
reg_addr$2 = 8
reg_next_addr$3 = 16
low_part$4 = 24
high_part$5 = 28
reg_addr$6 = 32
reg$ = 128
value$ = 136
?WriteAPICRegister@@YAXG_K@Z PROC			; WriteAPICRegister, COMDAT

; 70   : void WriteAPICRegister(uint16_t reg, uint64_t value) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 71   : 	if (__x2apic) {

	movzx	eax, BYTE PTR ?__x2apic@@3_NA
	test	eax, eax
	je	SHORT $LN2@WriteAPICR

; 72   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rbp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$1[rbp], rax

; 73   : 		x64_write_msr(msr, value);

	mov	rdx, QWORD PTR value$[rbp]
	mov	rcx, QWORD PTR msr$1[rbp]
	call	x64_write_msr

; 74   : 	}

	jmp	$LN3@WriteAPICR
$LN2@WriteAPICR:

; 75   : 	else {
; 76   : 		if (reg == LAPIC_REGISTER_ICR) {

	movzx	eax, WORD PTR reg$[rbp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN4@WriteAPICR

; 77   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rbp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR ?_apic@@3PEAXEA
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR reg_addr$2[rbp], rax

; 78   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(_apic, (reg + 1) << 4);

	movzx	eax, WORD PTR reg$[rbp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR ?_apic@@3PEAXEA
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR reg_next_addr$3[rbp], rax

; 79   : 			uint32_t low_part = value & UINT32_MAX;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR value$[rbp]
	and	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR low_part$4[rbp], eax

; 80   : 			uint32_t high_part = (value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	DWORD PTR high_part$5[rbp], eax

; 81   : 			*reg_next_addr = high_part;

	mov	rax, QWORD PTR reg_next_addr$3[rbp]
	mov	ecx, DWORD PTR high_part$5[rbp]
	mov	DWORD PTR [rax], ecx

; 82   : 			x64_mfence();

	call	x64_mfence

; 83   : 			*reg_addr = low_part;

	mov	rax, QWORD PTR reg_addr$2[rbp]
	mov	ecx, DWORD PTR low_part$4[rbp]
	mov	DWORD PTR [rax], ecx
$LN4@WriteAPICR:

; 84   : 		}
; 85   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rbp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR ?_apic@@3PEAXEA
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR reg_addr$6[rbp], rax

; 86   : 		*reg_addr = value;

	mov	rax, QWORD PTR reg_addr$6[rbp]
	mov	ecx, DWORD PTR value$[rbp]
	mov	DWORD PTR [rax], ecx
$LN3@WriteAPICR:

; 87   : 	}
; 88   : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?WriteAPICRegister@@YAXG_K@Z ENDP			; WriteAPICRegister
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\apic.cpp
;	COMDAT ?ReadAPICRegister@@YA_KG@Z
_TEXT	SEGMENT
msr$1 = 0
reg_addr$2 = 8
reg_next_addr$3 = 16
reg_addr$4 = 24
reg$ = 112
?ReadAPICRegister@@YA_KG@Z PROC				; ReadAPICRegister, COMDAT

; 48   : uint64_t ReadAPICRegister(uint16_t reg) {

$LN6:
	mov	WORD PTR [rsp+8], cx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ADBAD9C4_apic@cpp
	call	__CheckForDebuggerJustMyCode

; 49   : 	if (__x2apic) {

	movzx	eax, BYTE PTR ?__x2apic@@3_NA
	test	eax, eax
	je	SHORT $LN2@ReadAPICRe

; 50   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rbp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$1[rbp], rax

; 51   : 		return x64_read_msr(msr);

	mov	rcx, QWORD PTR msr$1[rbp]
	call	x64_read_msr
	jmp	SHORT $LN1@ReadAPICRe

; 52   : 	}

	jmp	SHORT $LN3@ReadAPICRe
$LN2@ReadAPICRe:

; 53   : 	else {
; 54   : 		if (reg == LAPIC_REGISTER_ICR) {

	movzx	eax, WORD PTR reg$[rbp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN4@ReadAPICRe

; 55   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rbp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR ?_apic@@3PEAXEA
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR reg_addr$2[rbp], rax

; 56   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(_apic, (reg + 1) << 4);

	movzx	eax, WORD PTR reg$[rbp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR ?_apic@@3PEAXEA
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR reg_next_addr$3[rbp], rax

; 57   : 			return *reg_addr | ((uint64_t)*reg_next_addr << 32);

	mov	rax, QWORD PTR reg_addr$2[rbp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	rcx, QWORD PTR reg_next_addr$3[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	ecx, ecx
	shl	rcx, 32					; 00000020H
	or	rax, rcx
	jmp	SHORT $LN1@ReadAPICRe
$LN4@ReadAPICRe:

; 58   : 		}
; 59   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rbp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR ?_apic@@3PEAXEA
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR reg_addr$4[rbp], rax

; 60   : 		return *reg_addr;

	mov	rax, QWORD PTR reg_addr$4[rbp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
$LN3@ReadAPICRe:
$LN1@ReadAPICRe:

; 61   : 	}
; 62   : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?ReadAPICRegister@@YA_KG@Z ENDP				; ReadAPICRegister
_TEXT	ENDS
END
