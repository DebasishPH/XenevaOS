; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
__x2apic DB	01H DUP (?)
	ALIGN	8

_apic	DQ	01H DUP (?)
apic_timer_count DD 01H DUP (?)
_BSS	ENDS
PUBLIC	?ReadAPICRegister@@YA_KG@Z			; ReadAPICRegister
PUBLIC	?WriteAPICRegister@@YAXG_K@Z			; WriteAPICRegister
PUBLIC	?AuAPICInitialise@@YAX_N@Z			; AuAPICInitialise
PUBLIC	?APICLocalEOI@@YAXXZ				; APICLocalEOI
PUBLIC	?APICTimerSleep@@YAXI@Z				; APICTimerSleep
PUBLIC	?X2APICSupported@@YA_NXZ			; X2APICSupported
PUBLIC	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
PUBLIC	?IOWait@@YAXXZ					; IOWait
PUBLIC	?APICSpuriousInterrupt@@YAX_KPEAX@Z		; APICSpuriousInterrupt
PUBLIC	?ApicTimerInterrupt@@YAX_KPEAX@Z		; ApicTimerInterrupt
EXTRN	?IOAPICInitialise@@YAXPEAX@Z:PROC		; IOAPICInitialise
EXTRN	?cpu_read_tsc@@YA_KXZ:PROC			; cpu_read_tsc
EXTRN	setvect:PROC
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	x64_outportb:PROC
EXTRN	x64_read_msr:PROC
EXTRN	x64_write_msr:PROC
EXTRN	x64_mfence:PROC
EXTRN	x64_cpuid:PROC
EXTRN	AuMapMMIO:PROC
pdata	SEGMENT
$pdata$?ReadAPICRegister@@YA_KG@Z DD imagerel $LN6
	DD	imagerel $LN6+191
	DD	imagerel $unwind$?ReadAPICRegister@@YA_KG@Z
$pdata$?WriteAPICRegister@@YAXG_K@Z DD imagerel $LN6
	DD	imagerel $LN6+231
	DD	imagerel $unwind$?WriteAPICRegister@@YAXG_K@Z
$pdata$?AuAPICInitialise@@YAX_N@Z DD imagerel $LN12
	DD	imagerel $LN12+497
	DD	imagerel $unwind$?AuAPICInitialise@@YAX_N@Z
$pdata$?APICLocalEOI@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$?APICLocalEOI@@YAXXZ
$pdata$?APICTimerSleep@@YAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$?APICTimerSleep@@YAXI@Z
$pdata$?X2APICSupported@@YA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?X2APICSupported@@YA_NXZ
$pdata$?IOWait@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+44
	DD	imagerel $unwind$?IOWait@@YAXXZ
$pdata$?ApicTimerInterrupt@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?ApicTimerInterrupt@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ReadAPICRegister@@YA_KG@Z DD 010901H
	DD	08209H
$unwind$?WriteAPICRegister@@YAXG_K@Z DD 010e01H
	DD	0a20eH
$unwind$?AuAPICInitialise@@YAX_N@Z DD 010801H
	DD	0c208H
$unwind$?APICLocalEOI@@YAXXZ DD 010401H
	DD	04204H
$unwind$?APICTimerSleep@@YAXI@Z DD 010801H
	DD	02208H
$unwind$?X2APICSupported@@YA_NXZ DD 010401H
	DD	0a204H
$unwind$?IOWait@@YAXXZ DD 010401H
	DD	02204H
$unwind$?ApicTimerInterrupt@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
p$ = 48
param$ = 56
?ApicTimerInterrupt@@YAX_KPEAX@Z PROC			; ApicTimerInterrupt

; 136  : void ApicTimerInterrupt(size_t p, void* param) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 137  : 	x64_cli();

	call	x64_cli

; 138  : 	apic_timer_count++;

	mov	eax, DWORD PTR apic_timer_count
	inc	eax
	mov	DWORD PTR apic_timer_count, eax

; 139  : 	APICLocalEOI();

	call	?APICLocalEOI@@YAXXZ			; APICLocalEOI

; 140  : 	x64_sti();

	call	x64_sti

; 141  : }

	add	rsp, 40					; 00000028H
	ret	0
?ApicTimerInterrupt@@YAX_KPEAX@Z ENDP			; ApicTimerInterrupt
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
p$ = 8
param$ = 16
?APICSpuriousInterrupt@@YAX_KPEAX@Z PROC		; APICSpuriousInterrupt

; 109  : void APICSpuriousInterrupt(size_t p, void* param){

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 110  : 
; 111  : }

	ret	0
?APICSpuriousInterrupt@@YAX_KPEAX@Z ENDP		; APICSpuriousInterrupt
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
counter$ = 0
?IOWait@@YAXXZ PROC					; IOWait

; 104  : void IOWait() {

$LN6:
	sub	rsp, 24

; 105  : 	volatile size_t counter = 0;

	mov	QWORD PTR counter$[rsp], 0
	jmp	SHORT $LN3@IOWait
$LN2@IOWait:

; 106  : 	for (; counter < 1000; ++counter);

	mov	rax, QWORD PTR counter$[rsp]
	inc	rax
	mov	QWORD PTR counter$[rsp], rax
$LN3@IOWait:
	mov	rax, QWORD PTR counter$[rsp]
	cmp	rax, 1000				; 000003e8H
	jae	SHORT $LN1@IOWait
	jmp	SHORT $LN2@IOWait
$LN1@IOWait:

; 107  : }

	add	rsp, 24
	ret	0
?IOWait@@YAXXZ ENDP					; IOWait
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z PROC		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z ENDP		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
d$ = 48
c$ = 56
b$ = 64
a$ = 72
?X2APICSupported@@YA_NXZ PROC				; X2APICSupported

; 98   : bool X2APICSupported() {

$LN3:
	sub	rsp, 88					; 00000058H

; 99   : 	size_t a, b, c, d;
; 100  : 	x64_cpuid(0x1, &a, &b, &c, &d);

	mov	QWORD PTR [rsp+40], 0
	lea	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR c$[rsp]
	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	ecx, 1
	call	x64_cpuid

; 101  : 	return false;

	xor	al, al

; 102  : }

	add	rsp, 88					; 00000058H
	ret	0
?X2APICSupported@@YA_NXZ ENDP				; X2APICSupported
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
tick$ = 0
ms$ = 32
?APICTimerSleep@@YAXI@Z PROC				; APICTimerSleep

; 207  : void APICTimerSleep(uint32_t ms) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 208  : 	uint32_t tick = ms + apic_timer_count;

	mov	eax, DWORD PTR apic_timer_count
	mov	ecx, DWORD PTR ms$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tick$[rsp], eax
$LN2@APICTimerS:

; 209  : 	while (tick > apic_timer_count)

	mov	eax, DWORD PTR apic_timer_count
	cmp	DWORD PTR tick$[rsp], eax
	jbe	SHORT $LN1@APICTimerS

; 210  : 		;

	jmp	SHORT $LN2@APICTimerS
$LN1@APICTimerS:

; 211  : }

	add	rsp, 24
	ret	0
?APICTimerSleep@@YAXI@Z ENDP				; APICTimerSleep
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
?APICLocalEOI@@YAXXZ PROC				; APICLocalEOI

; 94   : void APICLocalEOI() {

$LN3:
	sub	rsp, 40					; 00000028H

; 95   : 	WriteAPICRegister(LAPIC_REGISTER_EOI, 1);

	mov	edx, 1
	mov	cx, 11
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 96   : }

	add	rsp, 40					; 00000028H
	ret	0
?APICLocalEOI@@YAXXZ ENDP				; APICLocalEOI
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
tv81 = 32
apic_base$ = 40
timer_vect$ = 48
before$ = 56
after$ = 64
ms$ = 72
timer_reg$ = 80
target$ = 88
bsp$ = 112
?AuAPICInitialise@@YAX_N@Z PROC				; AuAPICInitialise

; 148  : void AuAPICInitialise(bool bsp) {

$LN12:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 104				; 00000068H

; 149  : 	size_t apic_base;
; 150  : 	if (bsp) {

	movzx	eax, BYTE PTR bsp$[rsp]
	test	eax, eax
	je	SHORT $LN7@AuAPICInit

; 151  : 		apic_base = (size_t)0xFEE00000;

	mov	eax, -18874368				; fee00000H
	mov	QWORD PTR apic_base$[rsp], rax

; 152  : 		apic_timer_count = 0;

	mov	DWORD PTR apic_timer_count, 0

; 153  : 
; 154  : 		if (X2APICSupported()) {

	call	?X2APICSupported@@YA_NXZ		; X2APICSupported
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@AuAPICInit

; 155  : 			__x2apic = true;

	mov	BYTE PTR __x2apic, 1

; 156  : 			apic_base |= IA32_APIC_BASE_MSR_X2APIC;

	mov	rax, QWORD PTR apic_base$[rsp]
	bts	rax, 10
	mov	QWORD PTR apic_base$[rsp], rax

; 157  : 		}
; 158  : 		else {

	jmp	SHORT $LN5@AuAPICInit
$LN6@AuAPICInit:

; 159  : 			_apic = (void*)AuMapMMIO(apic_base, 4);

	mov	edx, 4
	mov	rcx, QWORD PTR apic_base$[rsp]
	call	AuMapMMIO
	mov	QWORD PTR _apic, rax
$LN5@AuAPICInit:

; 160  : 		}
; 161  : 
; 162  : 		apic_base |= IA32_APIC_BASE_MSR_ENABLE;

	mov	rax, QWORD PTR apic_base$[rsp]
	bts	rax, 11
	mov	QWORD PTR apic_base$[rsp], rax

; 163  : 		x64_write_msr(IA32_APIC_BASE_MSR, apic_base);

	mov	rdx, QWORD PTR apic_base$[rsp]
	mov	ecx, 27
	call	x64_write_msr

; 164  : 	}
; 165  :  else

	jmp	SHORT $LN4@AuAPICInit
$LN7@AuAPICInit:

; 166  : 	x64_write_msr(IA32_APIC_BASE_MSR, x64_read_msr(IA32_APIC_BASE_MSR) | IA32_APIC_BASE_MSR_ENABLE |
; 167  : 		(__x2apic ? IA32_APIC_BASE_MSR_X2APIC : 0));

	movzx	eax, BYTE PTR __x2apic
	test	eax, eax
	je	SHORT $LN10@AuAPICInit
	mov	DWORD PTR tv81[rsp], 1024		; 00000400H
	jmp	SHORT $LN11@AuAPICInit
$LN10@AuAPICInit:
	mov	DWORD PTR tv81[rsp], 0
$LN11@AuAPICInit:
	mov	ecx, 27
	call	x64_read_msr
	bts	rax, 11
	movsxd	rcx, DWORD PTR tv81[rsp]
	or	rax, rcx
	mov	rdx, rax
	mov	ecx, 27
	call	x64_write_msr
$LN4@AuAPICInit:

; 168  : 
; 169  : 	setvect(0xFF, APICSpuriousInterrupt);

	lea	rdx, OFFSET FLAT:?APICSpuriousInterrupt@@YAX_KPEAX@Z ; APICSpuriousInterrupt
	mov	ecx, 255				; 000000ffH
	call	setvect

; 170  : 
; 171  : 	WriteAPICRegister(LAPIC_REGISTER_SVR, ReadAPICRegister(LAPIC_REGISTER_SVR) |
; 172  : 		IA32_APIC_SVR_ENABLE | 0xFF);

	mov	cx, 15
	call	?ReadAPICRegister@@YA_KG@Z		; ReadAPICRegister
	bts	rax, 8
	or	rax, 255				; 000000ffH
	mov	rdx, rax
	mov	cx, 15
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 173  : 
; 174  : 
; 175  : 	/* here i thought to use pit for timer tuning, but
; 176  : 	 * apic stops working here when interrupt is enabled for
; 177  : 	 * pic
; 178  : 	 */
; 179  : 
; 180  : 	WriteAPICRegister(LAPIC_TIMER_DIV, 0x6);

	mov	edx, 6
	mov	cx, 992					; 000003e0H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 181  : 	uint64_t before = cpu_read_tsc();

	call	?cpu_read_tsc@@YA_KXZ			; cpu_read_tsc
	mov	QWORD PTR before$[rsp], rax

; 182  : 	WriteAPICRegister(LAPIC_REGISTER_TMRINITCNT, 1000000); //10000000000UL 

	mov	edx, 1000000				; 000f4240H
	mov	cx, 56					; 00000038H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister
$LN3@AuAPICInit:

; 183  : 	while (ReadAPICRegister(LAPIC_REGISTER_TMRCURRCNT));

	mov	cx, 57					; 00000039H
	call	?ReadAPICRegister@@YA_KG@Z		; ReadAPICRegister
	test	rax, rax
	je	SHORT $LN2@AuAPICInit
	jmp	SHORT $LN3@AuAPICInit
$LN2@AuAPICInit:

; 184  : 	uint64_t after = cpu_read_tsc();

	call	?cpu_read_tsc@@YA_KXZ			; cpu_read_tsc
	mov	QWORD PTR after$[rsp], rax

; 185  : 
; 186  : 
; 187  : 	uint64_t ms = (after - before) / 1190;

	mov	rax, QWORD PTR before$[rsp]
	mov	rcx, QWORD PTR after$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	xor	edx, edx
	mov	ecx, 1190				; 000004a6H
	div	rcx
	mov	QWORD PTR ms$[rsp], rax

; 188  : 	uint64_t target = 10000000000UL / ms;

	xor	edx, edx
	mov	rax, 10000000000			; 00000002540be400H
	div	QWORD PTR ms$[rsp]
	mov	QWORD PTR target$[rsp], rax

; 189  : 	size_t timer_vect = 0x40;

	mov	QWORD PTR timer_vect$[rsp], 64		; 00000040H

; 190  : 	setvect(timer_vect, ApicTimerInterrupt);

	lea	rdx, OFFSET FLAT:?ApicTimerInterrupt@@YAX_KPEAX@Z ; ApicTimerInterrupt
	mov	rcx, QWORD PTR timer_vect$[rsp]
	call	setvect

; 191  : 	WriteAPICRegister(LAPIC_REGISTER_TMRDIV,0x6);   //bit 0,1 and 3

	mov	edx, 6
	mov	cx, 62					; 0000003eH
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 192  : 	size_t timer_reg = (1 << 17) | timer_vect;

	mov	rax, QWORD PTR timer_vect$[rsp]
	bts	rax, 17
	mov	QWORD PTR timer_reg$[rsp], rax

; 193  : 	WriteAPICRegister(LAPIC_REGISTER_LVT_TIMER, timer_reg);

	mov	rdx, QWORD PTR timer_reg$[rsp]
	mov	cx, 50					; 00000032H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 194  : 	IOWait();

	call	?IOWait@@YAXXZ				; IOWait

; 195  : 	WriteAPICRegister(LAPIC_REGISTER_TMRINITCNT, target);  //123456  //(target / 100) //target/100

	mov	rdx, QWORD PTR target$[rsp]
	mov	cx, 56					; 00000038H
	call	?WriteAPICRegister@@YAXG_K@Z		; WriteAPICRegister

; 196  : 	
; 197  : 	x64_outportb(PIC1_DATA, 0xFF);

	mov	dl, 255					; 000000ffH
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 198  : 	IOWait();

	call	?IOWait@@YAXXZ				; IOWait

; 199  : 	x64_outportb(PIC2_DATA, 0xFF);

	mov	dl, 255					; 000000ffH
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 200  : 	//for (;;);
; 201  : 	/* initialise IOAPIC here*/
; 202  : 	if (bsp)

	movzx	eax, BYTE PTR bsp$[rsp]
	test	eax, eax
	je	SHORT $LN1@AuAPICInit

; 203  : 		IOAPICInitialise((void*)0xFEC00000);

	mov	ecx, -20971520				; fffffffffec00000H
	call	?IOAPICInitialise@@YAXPEAX@Z		; IOAPICInitialise
$LN1@AuAPICInit:

; 204  : }

	add	rsp, 104				; 00000068H
	ret	0
?AuAPICInitialise@@YAX_N@Z ENDP				; AuAPICInitialise
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
high_part$1 = 32
low_part$2 = 36
msr$3 = 40
reg_next_addr$4 = 48
reg_addr$5 = 56
reg_addr$6 = 64
reg$ = 96
value$ = 104
?WriteAPICRegister@@YAXG_K@Z PROC			; WriteAPICRegister

; 70   : void WriteAPICRegister(uint16_t reg, uint64_t value) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 88					; 00000058H

; 71   : 	if (__x2apic) {

	movzx	eax, BYTE PTR __x2apic
	test	eax, eax
	je	SHORT $LN3@WriteAPICR

; 72   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rsp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$3[rsp], rax

; 73   : 		x64_write_msr(msr, value);

	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR msr$3[rsp]
	call	x64_write_msr

; 74   : 	}
; 75   : 	else {

	jmp	$LN2@WriteAPICR
$LN3@WriteAPICR:

; 76   : 		if (reg == LAPIC_REGISTER_ICR) {

	movzx	eax, WORD PTR reg$[rsp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN1@WriteAPICR

; 77   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR _apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$5[rsp], rax

; 78   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(_apic, (reg + 1) << 4);

	movzx	eax, WORD PTR reg$[rsp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR _apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_next_addr$4[rsp], rax

; 79   : 			uint32_t low_part = value & UINT32_MAX;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR value$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR low_part$2[rsp], eax

; 80   : 			uint32_t high_part = (value >> 32);

	mov	rax, QWORD PTR value$[rsp]
	shr	rax, 32					; 00000020H
	mov	DWORD PTR high_part$1[rsp], eax

; 81   : 			*reg_next_addr = high_part;

	mov	rax, QWORD PTR reg_next_addr$4[rsp]
	mov	ecx, DWORD PTR high_part$1[rsp]
	mov	DWORD PTR [rax], ecx

; 82   : 			x64_mfence();

	call	x64_mfence

; 83   : 			*reg_addr = low_part;

	mov	rax, QWORD PTR reg_addr$5[rsp]
	mov	ecx, DWORD PTR low_part$2[rsp]
	mov	DWORD PTR [rax], ecx
$LN1@WriteAPICR:

; 84   : 		}
; 85   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR _apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$6[rsp], rax

; 86   : 		*reg_addr = value;

	mov	rax, QWORD PTR reg_addr$6[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@WriteAPICR:

; 87   : 	}
; 88   : }

	add	rsp, 88					; 00000058H
	ret	0
?WriteAPICRegister@@YAXG_K@Z ENDP			; WriteAPICRegister
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\hal\apic.cpp
_TEXT	SEGMENT
msr$1 = 32
reg_addr$2 = 40
reg_next_addr$3 = 48
reg_addr$4 = 56
reg$ = 80
?ReadAPICRegister@@YA_KG@Z PROC				; ReadAPICRegister

; 48   : uint64_t ReadAPICRegister(uint16_t reg) {

$LN6:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 72					; 00000048H

; 49   : 	if (__x2apic) {

	movzx	eax, BYTE PTR __x2apic
	test	eax, eax
	je	SHORT $LN3@ReadAPICRe

; 50   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rsp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$1[rsp], rax

; 51   : 		return x64_read_msr(msr);

	mov	rcx, QWORD PTR msr$1[rsp]
	call	x64_read_msr
	jmp	$LN4@ReadAPICRe

; 52   : 	}
; 53   : 	else {

	jmp	$LN2@ReadAPICRe
$LN3@ReadAPICRe:

; 54   : 		if (reg == LAPIC_REGISTER_ICR) {

	movzx	eax, WORD PTR reg$[rsp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN1@ReadAPICRe

; 55   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR _apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$2[rsp], rax

; 56   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(_apic, (reg + 1) << 4);

	movzx	eax, WORD PTR reg$[rsp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR _apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_next_addr$3[rsp], rax

; 57   : 			return *reg_addr | ((uint64_t)*reg_next_addr << 32);

	mov	rax, QWORD PTR reg_addr$2[rsp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	rcx, QWORD PTR reg_next_addr$3[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	ecx, ecx
	shl	rcx, 32					; 00000020H
	or	rax, rcx
	jmp	SHORT $LN4@ReadAPICRe
$LN1@ReadAPICRe:

; 58   : 		}
; 59   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(_apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR _apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$4[rsp], rax

; 60   : 		return *reg_addr;

	mov	rax, QWORD PTR reg_addr$4[rsp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
$LN2@ReadAPICRe:
$LN4@ReadAPICRe:

; 61   : 	}
; 62   : }

	add	rsp, 72					; 00000048H
	ret	0
?ReadAPICRegister@@YA_KG@Z ENDP				; ReadAPICRegister
_TEXT	ENDS
END
