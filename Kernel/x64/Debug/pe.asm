; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG3056	DB	'Fname -> %s ', 0aH, 00H
CONST	ENDS
PUBLIC	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z		; AuGetProcAddress
PUBLIC	?AuKernelLinkDLL@@YAXPEAX@Z			; AuKernelLinkDLL
PUBLIC	?AuPEPrintExports@@YAXPEAX@Z			; AuPEPrintExports
PUBLIC	?AuKernelLinkImports@@YAXPEAX@Z			; AuKernelLinkImports
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z		; raw_offset<unsigned int * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z		; raw_offset<unsigned short * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z		; raw_offset<char * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z		; raw_offset<void * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,unsigned char * __ptr64>
PUBLIC	??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z		; raw_offset<char const * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z		; raw_offset<unsigned __int64 * __ptr64,unsigned char * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z		; raw_offset<char const * __ptr64,unsigned char * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,unsigned char * __ptr64>
EXTRN	strcmp:PROC
EXTRN	AuTextOut:PROC
pdata	SEGMENT
$pdata$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+386
	DD	imagerel $unwind$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z
$pdata$?AuKernelLinkDLL@@YAXPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+381
	DD	imagerel $unwind$?AuKernelLinkDLL@@YAXPEAX@Z
$pdata$?AuPEPrintExports@@YAXPEAX@Z DD imagerel $LN9
	DD	imagerel $LN9+312
	DD	imagerel $unwind$?AuPEPrintExports@@YAXPEAX@Z
$pdata$?AuKernelLinkImports@@YAXPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+385
	DD	imagerel $unwind$?AuKernelLinkImports@@YAXPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z DD 010e01H
	DD	0e20eH
$unwind$?AuKernelLinkDLL@@YAXPEAX@Z DD 020c01H
	DD	011010cH
$unwind$?AuPEPrintExports@@YAXPEAX@Z DD 010901H
	DD	0e209H
$unwind$?AuKernelLinkImports@@YAXPEAX@Z DD 020c01H
	DD	011010cH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z PROC ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,unsigned char * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z ENDP ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,unsigned char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z PROC		; raw_offset<char const * __ptr64,unsigned char * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z ENDP		; raw_offset<char const * __ptr64,unsigned char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z PROC ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ENDP ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z PROC		; raw_offset<unsigned __int64 * __ptr64,unsigned char * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z ENDP		; raw_offset<unsigned __int64 * __ptr64,unsigned char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z PROC		; raw_offset<char const * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z ENDP		; raw_offset<char const * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z PROC ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,unsigned char * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ENDP ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,unsigned char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z PROC		; raw_offset<void * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z ENDP		; raw_offset<void * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z PROC		; raw_offset<char * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z ENDP		; raw_offset<char * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z PROC		; raw_offset<unsigned short * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z ENDP		; raw_offset<unsigned short * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z PROC		; raw_offset<unsigned int * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z ENDP		; raw_offset<unsigned int * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z PROC ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ENDP ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\basehdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>, COMDAT

; 207  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\pe.cpp
_TEXT	SEGMENT
iat$1 = 32
n$2 = 40
imageAligned$ = 48
datadir$ = 56
importdir$ = 64
dos_header$ = 72
nt_headers$ = 80
hint$3 = 88
fname$4 = 96
procaddr$5 = 104
keaddr$ = 112
func$6 = 120
image$ = 144
?AuKernelLinkImports@@YAXPEAX@Z PROC			; AuKernelLinkImports

; 124  : void AuKernelLinkImports(void* image) {

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 125  : 	void* keaddr = (void*)0xFFFFC00000000000;

	mov	rax, -70368744177664			; ffffc00000000000H
	mov	QWORD PTR keaddr$[rsp], rax

; 126  : 	uint8_t *imageAligned = (uint8_t*)keaddr;

	mov	rax, QWORD PTR keaddr$[rsp]
	mov	QWORD PTR imageAligned$[rsp], rax

; 127  : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)imageAligned;

	mov	rax, QWORD PTR imageAligned$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 128  : 	PIMAGE_NT_HEADERS nt_headers = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt_headers$[rsp], rax

; 129  : 	if (IMAGE_DATA_DIRECTORY_IMPORT + 1 > nt_headers->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt_headers$[rsp]
	cmp	DWORD PTR [rax+132], 2
	jae	SHORT $LN8@AuKernelLi

; 130  : 		return;

	jmp	$LN9@AuKernelLi
$LN8@AuKernelLi:

; 131  : 	IMAGE_DATA_DIRECTORY& datadir = nt_headers->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_IMPORT];

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nt_headers$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 132  : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN6@AuKernelLi
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN7@AuKernelLi
$LN6@AuKernelLi:

; 133  : 		return;

	jmp	$LN9@AuKernelLi
$LN7@AuKernelLi:

; 134  : 	
; 135  : 	PIMAGE_IMPORT_DIRECTORY importdir = raw_offset<PIMAGE_IMPORT_DIRECTORY>(imageAligned, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR imageAligned$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,unsigned char * __ptr64>
	mov	QWORD PTR importdir$[rsp], rax

; 136  : 	for (size_t n = 0; importdir[n].ThunkTableRva; ++n) {

	mov	QWORD PTR n$2[rsp], 0
	jmp	SHORT $LN5@AuKernelLi
$LN4@AuKernelLi:
	mov	rax, QWORD PTR n$2[rsp]
	inc	rax
	mov	QWORD PTR n$2[rsp], rax
$LN5@AuKernelLi:
	imul	rax, QWORD PTR n$2[rsp], 20
	mov	rcx, QWORD PTR importdir$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 0
	je	$LN3@AuKernelLi

; 137  : 		const char* func = raw_offset<const char*>(imageAligned, importdir[n].NameRva);

	imul	rax, QWORD PTR n$2[rsp], 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR imageAligned$[rsp]
	call	??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z	; raw_offset<char const * __ptr64,unsigned char * __ptr64>
	mov	QWORD PTR func$6[rsp], rax

; 138  : 		PIMAGE_IMPORT_LOOKUP_TABLE_PE32P iat = raw_offset<PIMAGE_IMPORT_LOOKUP_TABLE_PE32P>(imageAligned, importdir[n].ThunkTableRva);

	imul	rax, QWORD PTR n$2[rsp], 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR imageAligned$[rsp]
	call	??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z	; raw_offset<unsigned __int64 * __ptr64,unsigned char * __ptr64>
	mov	QWORD PTR iat$1[rsp], rax
$LN2@AuKernelLi:

; 139  : 		while (*iat) {

	mov	rax, QWORD PTR iat$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN1@AuKernelLi

; 140  : 			PIMAGE_IMPORT_HINT_TABLE hint = raw_offset<PIMAGE_IMPORT_HINT_TABLE>(imageAligned, *iat);

	mov	rax, QWORD PTR iat$1[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR imageAligned$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,unsigned char * __ptr64>
	mov	QWORD PTR hint$3[rsp], rax

; 141  : 			const char* fname = hint->name;

	mov	rax, QWORD PTR hint$3[rsp]
	add	rax, 2
	mov	QWORD PTR fname$4[rsp], rax

; 142  : 			//AuTextOut("Imports -> %s \n", fname);
; 143  : 			void* procaddr = AuGetProcAddress((void*)image, fname);

	mov	rdx, QWORD PTR fname$4[rsp]
	mov	rcx, QWORD PTR image$[rsp]
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR procaddr$5[rsp], rax

; 144  : 			*iat = (uint64_t)procaddr;

	mov	rax, QWORD PTR iat$1[rsp]
	mov	rcx, QWORD PTR procaddr$5[rsp]
	mov	QWORD PTR [rax], rcx

; 145  : 			++iat;

	mov	rax, QWORD PTR iat$1[rsp]
	add	rax, 8
	mov	QWORD PTR iat$1[rsp], rax

; 146  : 		}

	jmp	SHORT $LN2@AuKernelLi
$LN1@AuKernelLi:

; 147  : 	}

	jmp	$LN4@AuKernelLi
$LN3@AuKernelLi:
$LN9@AuKernelLi:

; 148  : }

	add	rsp, 136				; 00000088H
	ret	0
?AuKernelLinkImports@@YAXPEAX@Z ENDP			; AuKernelLinkImports
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\pe.cpp
_TEXT	SEGMENT
i$1 = 32
exportdir$ = 40
datadir$ = 48
ntHeaders$ = 56
dos_header$ = 64
function_name$2 = 72
FuntionNameAddressArray$ = 80
FunctionOrdinalAddressArray$ = 88
FunctionAddressArray$ = 96
image$ = 128
?AuPEPrintExports@@YAXPEAX@Z PROC			; AuPEPrintExports

; 71   : void AuPEPrintExports(void *image){

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 72   : 
; 73   : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 74   : 	PIMAGE_NT_HEADERS ntHeaders = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR ntHeaders$[rsp], rax

; 75   : 	if (IMAGE_DATA_DIRECTORY_EXPORT + 1 > ntHeaders->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR ntHeaders$[rsp]
	cmp	DWORD PTR [rax+132], 1
	jae	SHORT $LN6@AuPEPrintE

; 76   : 		return;

	jmp	$LN7@AuPEPrintE
$LN6@AuPEPrintE:

; 77   : 	IMAGE_DATA_DIRECTORY& datadir = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_EXPORT];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 78   : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN4@AuPEPrintE
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN5@AuPEPrintE
$LN4@AuPEPrintE:

; 79   : 		return;

	jmp	$LN7@AuPEPrintE
$LN5@AuPEPrintE:

; 80   : 	PIMAGE_EXPORT_DIRECTORY exportdir = raw_offset<PIMAGE_EXPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
	mov	QWORD PTR exportdir$[rsp], rax

; 81   : 	uint32_t* FuntionNameAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfNames);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FuntionNameAddressArray$[rsp], rax

; 82   : 	uint16_t* FunctionOrdinalAddressArray = raw_offset<uint16_t*>(image, exportdir->AddressOfNameOrdinal);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z	; raw_offset<unsigned short * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionOrdinalAddressArray$[rsp], rax

; 83   : 	uint32_t* FunctionAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfFunctions);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionAddressArray$[rsp], rax

; 84   : 
; 85   : 	for (int i = 0; i < exportdir->NumberOfNames; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuPEPrintE
$LN2@AuPEPrintE:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuPEPrintE:
	mov	rax, QWORD PTR exportdir$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@AuPEPrintE

; 86   : 
; 87   : 		char* function_name = raw_offset<char*>(image, FuntionNameAddressArray[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR FuntionNameAddressArray$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z	; raw_offset<char * __ptr64,void * __ptr64>
	mov	QWORD PTR function_name$2[rsp], rax

; 88   : 		AuTextOut("Fname -> %s \n", function_name);

	mov	rdx, QWORD PTR function_name$2[rsp]
	lea	rcx, OFFSET FLAT:$SG3056
	call	AuTextOut

; 89   : 	}

	jmp	SHORT $LN2@AuPEPrintE
$LN1@AuPEPrintE:
$LN7@AuPEPrintE:

; 90   : }

	add	rsp, 120				; 00000078H
	ret	0
?AuPEPrintExports@@YAXPEAX@Z ENDP			; AuPEPrintExports
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\pe.cpp
_TEXT	SEGMENT
n$1 = 32
iat$2 = 40
datadir$ = 48
importdir$ = 56
imageAligned$ = 64
dos_header$ = 72
nt_headers$ = 80
fname$3 = 88
procaddr$4 = 96
hint$5 = 104
func$6 = 112
image$ = 144
?AuKernelLinkDLL@@YAXPEAX@Z PROC			; AuKernelLinkDLL

; 95   : void AuKernelLinkDLL(void* image) {

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 96   : 	uint8_t *imageAligned = (uint8_t*)image;

	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR imageAligned$[rsp], rax

; 97   : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)imageAligned;

	mov	rax, QWORD PTR imageAligned$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 98   : 	PIMAGE_NT_HEADERS nt_headers = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt_headers$[rsp], rax

; 99   : 	if (IMAGE_DATA_DIRECTORY_IMPORT + 1 > nt_headers->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt_headers$[rsp]
	cmp	DWORD PTR [rax+132], 2
	jae	SHORT $LN8@AuKernelLi

; 100  : 		return;

	jmp	$LN9@AuKernelLi
$LN8@AuKernelLi:

; 101  : 	IMAGE_DATA_DIRECTORY& datadir = nt_headers->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_IMPORT];

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nt_headers$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 102  : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0) {

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN6@AuKernelLi
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN7@AuKernelLi
$LN6@AuKernelLi:

; 103  : 		return;

	jmp	$LN9@AuKernelLi
$LN7@AuKernelLi:

; 104  : 	}
; 105  : 	PIMAGE_IMPORT_DIRECTORY importdir = raw_offset<PIMAGE_IMPORT_DIRECTORY>(imageAligned, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR imageAligned$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,unsigned char * __ptr64>
	mov	QWORD PTR importdir$[rsp], rax

; 106  : 	for (size_t n = 0; importdir[n].ThunkTableRva; ++n) {

	mov	QWORD PTR n$1[rsp], 0
	jmp	SHORT $LN5@AuKernelLi
$LN4@AuKernelLi:
	mov	rax, QWORD PTR n$1[rsp]
	inc	rax
	mov	QWORD PTR n$1[rsp], rax
$LN5@AuKernelLi:
	imul	rax, QWORD PTR n$1[rsp], 20
	mov	rcx, QWORD PTR importdir$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 0
	je	$LN3@AuKernelLi

; 107  : 		const char* func = raw_offset<const char*>(image, importdir[n].NameRva);

	imul	rax, QWORD PTR n$1[rsp], 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z	; raw_offset<char const * __ptr64,void * __ptr64>
	mov	QWORD PTR func$6[rsp], rax

; 108  : 		PIMAGE_IMPORT_LOOKUP_TABLE_PE32P iat = raw_offset<PIMAGE_IMPORT_LOOKUP_TABLE_PE32P>(imageAligned, importdir[n].ThunkTableRva);

	imul	rax, QWORD PTR n$1[rsp], 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR imageAligned$[rsp]
	call	??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z	; raw_offset<unsigned __int64 * __ptr64,unsigned char * __ptr64>
	mov	QWORD PTR iat$2[rsp], rax
$LN2@AuKernelLi:

; 109  : 		while (*iat) {

	mov	rax, QWORD PTR iat$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN1@AuKernelLi

; 110  : 			PIMAGE_IMPORT_HINT_TABLE hint = raw_offset<PIMAGE_IMPORT_HINT_TABLE>(image, *iat);

	mov	rax, QWORD PTR iat$2[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>
	mov	QWORD PTR hint$5[rsp], rax

; 111  : 			const char* fname = hint->name;

	mov	rax, QWORD PTR hint$5[rsp]
	add	rax, 2
	mov	QWORD PTR fname$3[rsp], rax

; 112  : 			void* procaddr = AuGetProcAddress((void*)0xFFFFC00000000000, fname);

	mov	rdx, QWORD PTR fname$3[rsp]
	mov	rcx, -70368744177664			; ffffc00000000000H
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR procaddr$4[rsp], rax

; 113  : 			*iat = (uint64_t)procaddr;

	mov	rax, QWORD PTR iat$2[rsp]
	mov	rcx, QWORD PTR procaddr$4[rsp]
	mov	QWORD PTR [rax], rcx

; 114  : 			++iat;

	mov	rax, QWORD PTR iat$2[rsp]
	add	rax, 8
	mov	QWORD PTR iat$2[rsp], rax

; 115  : 		}

	jmp	SHORT $LN2@AuKernelLi
$LN1@AuKernelLi:

; 116  : 	}

	jmp	$LN4@AuKernelLi
$LN3@AuKernelLi:
$LN9@AuKernelLi:

; 117  : }

	add	rsp, 136				; 00000088H
	ret	0
?AuKernelLinkDLL@@YAXPEAX@Z ENDP			; AuKernelLinkDLL
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\pe.cpp
_TEXT	SEGMENT
i$1 = 32
ordinal$2 = 36
exportdir$ = 40
FunctionAddress$3 = 48
datadir$ = 56
dos_header$ = 64
ntHeaders$ = 72
function_name$4 = 80
FunctionOrdinalAddressArray$ = 88
FuntionNameAddressArray$ = 96
FunctionAddressArray$ = 104
image$ = 128
procname$ = 136
?AuGetProcAddress@@YAPEAXPEAXPEBD@Z PROC		; AuGetProcAddress

; 40   : void* AuGetProcAddress(void *image, const char* procname){

$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 41   : 
; 42   : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 43   : 	PIMAGE_NT_HEADERS ntHeaders = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR ntHeaders$[rsp], rax

; 44   : 	if (IMAGE_DATA_DIRECTORY_EXPORT + 1 > ntHeaders->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR ntHeaders$[rsp]
	cmp	DWORD PTR [rax+132], 1
	jae	SHORT $LN7@AuGetProcA

; 45   : 		return NULL;

	xor	eax, eax
	jmp	$LN8@AuGetProcA
$LN7@AuGetProcA:

; 46   : 	IMAGE_DATA_DIRECTORY& datadir = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_EXPORT];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 47   : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN5@AuGetProcA
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@AuGetProcA
$LN5@AuGetProcA:

; 48   : 		return NULL;

	xor	eax, eax
	jmp	$LN8@AuGetProcA
$LN6@AuGetProcA:

; 49   : 	PIMAGE_EXPORT_DIRECTORY exportdir = raw_offset<PIMAGE_EXPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
	mov	QWORD PTR exportdir$[rsp], rax

; 50   : 	uint32_t* FuntionNameAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfNames);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FuntionNameAddressArray$[rsp], rax

; 51   : 	uint16_t* FunctionOrdinalAddressArray = raw_offset<uint16_t*>(image, exportdir->AddressOfNameOrdinal);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z	; raw_offset<unsigned short * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionOrdinalAddressArray$[rsp], rax

; 52   : 	uint32_t* FunctionAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfFunctions);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionAddressArray$[rsp], rax

; 53   : 
; 54   : 	for (int i = 0; i < exportdir->NumberOfNames; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@AuGetProcA
$LN3@AuGetProcA:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@AuGetProcA:
	mov	rax, QWORD PTR exportdir$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN2@AuGetProcA

; 55   : 
; 56   : 		char* function_name = raw_offset<char*>(image, FuntionNameAddressArray[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR FuntionNameAddressArray$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z	; raw_offset<char * __ptr64,void * __ptr64>
	mov	QWORD PTR function_name$4[rsp], rax

; 57   : 		if (strcmp(function_name, procname) == 0) {

	mov	rdx, QWORD PTR procname$[rsp]
	mov	rcx, QWORD PTR function_name$4[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN1@AuGetProcA

; 58   : 			uint16_t ordinal = FunctionOrdinalAddressArray[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR FunctionOrdinalAddressArray$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	WORD PTR ordinal$2[rsp], ax

; 59   : 			uint32_t FunctionAddress = FunctionAddressArray[ordinal];

	movzx	eax, WORD PTR ordinal$2[rsp]
	mov	rcx, QWORD PTR FunctionAddressArray$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR FunctionAddress$3[rsp], eax

; 60   : 			return raw_offset<void*>(image, FunctionAddress);

	mov	edx, DWORD PTR FunctionAddress$3[rsp]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z	; raw_offset<void * __ptr64,void * __ptr64>
	jmp	SHORT $LN8@AuGetProcA
$LN1@AuGetProcA:

; 61   : 		}
; 62   : 	}

	jmp	$LN3@AuGetProcA
$LN2@AuGetProcA:

; 63   : 
; 64   : 	return nullptr;

	xor	eax, eax
$LN8@AuGetProcA:

; 65   : }

	add	rsp, 120				; 00000078H
	ret	0
?AuGetProcAddress@@YAPEAXPEAXPEBD@Z ENDP		; AuGetProcAddress
_TEXT	ENDS
END
