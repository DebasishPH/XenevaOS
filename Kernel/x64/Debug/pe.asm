; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__DEA6E0C3_pe@cpp DB 01H
__303BDA61_stdint@h DB 01H
msvcjmc	ENDS
PUBLIC	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z		; AuGetProcAddress
PUBLIC	?AuKernelLinkDLL@@YAXPEAX@Z			; AuKernelLinkDLL
PUBLIC	?AuPEPrintExports@@YAXPEAX@Z			; AuPEPrintExports
PUBLIC	?AuKernelLinkImports@@YAXPEAX@Z			; AuKernelLinkImports
PUBLIC	?AuKernelRelocatePE@@YAXPEAXPEAU_IMAGE_NT_HEADERS_PE32PLUS@@H@Z ; AuKernelRelocatePE
PUBLIC	?AuPEFileIsDynamicallyLinked@@YA_NPEAX@Z	; AuPEFileIsDynamicallyLinked
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
PUBLIC	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY *,void *>
PUBLIC	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z		; raw_offset<unsigned int *,void *>
PUBLIC	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z		; raw_offset<unsigned short *,void *>
PUBLIC	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z		; raw_offset<char *,void *>
PUBLIC	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z		; raw_offset<void *,void *>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY *,unsigned char *>
PUBLIC	??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z		; raw_offset<char const *,void *>
PUBLIC	??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z		; raw_offset<unsigned __int64 *,unsigned char *>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,void *>
PUBLIC	??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z		; raw_offset<char const *,unsigned char *>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,unsigned char *>
PUBLIC	??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,void *>
PUBLIC	??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z ; raw_diff<_IMAGE_RELOCATION_BLOCK_,_IMAGE_RELOCATION_BLOCK_>
PUBLIC	??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,_IMAGE_RELOCATION_BLOCK_ *>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0O@NBCIPHIM@Fname?5?9?$DO?5?$CFs?5?6@	; `string'
PUBLIC	??_C@_0CB@EDINLNKI@Relocating?5executable?5dir64?5?$CFx?$AN@ ; `string'
EXTRN	strcmp:PROC
EXTRN	AuTextOut:PROC
EXTRN	SeTextOut:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+367
	DD	imagerel $unwind$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuKernelLinkDLL@@YAXPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+360
	DD	imagerel $unwind$?AuKernelLinkDLL@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPEPrintExports@@YAXPEAX@Z DD imagerel $LN9
	DD	imagerel $LN9+305
	DD	imagerel $unwind$?AuPEPrintExports@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuKernelLinkImports@@YAXPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+362
	DD	imagerel $unwind$?AuKernelLinkImports@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuKernelRelocatePE@@YAXPEAXPEAU_IMAGE_NT_HEADERS_PE32PLUS@@H@Z DD imagerel $LN22
	DD	imagerel $LN22+576
	DD	imagerel $unwind$?AuKernelRelocatePE@@YAXPEAXPEAU_IMAGE_NT_HEADERS_PE32PLUS@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPEFileIsDynamicallyLinked@@YA_NPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+164
	DD	imagerel $unwind$?AuPEFileIsDynamicallyLinked@@YA_NPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z
pdata	ENDS
;	COMDAT ??_C@_0CB@EDINLNKI@Relocating?5executable?5dir64?5?$CFx?$AN@
CONST	SEGMENT
??_C@_0CB@EDINLNKI@Relocating?5executable?5dir64?5?$CFx?$AN@ DB 'Relocati'
	DB	'ng executable dir64 %x', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NBCIPHIM@Fname?5?9?$DO?5?$CFs?5?6@
CONST	SEGMENT
??_C@_0O@NBCIPHIM@Fname?5?9?$DO?5?$CFs?5?6@ DB 'Fname -> %s ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPEFileIsDynamicallyLinked@@YA_NPEAX@Z DD 025041201H
	DD	010d2312H
	DD	050060012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuKernelRelocatePE@@YAXPEAXPEAU_IMAGE_NT_HEADERS_PE32PLUS@@H@Z DD 025041c01H
	DD	0117231cH
	DD	050100014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuKernelLinkImports@@YAXPEAX@Z DD 025041201H
	DD	010d2312H
	DD	050060018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPEPrintExports@@YAXPEAX@Z DD 025041201H
	DD	010d2312H
	DD	050060016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuKernelLinkDLL@@YAXPEAX@Z DD 025041201H
	DD	010d2312H
	DD	050060018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z DD 025041701H
	DD	01122317H
	DD	0500b0016H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z PROC ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,_IMAGE_RELOCATION_BLOCK_ *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z ENDP ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,_IMAGE_RELOCATION_BLOCK_ *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z
_TEXT	SEGMENT
p1$ = 80
p2$ = 88
??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z PROC ; raw_diff<_IMAGE_RELOCATION_BLOCK_,_IMAGE_RELOCATION_BLOCK_>, COMDAT

; 203  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 204  : 		return (intptr_t)p1 - (intptr_t)p2;

	mov	eax, DWORD PTR p2$[rbp]
	mov	ecx, DWORD PTR p1$[rbp]
	sub	ecx, eax
	mov	eax, ecx

; 205  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z ENDP ; raw_diff<_IMAGE_RELOCATION_BLOCK_,_IMAGE_RELOCATION_BLOCK_>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z PROC ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z ENDP ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z PROC ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,unsigned char *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z ENDP ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z PROC		; raw_offset<char const *,unsigned char *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z ENDP		; raw_offset<char const *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z PROC ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ENDP ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z PROC		; raw_offset<unsigned __int64 *,unsigned char *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z ENDP		; raw_offset<unsigned __int64 *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z PROC		; raw_offset<char const *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z ENDP		; raw_offset<char const *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z PROC ; raw_offset<_IMAGE_IMPORT_DIRECTORY *,unsigned char *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ENDP ; raw_offset<_IMAGE_IMPORT_DIRECTORY *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z PROC		; raw_offset<void *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z ENDP		; raw_offset<void *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z PROC		; raw_offset<char *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z ENDP		; raw_offset<char *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z PROC		; raw_offset<unsigned short *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z ENDP		; raw_offset<unsigned short *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z PROC		; raw_offset<unsigned int *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z ENDP		; raw_offset<unsigned int *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z PROC ; raw_offset<_IMAGE_EXPORT_DIRECTORY *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ENDP ; raw_offset<_IMAGE_EXPORT_DIRECTORY *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pe.cpp
;	COMDAT ?AuPEFileIsDynamicallyLinked@@YA_NPEAX@Z
_TEXT	SEGMENT
imageAligned$ = 0
dos_header$ = 8
nt_headers$ = 16
datadir$ = 24
importdir$ = 32
image$ = 128
?AuPEFileIsDynamicallyLinked@@YA_NPEAX@Z PROC		; AuPEFileIsDynamicallyLinked, COMDAT

; 244  : bool AuPEFileIsDynamicallyLinked(void* image) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEA6E0C3_pe@cpp
	call	__CheckForDebuggerJustMyCode

; 245  : 	uint8_t *imageAligned = (uint8_t*)image;

	mov	rax, QWORD PTR image$[rbp]
	mov	QWORD PTR imageAligned$[rbp], rax

; 246  : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)imageAligned;

	mov	rax, QWORD PTR imageAligned$[rbp]
	mov	QWORD PTR dos_header$[rbp], rax

; 247  : 	PIMAGE_NT_HEADERS nt_headers = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rbp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rbp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
	mov	QWORD PTR nt_headers$[rbp], rax

; 248  : 	
; 249  : 	if (IMAGE_DATA_DIRECTORY_IMPORT + 1 > nt_headers->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt_headers$[rbp]
	cmp	DWORD PTR [rax+132], 2
	jae	SHORT $LN2@AuPEFileIs

; 250  : 		return false;

	xor	al, al
	jmp	SHORT $LN1@AuPEFileIs
$LN2@AuPEFileIs:

; 251  : 	IMAGE_DATA_DIRECTORY* datadir = &nt_headers->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_IMPORT];

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nt_headers$[rbp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rbp], rax

; 252  : 	if (datadir->VirtualAddress == 0 || datadir->Size == 0)

	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN4@AuPEFileIs
	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN3@AuPEFileIs
$LN4@AuPEFileIs:

; 253  : 		return false;

	xor	al, al
	jmp	SHORT $LN1@AuPEFileIs
$LN3@AuPEFileIs:

; 254  : 	
; 255  : 	PIMAGE_IMPORT_DIRECTORY importdir = raw_offset<PIMAGE_IMPORT_DIRECTORY>(imageAligned, datadir->VirtualAddress);

	mov	rax, QWORD PTR datadir$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR imageAligned$[rbp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY *,unsigned char *>
	mov	QWORD PTR importdir$[rbp], rax

; 256  : 	return true;

	mov	al, 1
$LN1@AuPEFileIs:

; 257  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?AuPEFileIsDynamicallyLinked@@YA_NPEAX@Z ENDP		; AuPEFileIsDynamicallyLinked
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pe.cpp
;	COMDAT ?AuKernelRelocatePE@@YAXPEAXPEAU_IMAGE_NT_HEADERS_PE32PLUS@@H@Z
_TEXT	SEGMENT
data_dir$ = 0
reloc_table$ = 8
cur_block$ = 16
entries$1 = 24
i$2 = 28
entry$3 = 32
type$4 = 40
relocitem$5 = 48
next_off$6 = 56
tv143 = 124
image$ = 144
nt$ = 152
diff$ = 160
?AuKernelRelocatePE@@YAXPEAXPEAU_IMAGE_NT_HEADERS_PE32PLUS@@H@Z PROC ; AuKernelRelocatePE, COMDAT

; 187  : void AuKernelRelocatePE(void* image, PIMAGE_NT_HEADERS nt, int diff) {

$LN22:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 160				; 000000a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEA6E0C3_pe@cpp
	call	__CheckForDebuggerJustMyCode

; 188  : 	if (!diff)

	cmp	DWORD PTR diff$[rbp], 0
	jne	SHORT $LN9@AuKernelRe

; 189  : 		return;

	jmp	$LN1@AuKernelRe
$LN9@AuKernelRe:

; 190  : 	if ((nt->OptionalHeader.DllCharacteristics & IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE) == 0)

	mov	rax, QWORD PTR nt$[rbp]
	movzx	eax, WORD PTR [rax+94]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN10@AuKernelRe

; 191  : 		return;

	jmp	$LN1@AuKernelRe
$LN10@AuKernelRe:

; 192  : 	if (IMAGE_DATA_DIRECTORY_RELOC + 1 > nt->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt$[rbp]
	cmp	DWORD PTR [rax+132], 6
	jae	SHORT $LN11@AuKernelRe

; 193  : 		return;

	jmp	$LN1@AuKernelRe
$LN11@AuKernelRe:

; 194  : 	IMAGE_DATA_DIRECTORY& data_dir = nt->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_RELOC];

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR nt$[rbp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR data_dir$[rbp], rax

; 195  : 	if (data_dir.VirtualAddress == 0 || data_dir.Size == 0)

	mov	rax, QWORD PTR data_dir$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN13@AuKernelRe
	mov	rax, QWORD PTR data_dir$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN12@AuKernelRe
$LN13@AuKernelRe:

; 196  : 		return;

	jmp	$LN1@AuKernelRe
$LN12@AuKernelRe:

; 197  : 
; 198  : 	PIMAGE_RELOCATION_BLOCK reloc_table = raw_offset<PIMAGE_RELOCATION_BLOCK>(image, data_dir.VirtualAddress);

	mov	rax, QWORD PTR data_dir$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAX@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAXH@Z ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,void *>
	mov	QWORD PTR reloc_table$[rbp], rax

; 199  : 	PIMAGE_RELOCATION_BLOCK cur_block = reloc_table;

	mov	rax, QWORD PTR reloc_table$[rbp]
	mov	QWORD PTR cur_block$[rbp], rax
$LN2@AuKernelRe:

; 200  : 
; 201  : 	while (raw_diff(cur_block, reloc_table) < data_dir.Size) {

	mov	rdx, QWORD PTR reloc_table$[rbp]
	mov	rcx, QWORD PTR cur_block$[rbp]
	call	??$raw_diff@U_IMAGE_RELOCATION_BLOCK_@@U1@@@YAHPEAU_IMAGE_RELOCATION_BLOCK_@@0@Z ; raw_diff<_IMAGE_RELOCATION_BLOCK_,_IMAGE_RELOCATION_BLOCK_>
	mov	rcx, QWORD PTR data_dir$[rbp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	$LN3@AuKernelRe

; 202  : 		uint32_t entries = (cur_block->BlockSize - 8) / 2;

	mov	rax, QWORD PTR cur_block$[rbp]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, 8
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	mov	DWORD PTR entries$1[rbp], eax

; 203  : 		for (uint32_t i = 0; i < entries; ++i) {

	mov	DWORD PTR i$2[rbp], 0
	jmp	SHORT $LN6@AuKernelRe
$LN4@AuKernelRe:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN6@AuKernelRe:
	mov	eax, DWORD PTR entries$1[rbp]
	cmp	DWORD PTR i$2[rbp], eax
	jae	$LN5@AuKernelRe

; 204  : 			auto& entry = cur_block->entries[i];

	mov	eax, DWORD PTR i$2[rbp]
	mov	rcx, QWORD PTR cur_block$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2+8]
	mov	QWORD PTR entry$3[rbp], rax

; 205  : 			uint16_t type = entry.type;

	mov	rax, QWORD PTR entry$3[rbp]
	movzx	eax, WORD PTR [rax]
	shr	ax, 12
	and	ax, 15
	mov	WORD PTR type$4[rbp], ax

; 206  : 			void* relocitem = raw_offset<void*>(image, entry.offset + cur_block->PageRVA);

	mov	eax, 4095				; 00000fffH
	mov	rcx, QWORD PTR entry$3[rbp]
	movzx	ecx, WORD PTR [rcx]
	and	cx, ax
	movzx	eax, cx
	movzx	eax, ax
	mov	rcx, QWORD PTR cur_block$[rbp]
	add	eax, DWORD PTR [rcx]
	mov	edx, eax
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z	; raw_offset<void *,void *>
	mov	QWORD PTR relocitem$5[rbp], rax

; 207  : 			switch (type){

	movzx	eax, WORD PTR type$4[rbp]
	mov	DWORD PTR tv143[rbp], eax
	cmp	DWORD PTR tv143[rbp], 0
	je	SHORT $LN14@AuKernelRe
	cmp	DWORD PTR tv143[rbp], 1
	je	SHORT $LN15@AuKernelRe
	cmp	DWORD PTR tv143[rbp], 2
	je	SHORT $LN16@AuKernelRe
	cmp	DWORD PTR tv143[rbp], 3
	je	SHORT $LN17@AuKernelRe
	cmp	DWORD PTR tv143[rbp], 10
	je	SHORT $LN19@AuKernelRe
	jmp	$LN20@AuKernelRe
$LN14@AuKernelRe:

; 208  : 			case IMAGE_REL_BASED_ABSOLUTE:
; 209  : 				break;

	jmp	$LN7@AuKernelRe
$LN15@AuKernelRe:

; 210  : 			case IMAGE_REL_BASED_HIGH:
; 211  : 				*reinterpret_cast<uint16_t*>(relocitem) += (diff >> 16) & UINT16_MAX;

	mov	eax, DWORD PTR diff$[rbp]
	sar	eax, 16
	and	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR relocitem$5[rbp]
	movzx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR relocitem$5[rbp]
	mov	WORD PTR [rcx], ax

; 212  : 				break;

	jmp	SHORT $LN7@AuKernelRe
$LN16@AuKernelRe:

; 213  : 			case IMAGE_REL_BASED_LOW:
; 214  : 				*reinterpret_cast<uint16_t*>(relocitem) += (diff & UINT16_MAX);

	mov	eax, DWORD PTR diff$[rbp]
	and	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR relocitem$5[rbp]
	movzx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR relocitem$5[rbp]
	mov	WORD PTR [rcx], ax

; 215  : 				break;

	jmp	SHORT $LN7@AuKernelRe
$LN17@AuKernelRe:

; 216  : 			case IMAGE_REL_BASED_HIGHLOW:
; 217  : 				*reinterpret_cast<uint32_t*>(relocitem) += (diff & UINT32_MAX);

	mov	rax, QWORD PTR relocitem$5[rbp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR diff$[rbp]
	mov	rcx, QWORD PTR relocitem$5[rbp]
	mov	DWORD PTR [rcx], eax

; 218  : 				break;

	jmp	SHORT $LN7@AuKernelRe

; 219  : 			case IMAGE_REL_BASED_HIGHADJ:
; 220  : 				return;

	jmp	SHORT $LN1@AuKernelRe

; 221  : 				break;

	jmp	SHORT $LN7@AuKernelRe
$LN19@AuKernelRe:

; 222  : 			case IMAGE_REL_BASED_DIR64:
; 223  : 				*reinterpret_cast<uint64_t*>(relocitem) += (diff & UINT32_MAX);

	mov	eax, DWORD PTR diff$[rbp]
	mov	rcx, QWORD PTR relocitem$5[rbp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR relocitem$5[rbp]
	mov	QWORD PTR [rcx], rax

; 224  : 				SeTextOut("Relocating executable dir64 %x\r\n", *reinterpret_cast<uint64_t*>(relocitem));

	mov	rax, QWORD PTR relocitem$5[rbp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:??_C@_0CB@EDINLNKI@Relocating?5executable?5dir64?5?$CFx?$AN@
	call	SeTextOut

; 225  : 				break;

	jmp	SHORT $LN7@AuKernelRe
$LN20@AuKernelRe:

; 226  : 			default:
; 227  : 				return;

	jmp	SHORT $LN1@AuKernelRe
$LN7@AuKernelRe:

; 228  : 				break;
; 229  : 			}
; 230  : 
; 231  : 		}

	jmp	$LN4@AuKernelRe
$LN5@AuKernelRe:

; 232  : 
; 233  : 		uint32_t next_off = DIV_ROUND_UP(cur_block->BlockSize, 4) * 4;

	mov	rax, QWORD PTR cur_block$[rbp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, 3
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	shl	eax, 2
	mov	DWORD PTR next_off$6[rbp], eax

; 234  : 		cur_block = raw_offset<PIMAGE_RELOCATION_BLOCK>(cur_block, next_off);

	mov	edx, DWORD PTR next_off$6[rbp]
	mov	rcx, QWORD PTR cur_block$[rbp]
	call	??$raw_offset@PEAU_IMAGE_RELOCATION_BLOCK_@@PEAU1@@@YAPEAU_IMAGE_RELOCATION_BLOCK_@@PEAU0@H@Z ; raw_offset<_IMAGE_RELOCATION_BLOCK_ *,_IMAGE_RELOCATION_BLOCK_ *>
	mov	QWORD PTR cur_block$[rbp], rax

; 235  : 	}

	jmp	$LN2@AuKernelRe
$LN3@AuKernelRe:
$LN1@AuKernelRe:

; 236  : 	//for (;;);
; 237  : }

	lea	rsp, QWORD PTR [rbp+128]
	pop	rbp
	ret	0
?AuKernelRelocatePE@@YAXPEAXPEAU_IMAGE_NT_HEADERS_PE32PLUS@@H@Z ENDP ; AuKernelRelocatePE
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pe.cpp
;	COMDAT ?AuKernelLinkImports@@YAXPEAX@Z
_TEXT	SEGMENT
keaddr$ = 0
imageAligned$ = 8
dos_header$ = 16
nt_headers$ = 24
datadir$ = 32
importdir$ = 40
n$1 = 48
func$2 = 56
iat$3 = 64
hint$4 = 72
fname$5 = 80
procaddr$6 = 88
image$ = 176
?AuKernelLinkImports@@YAXPEAX@Z PROC			; AuKernelLinkImports, COMDAT

; 125  : void AuKernelLinkImports(void* image) {

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 192				; 000000c0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEA6E0C3_pe@cpp
	call	__CheckForDebuggerJustMyCode

; 126  : 	void* keaddr = (void*)0xFFFFC00000000000;

	mov	rax, -70368744177664			; ffffc00000000000H
	mov	QWORD PTR keaddr$[rbp], rax

; 127  : 	uint8_t *imageAligned = (uint8_t*)keaddr;

	mov	rax, QWORD PTR keaddr$[rbp]
	mov	QWORD PTR imageAligned$[rbp], rax

; 128  : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)imageAligned;

	mov	rax, QWORD PTR imageAligned$[rbp]
	mov	QWORD PTR dos_header$[rbp], rax

; 129  : 	PIMAGE_NT_HEADERS nt_headers = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rbp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rbp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
	mov	QWORD PTR nt_headers$[rbp], rax

; 130  : 	if (IMAGE_DATA_DIRECTORY_IMPORT + 1 > nt_headers->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt_headers$[rbp]
	cmp	DWORD PTR [rax+132], 2
	jae	SHORT $LN7@AuKernelLi

; 131  : 		return;

	jmp	$LN1@AuKernelLi
$LN7@AuKernelLi:

; 132  : 	IMAGE_DATA_DIRECTORY& datadir = nt_headers->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_IMPORT];

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nt_headers$[rbp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rbp], rax

; 133  : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN9@AuKernelLi
	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN8@AuKernelLi
$LN9@AuKernelLi:

; 134  : 		return;

	jmp	$LN1@AuKernelLi
$LN8@AuKernelLi:

; 135  : 	
; 136  : 	PIMAGE_IMPORT_DIRECTORY importdir = raw_offset<PIMAGE_IMPORT_DIRECTORY>(imageAligned, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR imageAligned$[rbp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY *,unsigned char *>
	mov	QWORD PTR importdir$[rbp], rax

; 137  : 	for (size_t n = 0; importdir[n].ThunkTableRva; ++n) {

	mov	QWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@AuKernelLi
$LN2@AuKernelLi:
	mov	rax, QWORD PTR n$1[rbp]
	inc	rax
	mov	QWORD PTR n$1[rbp], rax
$LN4@AuKernelLi:
	imul	rax, QWORD PTR n$1[rbp], 20
	mov	rcx, QWORD PTR importdir$[rbp]
	cmp	DWORD PTR [rcx+rax+16], 0
	je	$LN3@AuKernelLi

; 138  : 		const char* func = raw_offset<const char*>(imageAligned, importdir[n].NameRva);

	imul	rax, QWORD PTR n$1[rbp], 20
	mov	rcx, QWORD PTR importdir$[rbp]
	mov	edx, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR imageAligned$[rbp]
	call	??$raw_offset@PEBDPEAE@@YAPEBDPEAEH@Z	; raw_offset<char const *,unsigned char *>
	mov	QWORD PTR func$2[rbp], rax

; 139  : 		PIMAGE_IMPORT_LOOKUP_TABLE_PE32P iat = raw_offset<PIMAGE_IMPORT_LOOKUP_TABLE_PE32P>(imageAligned, importdir[n].ThunkTableRva);

	imul	rax, QWORD PTR n$1[rbp], 20
	mov	rcx, QWORD PTR importdir$[rbp]
	mov	edx, DWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR imageAligned$[rbp]
	call	??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z	; raw_offset<unsigned __int64 *,unsigned char *>
	mov	QWORD PTR iat$3[rbp], rax
$LN5@AuKernelLi:

; 140  : 		while (*iat) {

	mov	rax, QWORD PTR iat$3[rbp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@AuKernelLi

; 141  : 			PIMAGE_IMPORT_HINT_TABLE hint = raw_offset<PIMAGE_IMPORT_HINT_TABLE>(imageAligned, *iat);

	mov	rax, QWORD PTR iat$3[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR imageAligned$[rbp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAE@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,unsigned char *>
	mov	QWORD PTR hint$4[rbp], rax

; 142  : 			const char* fname = hint->name;

	mov	rax, QWORD PTR hint$4[rbp]
	add	rax, 2
	mov	QWORD PTR fname$5[rbp], rax

; 143  : 			//AuTextOut("Imports -> %s \n", fname);
; 144  : 			void* procaddr = AuGetProcAddress((void*)image, fname);

	mov	rdx, QWORD PTR fname$5[rbp]
	mov	rcx, QWORD PTR image$[rbp]
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR procaddr$6[rbp], rax

; 145  : 			*iat = (uint64_t)procaddr;

	mov	rax, QWORD PTR iat$3[rbp]
	mov	rcx, QWORD PTR procaddr$6[rbp]
	mov	QWORD PTR [rax], rcx

; 146  : 			++iat;

	mov	rax, QWORD PTR iat$3[rbp]
	add	rax, 8
	mov	QWORD PTR iat$3[rbp], rax

; 147  : 		}

	jmp	SHORT $LN5@AuKernelLi
$LN6@AuKernelLi:

; 148  : 	}

	jmp	$LN2@AuKernelLi
$LN3@AuKernelLi:
$LN1@AuKernelLi:

; 149  : }

	lea	rsp, QWORD PTR [rbp+160]
	pop	rbp
	ret	0
?AuKernelLinkImports@@YAXPEAX@Z ENDP			; AuKernelLinkImports
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pe.cpp
;	COMDAT ?AuPEPrintExports@@YAXPEAX@Z
_TEXT	SEGMENT
dos_header$ = 0
ntHeaders$ = 8
datadir$ = 16
exportdir$ = 24
FuntionNameAddressArray$ = 32
FunctionOrdinalAddressArray$ = 40
FunctionAddressArray$ = 48
i$1 = 56
function_name$2 = 64
image$ = 160
?AuPEPrintExports@@YAXPEAX@Z PROC			; AuPEPrintExports, COMDAT

; 72   : void AuPEPrintExports(void *image){

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 176				; 000000b0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEA6E0C3_pe@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 
; 74   : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rbp]
	mov	QWORD PTR dos_header$[rbp], rax

; 75   : 	PIMAGE_NT_HEADERS ntHeaders = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rbp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rbp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
	mov	QWORD PTR ntHeaders$[rbp], rax

; 76   : 	if (IMAGE_DATA_DIRECTORY_EXPORT + 1 > ntHeaders->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR ntHeaders$[rbp]
	cmp	DWORD PTR [rax+132], 1
	jae	SHORT $LN5@AuPEPrintE

; 77   : 		return;

	jmp	$LN1@AuPEPrintE
$LN5@AuPEPrintE:

; 78   : 	IMAGE_DATA_DIRECTORY& datadir = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_EXPORT];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ntHeaders$[rbp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rbp], rax

; 79   : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN7@AuPEPrintE
	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@AuPEPrintE
$LN7@AuPEPrintE:

; 80   : 		return;

	jmp	$LN1@AuPEPrintE
$LN6@AuPEPrintE:

; 81   : 	PIMAGE_EXPORT_DIRECTORY exportdir = raw_offset<PIMAGE_EXPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY *,void *>
	mov	QWORD PTR exportdir$[rbp], rax

; 82   : 	uint32_t* FuntionNameAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfNames);

	mov	rax, QWORD PTR exportdir$[rbp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int *,void *>
	mov	QWORD PTR FuntionNameAddressArray$[rbp], rax

; 83   : 	uint16_t* FunctionOrdinalAddressArray = raw_offset<uint16_t*>(image, exportdir->AddressOfNameOrdinal);

	mov	rax, QWORD PTR exportdir$[rbp]
	mov	edx, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z	; raw_offset<unsigned short *,void *>
	mov	QWORD PTR FunctionOrdinalAddressArray$[rbp], rax

; 84   : 	uint32_t* FunctionAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfFunctions);

	mov	rax, QWORD PTR exportdir$[rbp]
	mov	edx, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int *,void *>
	mov	QWORD PTR FunctionAddressArray$[rbp], rax

; 85   : 
; 86   : 	for (int i = 0; i < exportdir->NumberOfNames; i++) {

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuPEPrintE
$LN2@AuPEPrintE:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuPEPrintE:
	mov	rax, QWORD PTR exportdir$[rbp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rbp], eax
	jae	SHORT $LN3@AuPEPrintE

; 87   : 
; 88   : 		char* function_name = raw_offset<char*>(image, FuntionNameAddressArray[i]);

	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR FuntionNameAddressArray$[rbp]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z	; raw_offset<char *,void *>
	mov	QWORD PTR function_name$2[rbp], rax

; 89   : 		AuTextOut("Fname -> %s \n", function_name);

	mov	rdx, QWORD PTR function_name$2[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0O@NBCIPHIM@Fname?5?9?$DO?5?$CFs?5?6@
	call	AuTextOut

; 90   : 	}

	jmp	SHORT $LN2@AuPEPrintE
$LN3@AuPEPrintE:
$LN1@AuPEPrintE:

; 91   : }

	lea	rsp, QWORD PTR [rbp+144]
	pop	rbp
	ret	0
?AuPEPrintExports@@YAXPEAX@Z ENDP			; AuPEPrintExports
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pe.cpp
;	COMDAT ?AuKernelLinkDLL@@YAXPEAX@Z
_TEXT	SEGMENT
imageAligned$ = 0
dos_header$ = 8
nt_headers$ = 16
datadir$ = 24
importdir$ = 32
n$1 = 40
func$2 = 48
iat$3 = 56
hint$4 = 64
fname$5 = 72
procaddr$6 = 80
image$ = 176
?AuKernelLinkDLL@@YAXPEAX@Z PROC			; AuKernelLinkDLL, COMDAT

; 96   : void AuKernelLinkDLL(void* image) {

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 192				; 000000c0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEA6E0C3_pe@cpp
	call	__CheckForDebuggerJustMyCode

; 97   : 	uint8_t *imageAligned = (uint8_t*)image;

	mov	rax, QWORD PTR image$[rbp]
	mov	QWORD PTR imageAligned$[rbp], rax

; 98   : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)imageAligned;

	mov	rax, QWORD PTR imageAligned$[rbp]
	mov	QWORD PTR dos_header$[rbp], rax

; 99   : 	PIMAGE_NT_HEADERS nt_headers = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rbp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rbp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
	mov	QWORD PTR nt_headers$[rbp], rax

; 100  : 	if (IMAGE_DATA_DIRECTORY_IMPORT + 1 > nt_headers->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt_headers$[rbp]
	cmp	DWORD PTR [rax+132], 2
	jae	SHORT $LN7@AuKernelLi

; 101  : 		return;

	jmp	$LN1@AuKernelLi
$LN7@AuKernelLi:

; 102  : 	IMAGE_DATA_DIRECTORY& datadir = nt_headers->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_IMPORT];

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nt_headers$[rbp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rbp], rax

; 103  : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0) {

	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN9@AuKernelLi
	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN8@AuKernelLi
$LN9@AuKernelLi:

; 104  : 		return;

	jmp	$LN1@AuKernelLi
$LN8@AuKernelLi:

; 105  : 	}
; 106  : 	PIMAGE_IMPORT_DIRECTORY importdir = raw_offset<PIMAGE_IMPORT_DIRECTORY>(imageAligned, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR imageAligned$[rbp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAE@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAEH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY *,unsigned char *>
	mov	QWORD PTR importdir$[rbp], rax

; 107  : 	for (size_t n = 0; importdir[n].ThunkTableRva; ++n) {

	mov	QWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@AuKernelLi
$LN2@AuKernelLi:
	mov	rax, QWORD PTR n$1[rbp]
	inc	rax
	mov	QWORD PTR n$1[rbp], rax
$LN4@AuKernelLi:
	imul	rax, QWORD PTR n$1[rbp], 20
	mov	rcx, QWORD PTR importdir$[rbp]
	cmp	DWORD PTR [rcx+rax+16], 0
	je	$LN3@AuKernelLi

; 108  : 		const char* func = raw_offset<const char*>(image, importdir[n].NameRva);

	imul	rax, QWORD PTR n$1[rbp], 20
	mov	rcx, QWORD PTR importdir$[rbp]
	mov	edx, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z	; raw_offset<char const *,void *>
	mov	QWORD PTR func$2[rbp], rax

; 109  : 		PIMAGE_IMPORT_LOOKUP_TABLE_PE32P iat = raw_offset<PIMAGE_IMPORT_LOOKUP_TABLE_PE32P>(imageAligned, importdir[n].ThunkTableRva);

	imul	rax, QWORD PTR n$1[rbp], 20
	mov	rcx, QWORD PTR importdir$[rbp]
	mov	edx, DWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR imageAligned$[rbp]
	call	??$raw_offset@PEA_KPEAE@@YAPEA_KPEAEH@Z	; raw_offset<unsigned __int64 *,unsigned char *>
	mov	QWORD PTR iat$3[rbp], rax
$LN5@AuKernelLi:

; 110  : 		while (*iat) {

	mov	rax, QWORD PTR iat$3[rbp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@AuKernelLi

; 111  : 			PIMAGE_IMPORT_HINT_TABLE hint = raw_offset<PIMAGE_IMPORT_HINT_TABLE>(image, *iat);

	mov	rax, QWORD PTR iat$3[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE *,void *>
	mov	QWORD PTR hint$4[rbp], rax

; 112  : 			const char* fname = hint->name;

	mov	rax, QWORD PTR hint$4[rbp]
	add	rax, 2
	mov	QWORD PTR fname$5[rbp], rax

; 113  : 			void* procaddr = AuGetProcAddress((void*)0xFFFFC00000000000, fname);

	mov	rdx, QWORD PTR fname$5[rbp]
	mov	rcx, -70368744177664			; ffffc00000000000H
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR procaddr$6[rbp], rax

; 114  : 			*iat = (uint64_t)procaddr;

	mov	rax, QWORD PTR iat$3[rbp]
	mov	rcx, QWORD PTR procaddr$6[rbp]
	mov	QWORD PTR [rax], rcx

; 115  : 			++iat;

	mov	rax, QWORD PTR iat$3[rbp]
	add	rax, 8
	mov	QWORD PTR iat$3[rbp], rax

; 116  : 		}

	jmp	SHORT $LN5@AuKernelLi
$LN6@AuKernelLi:

; 117  : 	}

	jmp	$LN2@AuKernelLi
$LN3@AuKernelLi:
$LN1@AuKernelLi:

; 118  : }

	lea	rsp, QWORD PTR [rbp+160]
	pop	rbp
	ret	0
?AuKernelLinkDLL@@YAXPEAX@Z ENDP			; AuKernelLinkDLL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\pe.cpp
;	COMDAT ?AuGetProcAddress@@YAPEAXPEAXPEBD@Z
_TEXT	SEGMENT
dos_header$ = 0
ntHeaders$ = 8
datadir$ = 16
exportdir$ = 24
FuntionNameAddressArray$ = 32
FunctionOrdinalAddressArray$ = 40
FunctionAddressArray$ = 48
i$1 = 56
function_name$2 = 64
ordinal$3 = 72
FunctionAddress$4 = 76
image$ = 160
procname$ = 168
?AuGetProcAddress@@YAPEAXPEAXPEBD@Z PROC		; AuGetProcAddress, COMDAT

; 41   : void* AuGetProcAddress(void *image, const char* procname){

$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 176				; 000000b0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__DEA6E0C3_pe@cpp
	call	__CheckForDebuggerJustMyCode

; 42   : 
; 43   : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rbp]
	mov	QWORD PTR dos_header$[rbp], rax

; 44   : 	PIMAGE_NT_HEADERS ntHeaders = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rbp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rbp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
	mov	QWORD PTR ntHeaders$[rbp], rax

; 45   : 	if (IMAGE_DATA_DIRECTORY_EXPORT + 1 > ntHeaders->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR ntHeaders$[rbp]
	cmp	DWORD PTR [rax+132], 1
	jae	SHORT $LN5@AuGetProcA

; 46   : 		return NULL;

	xor	eax, eax
	jmp	$LN1@AuGetProcA
$LN5@AuGetProcA:

; 47   : 	IMAGE_DATA_DIRECTORY& datadir = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_EXPORT];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ntHeaders$[rbp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rbp], rax

; 48   : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN7@AuGetProcA
	mov	rax, QWORD PTR datadir$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@AuGetProcA
$LN7@AuGetProcA:

; 49   : 		return NULL;

	xor	eax, eax
	jmp	$LN1@AuGetProcA
$LN6@AuGetProcA:

; 50   : 	PIMAGE_EXPORT_DIRECTORY exportdir = raw_offset<PIMAGE_EXPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY *,void *>
	mov	QWORD PTR exportdir$[rbp], rax

; 51   : 	uint32_t* FuntionNameAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfNames);

	mov	rax, QWORD PTR exportdir$[rbp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int *,void *>
	mov	QWORD PTR FuntionNameAddressArray$[rbp], rax

; 52   : 	uint16_t* FunctionOrdinalAddressArray = raw_offset<uint16_t*>(image, exportdir->AddressOfNameOrdinal);

	mov	rax, QWORD PTR exportdir$[rbp]
	mov	edx, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z	; raw_offset<unsigned short *,void *>
	mov	QWORD PTR FunctionOrdinalAddressArray$[rbp], rax

; 53   : 	uint32_t* FunctionAddressArray = raw_offset<uint32_t*>(image, exportdir->AddressOfFunctions);

	mov	rax, QWORD PTR exportdir$[rbp]
	mov	edx, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int *,void *>
	mov	QWORD PTR FunctionAddressArray$[rbp], rax

; 54   : 
; 55   : 	for (int i = 0; i < exportdir->NumberOfNames; i++) {

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuGetProcA
$LN2@AuGetProcA:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuGetProcA:
	mov	rax, QWORD PTR exportdir$[rbp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rbp], eax
	jae	SHORT $LN3@AuGetProcA

; 56   : 
; 57   : 		char* function_name = raw_offset<char*>(image, FuntionNameAddressArray[i]);

	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR FuntionNameAddressArray$[rbp]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z	; raw_offset<char *,void *>
	mov	QWORD PTR function_name$2[rbp], rax

; 58   : 		if (strcmp(function_name, procname) == 0) {

	mov	rdx, QWORD PTR procname$[rbp]
	mov	rcx, QWORD PTR function_name$2[rbp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN8@AuGetProcA

; 59   : 			uint16_t ordinal = FunctionOrdinalAddressArray[i];

	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR FunctionOrdinalAddressArray$[rbp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	WORD PTR ordinal$3[rbp], ax

; 60   : 			uint32_t FunctionAddress = FunctionAddressArray[ordinal];

	movzx	eax, WORD PTR ordinal$3[rbp]
	mov	rcx, QWORD PTR FunctionAddressArray$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR FunctionAddress$4[rbp], eax

; 61   : 			return raw_offset<void*>(image, FunctionAddress);

	mov	edx, DWORD PTR FunctionAddress$4[rbp]
	mov	rcx, QWORD PTR image$[rbp]
	call	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z	; raw_offset<void *,void *>
	jmp	SHORT $LN1@AuGetProcA
$LN8@AuGetProcA:

; 62   : 		}
; 63   : 	}

	jmp	SHORT $LN2@AuGetProcA
$LN3@AuGetProcA:

; 64   : 
; 65   : 	return nullptr;

	xor	eax, eax
$LN1@AuGetProcA:

; 66   : }

	lea	rsp, QWORD PTR [rbp+144]
	pop	rbp
	ret	0
?AuGetProcAddress@@YAPEAXPEAXPEBD@Z ENDP		; AuGetProcAddress
_TEXT	ENDS
END
