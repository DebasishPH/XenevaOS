; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__rtc@@3PEAU__rtc__@@EA			; __rtc
_BSS	SEGMENT
?__rtc@@3PEAU__rtc__@@EA DQ 01H DUP (?)			; __rtc
_BSS	ENDS
PUBLIC	?AuRTCInitialize@@YAXXZ				; AuRTCInitialize
PUBLIC	AuRTCGetYear
PUBLIC	AuRTCGetCentury
PUBLIC	AuRTCGetMinutes
PUBLIC	AuRTCGetSecond
PUBLIC	AuRTCGetDay
PUBLIC	AuRTCGetHour
PUBLIC	AuRTCGetMonth
PUBLIC	?AuRTCGetRegister@@YAEH@Z			; AuRTCGetRegister
PUBLIC	?AuRTCSetRegister@@YAXGE@Z			; AuRTCSetRegister
PUBLIC	?AuRTCIsUpdating@@YAHXZ				; AuRTCIsUpdating
PUBLIC	?AuRTCReadDateTime@@YAXXZ			; AuRTCReadDateTime
PUBLIC	?AuRTCClockUpdate@@YAX_KPEAX@Z			; AuRTCClockUpdate
EXTRN	x64_inportb:PROC
EXTRN	x64_outportb:PROC
EXTRN	AuHalRegisterIRQ:PROC
EXTRN	AuInterruptEnd:PROC
EXTRN	AuDisableInterrupt:PROC
EXTRN	AuEnableInterrupt:PROC
EXTRN	kmalloc:PROC
EXTRN	memset:PROC
EXTRN	?AuTimerFire@@YAXHHH@Z:PROC			; AuTimerFire
pdata	SEGMENT
$pdata$?AuRTCInitialize@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+215
	DD	imagerel $unwind$?AuRTCInitialize@@YAXXZ
$pdata$?AuRTCGetRegister@@YAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?AuRTCGetRegister@@YAEH@Z
$pdata$?AuRTCSetRegister@@YAXGE@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?AuRTCSetRegister@@YAXGE@Z
$pdata$?AuRTCIsUpdating@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?AuRTCIsUpdating@@YAHXZ
$pdata$?AuRTCReadDateTime@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+555
	DD	imagerel $unwind$?AuRTCReadDateTime@@YAXXZ
$pdata$?AuRTCClockUpdate@@YAX_KPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+144
	DD	imagerel $unwind$?AuRTCClockUpdate@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuRTCInitialize@@YAXXZ DD 010401H
	DD	06204H
$unwind$?AuRTCGetRegister@@YAEH@Z DD 010801H
	DD	04208H
$unwind$?AuRTCSetRegister@@YAXGE@Z DD 010d01H
	DD	0420dH
$unwind$?AuRTCIsUpdating@@YAHXZ DD 010401H
	DD	06204H
$unwind$?AuRTCReadDateTime@@YAXXZ DD 010401H
	DD	08204H
$unwind$?AuRTCClockUpdate@@YAX_KPEAX@Z DD 010e01H
	DD	0620eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
tv69 = 32
ready$ = 33
tv79 = 36
v$ = 64
p$ = 72
?AuRTCClockUpdate@@YAX_KPEAX@Z PROC			; AuRTCClockUpdate

; 85   : void AuRTCClockUpdate(size_t v, void* p) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 86   : 	AuDisableInterrupt();

	call	AuDisableInterrupt

; 87   : 
; 88   : 	bool ready = AuRTCGetRegister(0x0C) & 0x10;

	mov	ecx, 12
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	movzx	eax, al
	and	eax, 16
	test	eax, eax
	je	SHORT $LN4@AuRTCClock
	mov	BYTE PTR tv69[rsp], 1
	jmp	SHORT $LN5@AuRTCClock
$LN4@AuRTCClock:
	mov	BYTE PTR tv69[rsp], 0
$LN5@AuRTCClock:
	movzx	eax, BYTE PTR tv69[rsp]
	mov	BYTE PTR ready$[rsp], al

; 89   : 	if (ready)

	movzx	eax, BYTE PTR ready$[rsp]
	test	eax, eax
	je	SHORT $LN1@AuRTCClock

; 90   : 		AuRTCReadDateTime();

	call	?AuRTCReadDateTime@@YAXXZ		; AuRTCReadDateTime
$LN1@AuRTCClock:

; 91   : 
; 92   : 	AuTimerFire(__rtc->second, __rtc->minute, __rtc->hour);

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+5]
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+6]
	mov	rdx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	edx, BYTE PTR [rdx+7]
	mov	DWORD PTR tv79[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, eax
	call	?AuTimerFire@@YAXHHH@Z			; AuTimerFire

; 93   : 	
; 94   : 	AuEnableInterrupt();

	call	AuEnableInterrupt

; 95   : 	AuInterruptEnd(8);

	mov	cl, 8
	call	AuInterruptEnd

; 96   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuRTCClockUpdate@@YAX_KPEAX@Z ENDP			; AuRTCClockUpdate
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
registerB$ = 32
tv92 = 36
tv134 = 40
tv144 = 44
tv159 = 48
tv169 = 52
tv179 = 56
?AuRTCReadDateTime@@YAXXZ PROC				; AuRTCReadDateTime

; 61   : void AuRTCReadDateTime() {

$LN6:
	sub	rsp, 72					; 00000048H
$LN3@AuRTCReadD:

; 62   : 	// Wait until rtc is not updating
; 63   : 	while (AuRTCIsUpdating());

	call	?AuRTCIsUpdating@@YAHXZ			; AuRTCIsUpdating
	test	eax, eax
	je	SHORT $LN2@AuRTCReadD
	jmp	SHORT $LN3@AuRTCReadD
$LN2@AuRTCReadD:

; 64   : 
; 65   : 	__rtc->second = AuRTCGetRegister(0x00);

	xor	ecx, ecx
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+7], al

; 66   : 	__rtc->minute = AuRTCGetRegister(0x02);

	mov	ecx, 2
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+6], al

; 67   : 	__rtc->hour = AuRTCGetRegister(0x04);

	mov	ecx, 4
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+5], al

; 68   : 	__rtc->day = AuRTCGetRegister(0x07);

	mov	ecx, 7
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+4], al

; 69   : 	__rtc->month = AuRTCGetRegister(0x08);

	mov	ecx, 8
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+3], al

; 70   : 	__rtc->year = AuRTCGetRegister(0x09);

	mov	ecx, 9
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+2], al

; 71   : 
; 72   : 	uint8_t registerB = AuRTCGetRegister(0x0B);

	mov	ecx, 11
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	BYTE PTR registerB$[rsp], al

; 73   : 
; 74   : 	// Convert BCD to binary values if necessary
; 75   : 	if (!(registerB & 0x04)) {

	movzx	eax, BYTE PTR registerB$[rsp]
	and	eax, 4
	test	eax, eax
	jne	$LN1@AuRTCReadD

; 76   : 		__rtc->second = (__rtc->second & 0x0F) + ((__rtc->second / 16) * 10);

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+7]
	and	eax, 15
	mov	DWORD PTR tv92[rsp], eax
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+7]
	mov	eax, ecx
	cdq
	and	edx, 15
	add	eax, edx
	sar	eax, 4
	imul	eax, eax, 10
	mov	ecx, DWORD PTR tv92[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+7], al

; 77   : 		__rtc->minute = (__rtc->minute & 0x0F) + ((__rtc->minute / 16) * 10);

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+6]
	and	eax, 15
	mov	DWORD PTR tv134[rsp], eax
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+6]
	mov	eax, ecx
	cdq
	and	edx, 15
	add	eax, edx
	sar	eax, 4
	imul	eax, eax, 10
	mov	ecx, DWORD PTR tv134[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+6], al

; 78   : 		__rtc->hour = ((__rtc->hour & 0x0F) + (((__rtc->hour & 0x70) / 16) * 10)) | (__rtc->hour & 0x80);

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+5]
	and	eax, 15
	mov	DWORD PTR tv144[rsp], eax
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+5]
	and	ecx, 112				; 00000070H
	mov	eax, ecx
	cdq
	and	edx, 15
	add	eax, edx
	sar	eax, 4
	imul	eax, eax, 10
	mov	ecx, DWORD PTR tv144[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+5]
	and	ecx, 128				; 00000080H
	or	eax, ecx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+5], al

; 79   : 		__rtc->day = (__rtc->day & 0x0F) + ((__rtc->day / 16) * 10);

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+4]
	and	eax, 15
	mov	DWORD PTR tv159[rsp], eax
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+4]
	mov	eax, ecx
	cdq
	and	edx, 15
	add	eax, edx
	sar	eax, 4
	imul	eax, eax, 10
	mov	ecx, DWORD PTR tv159[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+4], al

; 80   : 		__rtc->month = (__rtc->month & 0x0F) + ((__rtc->month / 16) * 10);

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+3]
	and	eax, 15
	mov	DWORD PTR tv169[rsp], eax
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+3]
	mov	eax, ecx
	cdq
	and	edx, 15
	add	eax, edx
	sar	eax, 4
	imul	eax, eax, 10
	mov	ecx, DWORD PTR tv169[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+3], al

; 81   : 		__rtc->year = (__rtc->year & 0x0F) + ((__rtc->year / 16) * 10);

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+2]
	and	eax, 15
	mov	DWORD PTR tv179[rsp], eax
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR [rcx+2]
	mov	eax, ecx
	cdq
	and	edx, 15
	add	eax, edx
	sar	eax, 4
	imul	eax, eax, 10
	mov	ecx, DWORD PTR tv179[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	mov	BYTE PTR [rcx+2], al
$LN1@AuRTCReadD:

; 82   : 	}
; 83   : }

	add	rsp, 72					; 00000048H
	ret	0
?AuRTCReadDateTime@@YAXXZ ENDP				; AuRTCReadDateTime
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
status$ = 32
?AuRTCIsUpdating@@YAHXZ PROC				; AuRTCIsUpdating

; 52   : int AuRTCIsUpdating() {

$LN3:
	sub	rsp, 56					; 00000038H

; 53   : 	x64_outportb(CMOS_ADDR, 0x0A);

	mov	dl, 10
	mov	cx, 112					; 00000070H
	call	x64_outportb

; 54   : 	uint32_t status = x64_inportb(CMOS_DATA);

	mov	cx, 113					; 00000071H
	call	x64_inportb
	movzx	eax, al
	mov	DWORD PTR status$[rsp], eax

; 55   : 	return (status & 0x80);

	mov	eax, DWORD PTR status$[rsp]
	and	eax, 128				; 00000080H

; 56   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuRTCIsUpdating@@YAHXZ ENDP				; AuRTCIsUpdating
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
reg_num$ = 48
val$ = 56
?AuRTCSetRegister@@YAXGE@Z PROC				; AuRTCSetRegister

; 47   : void AuRTCSetRegister(uint16_t reg_num, uint8_t val) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 48   : 	x64_outportb(CMOS_ADDR, reg_num);

	movzx	edx, BYTE PTR reg_num$[rsp]
	mov	cx, 112					; 00000070H
	call	x64_outportb

; 49   : 	x64_outportb(CMOS_DATA, val);

	movzx	edx, BYTE PTR val$[rsp]
	mov	cx, 113					; 00000071H
	call	x64_outportb

; 50   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuRTCSetRegister@@YAXGE@Z ENDP				; AuRTCSetRegister
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
reg_num$ = 48
?AuRTCGetRegister@@YAEH@Z PROC				; AuRTCGetRegister

; 42   : uint8_t AuRTCGetRegister(int reg_num) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 43   : 	x64_outportb(CMOS_ADDR, reg_num);

	movzx	edx, BYTE PTR reg_num$[rsp]
	mov	cx, 112					; 00000070H
	call	x64_outportb

; 44   : 	return x64_inportb(CMOS_DATA);

	mov	cx, 113					; 00000071H
	call	x64_inportb

; 45   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuRTCGetRegister@@YAEH@Z ENDP				; AuRTCGetRegister
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
AuRTCGetMonth PROC

; 174  : 	return __rtc->month;

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+3]

; 175  : }

	ret	0
AuRTCGetMonth ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
AuRTCGetHour PROC

; 166  : 	return __rtc->hour;

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+5]

; 167  : }

	ret	0
AuRTCGetHour ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
AuRTCGetDay PROC

; 158  : 	return __rtc->day;

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+4]

; 159  : }

	ret	0
AuRTCGetDay ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
AuRTCGetSecond PROC

; 150  : 	return __rtc->second;

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+7]

; 151  : }

	ret	0
AuRTCGetSecond ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
AuRTCGetMinutes PROC

; 142  : 	return __rtc->minute;

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+6]

; 143  : }

	ret	0
AuRTCGetMinutes ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
AuRTCGetCentury PROC

; 134  : 	return __rtc->century;

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+1]

; 135  : }

	ret	0
AuRTCGetCentury ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
AuRTCGetYear PROC

; 126  : 	return __rtc->year;

	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	eax, BYTE PTR [rax+2]

; 127  : }

	ret	0
AuRTCGetYear ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\drivers\rtc.cpp
_TEXT	SEGMENT
status$ = 32
tv87 = 36
?AuRTCInitialize@@YAXXZ PROC				; AuRTCInitialize

; 101  : void AuRTCInitialize() {

$LN5:
	sub	rsp, 56					; 00000038H

; 102  : 	__rtc = (AuRTC*)kmalloc(sizeof(AuRTC));

	mov	ecx, 8
	call	kmalloc
	mov	QWORD PTR ?__rtc@@3PEAU__rtc__@@EA, rax	; __rtc

; 103  : 	memset(__rtc, 0, sizeof(AuRTC));

	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	call	memset

; 104  : 
; 105  : 	uint8_t status = AuRTCGetRegister(0x0b);

	mov	ecx, 11
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister
	mov	BYTE PTR status$[rsp], al

; 106  : 	status |= 0x02;

	movzx	eax, BYTE PTR status$[rsp]
	or	eax, 2
	mov	BYTE PTR status$[rsp], al

; 107  : 	status |= 0x10;

	movzx	eax, BYTE PTR status$[rsp]
	or	eax, 16
	mov	BYTE PTR status$[rsp], al

; 108  : 	status &= ~0x20;

	movzx	eax, BYTE PTR status$[rsp]
	and	eax, -33				; ffffffffffffffdfH
	mov	BYTE PTR status$[rsp], al

; 109  : 	status &= ~0x40;

	movzx	eax, BYTE PTR status$[rsp]
	and	eax, -65				; ffffffffffffffbfH
	mov	BYTE PTR status$[rsp], al

; 110  : 	__rtc->bcd = !(status & 0x04);

	movzx	eax, BYTE PTR status$[rsp]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN3@AuRTCIniti
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN4@AuRTCIniti
$LN3@AuRTCIniti:
	mov	DWORD PTR tv87[rsp], 0
$LN4@AuRTCIniti:
	mov	rax, QWORD PTR ?__rtc@@3PEAU__rtc__@@EA	; __rtc
	movzx	ecx, BYTE PTR tv87[rsp]
	mov	BYTE PTR [rax], cl

; 111  : 
; 112  : 	x64_outportb(0x70, 0x0B);

	mov	dl, 11
	mov	cx, 112					; 00000070H
	call	x64_outportb

; 113  : 	x64_outportb(0x71, status);

	movzx	edx, BYTE PTR status$[rsp]
	mov	cx, 113					; 00000071H
	call	x64_outportb

; 114  : 
; 115  : 	AuRTCGetRegister(0x0C);

	mov	ecx, 12
	call	?AuRTCGetRegister@@YAEH@Z		; AuRTCGetRegister

; 116  : 	AuRTCReadDateTime();

	call	?AuRTCReadDateTime@@YAXXZ		; AuRTCReadDateTime

; 117  : 
; 118  : 	AuHalRegisterIRQ(8, AuRTCClockUpdate, 8, false);

	xor	r9d, r9d
	mov	r8b, 8
	lea	rdx, OFFSET FLAT:?AuRTCClockUpdate@@YAX_KPEAX@Z ; AuRTCClockUpdate
	mov	ecx, 8
	call	AuHalRegisterIRQ

; 119  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuRTCInitialize@@YAXXZ ENDP				; AuRTCInitialize
_TEXT	ENDS
END
