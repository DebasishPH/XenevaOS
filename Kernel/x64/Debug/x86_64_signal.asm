; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_signal_debug
_BSS	SEGMENT
_signal_debug DB 01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__EEB9E740_x86_64_signal@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z	; AuAllocateSignal
PUBLIC	?AuCheckSignal@@YA_NPEAU_au_thread_@@PEAUinterrupt_stack_frame@@@Z ; AuCheckSignal
PUBLIC	?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z ; AuGetSignal
PUBLIC	?AuPrepareSignal@@YAXPEAU_au_thread_@@PEAUinterrupt_stack_frame@@PEAU_signal_@@@Z ; AuPrepareSignal
PUBLIC	?AuSendSignal@@YAXGH@Z				; AuSendSignal
PUBLIC	?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z	; AuSignalRemoveAll
PUBLIC	AuSignalDebug
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BK@GCFKEINK@signal?5ret?5stack?5?9?$DO?5?$CFx?5?$AN?6@ ; `string'
EXTRN	AuUnblockThread:PROC
EXTRN	AuThreadFindByID:PROC
EXTRN	AuThreadFindByIDBlockList:PROC
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	AuMapPage:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	SeTextOut:PROC
EXTRN	SigRet:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z DD imagerel $LN4
	DD	imagerel $LN4+249
	DD	imagerel $unwind$?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuCheckSignal@@YA_NPEAU_au_thread_@@PEAUinterrupt_stack_frame@@@Z DD imagerel $LN5
	DD	imagerel $LN5+88
	DD	imagerel $unwind$?AuCheckSignal@@YA_NPEAU_au_thread_@@PEAUinterrupt_stack_frame@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z DD imagerel $LN5
	DD	imagerel $LN5+177
	DD	imagerel $unwind$?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPrepareSignal@@YAXPEAU_au_thread_@@PEAUinterrupt_stack_frame@@PEAU_signal_@@@Z DD imagerel $LN6
	DD	imagerel $LN6+487
	DD	imagerel $unwind$?AuPrepareSignal@@YAXPEAU_au_thread_@@PEAUinterrupt_stack_frame@@PEAU_signal_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSendSignal@@YAXGH@Z DD imagerel $LN8
	DD	imagerel $LN8+165
	DD	imagerel $unwind$?AuSendSignal@@YAXGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+147
	DD	imagerel $unwind$?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuSignalDebug DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$AuSignalDebug
pdata	ENDS
;	COMDAT ??_C@_0BK@GCFKEINK@signal?5ret?5stack?5?9?$DO?5?$CFx?5?$AN?6@
CONST	SEGMENT
??_C@_0BK@GCFKEINK@signal?5ret?5stack?5?9?$DO?5?$CFx?5?$AN?6@ DB 'signal '
	DB	'ret stack -> %x ', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuSignalDebug DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuSendSignal@@YAXGH@Z DD 025031301H
	DD	0d20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPrepareSignal@@YAXPEAU_au_thread_@@PEAUinterrupt_stack_frame@@PEAU_signal_@@@Z DD 025041c01H
	DD	0117231cH
	DD	050100012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuCheckSignal@@YA_NPEAU_au_thread_@@PEAUinterrupt_stack_frame@@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z DD 025031301H
	DD	0d20e2313H
	DD	0500aH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_signal.cpp
;	COMDAT AuSignalDebug
_TEXT	SEGMENT
rcx$ = 80
AuSignalDebug PROC					; COMDAT

; 186  : extern "C" void AuSignalDebug(uint64_t rcx) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__EEB9E740_x86_64_signal@cpp
	call	__CheckForDebuggerJustMyCode

; 187  : 	if (_signal_debug) {

	movzx	eax, BYTE PTR _signal_debug
	test	eax, eax
	je	SHORT $LN2@AuSignalDe

; 188  : 		SeTextOut("signal ret stack -> %x \r\n", rcx);

	mov	rdx, QWORD PTR rcx$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BK@GCFKEINK@signal?5ret?5stack?5?9?$DO?5?$CFx?5?$AN?6@
	call	SeTextOut
$LN2@AuSignalDe:

; 189  : 	}
; 190  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuSignalDebug ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_signal.cpp
;	COMDAT ?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z
_TEXT	SEGMENT
sig$1 = 0
thr$ = 96
?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z PROC		; AuSignalRemoveAll, COMDAT

; 171  : void AuSignalRemoveAll(AuThread* thr) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__EEB9E740_x86_64_signal@cpp
	call	__CheckForDebuggerJustMyCode

; 172  : 	if (thr->pendingSigCount < 0)

	mov	rax, QWORD PTR thr$[rbp]
	movzx	eax, BYTE PTR [rax+632]
	test	eax, eax
	jge	SHORT $LN4@AuSignalRe

; 173  : 		return;

	jmp	SHORT $LN1@AuSignalRe
$LN4@AuSignalRe:
$LN2@AuSignalRe:

; 174  : 
; 175  : 	while (thr->pendingSigCount) {

	mov	rax, QWORD PTR thr$[rbp]
	movzx	eax, BYTE PTR [rax+632]
	test	eax, eax
	je	SHORT $LN3@AuSignalRe

; 176  : 		Signal * sig = AuGetSignal(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z ; AuGetSignal
	mov	QWORD PTR sig$1[rbp], rax

; 177  : 		if (!sig)

	cmp	QWORD PTR sig$1[rbp], 0
	jne	SHORT $LN5@AuSignalRe

; 178  : 			break;  //there might be bug in pendingSigCount

	jmp	SHORT $LN3@AuSignalRe
$LN5@AuSignalRe:

; 179  : 		kfree(sig->signalStack);

	mov	rax, QWORD PTR sig$1[rbp]
	mov	rcx, QWORD PTR [rax+4]
	call	kfree

; 180  : 		kfree(sig->signalState);

	mov	rax, QWORD PTR sig$1[rbp]
	mov	rcx, QWORD PTR [rax+12]
	call	kfree

; 181  : 		kfree(sig);

	mov	rcx, QWORD PTR sig$1[rbp]
	call	kfree

; 182  : 		thr->pendingSigCount--;

	mov	rax, QWORD PTR thr$[rbp]
	movzx	eax, BYTE PTR [rax+632]
	dec	al
	mov	rcx, QWORD PTR thr$[rbp]
	mov	BYTE PTR [rcx+632], al

; 183  : 	}

	jmp	SHORT $LN2@AuSignalRe
$LN3@AuSignalRe:
$LN1@AuSignalRe:

; 184  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuSignalRemoveAll@@YAXPEAU_au_thread_@@@Z ENDP		; AuSignalRemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_signal.cpp
;	COMDAT ?AuSendSignal@@YAXGH@Z
_TEXT	SEGMENT
thr$ = 0
blocked$ = 8
tid$ = 96
signo$ = 104
?AuSendSignal@@YAXGH@Z PROC				; AuSendSignal, COMDAT

; 141  : void AuSendSignal(uint16_t tid, int signo) {

$LN8:
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__EEB9E740_x86_64_signal@cpp
	call	__CheckForDebuggerJustMyCode

; 142  : 	AuThread* thr = AuThreadFindByID(tid);

	movzx	ecx, WORD PTR tid$[rbp]
	call	AuThreadFindByID
	mov	QWORD PTR thr$[rbp], rax

; 143  : 	bool blocked = false;

	mov	BYTE PTR blocked$[rbp], 0

; 144  : 	if (!thr){

	cmp	QWORD PTR thr$[rbp], 0
	jne	SHORT $LN2@AuSendSign

; 145  : 		thr = AuThreadFindByIDBlockList(tid);

	movzx	ecx, WORD PTR tid$[rbp]
	call	AuThreadFindByIDBlockList
	mov	QWORD PTR thr$[rbp], rax

; 146  : 		if (thr)

	cmp	QWORD PTR thr$[rbp], 0
	je	SHORT $LN3@AuSendSign

; 147  : 			blocked = true;

	mov	BYTE PTR blocked$[rbp], 1
$LN3@AuSendSign:
$LN2@AuSendSign:

; 148  : 	}
; 149  : 		
; 150  : 	if (!thr)

	cmp	QWORD PTR thr$[rbp], 0
	jne	SHORT $LN4@AuSendSign

; 151  : 		return;

	jmp	SHORT $LN1@AuSendSign
$LN4@AuSendSign:

; 152  : 
; 153  : 	AuAllocateSignal(thr, signo);

	mov	edx, DWORD PTR signo$[rbp]
	mov	rcx, QWORD PTR thr$[rbp]
	call	?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z ; AuAllocateSignal

; 154  : 
; 155  : 	/* unblock the thread for signal handling */
; 156  : 	if (blocked) {

	movzx	eax, BYTE PTR blocked$[rbp]
	test	eax, eax
	je	SHORT $LN5@AuSendSign

; 157  : 		AuUnblockThread(thr);

	mov	rcx, QWORD PTR thr$[rbp]
	call	AuUnblockThread
$LN5@AuSendSign:

; 158  : 	}
; 159  : 
; 160  : 	if (thr->state == THREAD_STATE_SLEEP) {

	mov	rax, QWORD PTR thr$[rbp]
	movzx	eax, BYTE PTR [rax+300]
	cmp	eax, 4
	jne	SHORT $LN6@AuSendSign

; 161  : 		thr->quanta = 0;

	mov	rax, QWORD PTR thr$[rbp]
	mov	QWORD PTR [rax+303], 0

; 162  : 		thr->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR thr$[rbp]
	mov	BYTE PTR [rax+300], 1
$LN6@AuSendSign:
$LN1@AuSendSign:

; 163  : 	}
; 164  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuSendSignal@@YAXGH@Z ENDP				; AuSendSignal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_signal.cpp
;	COMDAT ?AuPrepareSignal@@YAXPEAU_au_thread_@@PEAUinterrupt_stack_frame@@PEAU_signal_@@@Z
_TEXT	SEGMENT
ctx$ = 0
rsp_val$ = 8
rsp_$ = 16
i$1 = 24
tv85 = 96
thr$ = 128
frame$ = 136
signal$ = 144
?AuPrepareSignal@@YAXPEAU_au_thread_@@PEAUinterrupt_stack_frame@@PEAU_signal_@@@Z PROC ; AuPrepareSignal, COMDAT

; 109  : void AuPrepareSignal(AuThread* thr, interrupt_stack_frame* frame, Signal* signal) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__EEB9E740_x86_64_signal@cpp
	call	__CheckForDebuggerJustMyCode

; 110  : 	x86_64_cpu_regs_t* ctx = (x86_64_cpu_regs_t*)(thr->frame.kern_esp - sizeof(x86_64_cpu_regs_t));

	mov	rax, QWORD PTR thr$[rbp]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, 160				; 000000a0H
	mov	QWORD PTR ctx$[rbp], rax

; 111  : 	memcpy(signal->signalStack, ctx, sizeof(x86_64_cpu_regs_t));

	mov	r8d, 160				; 000000a0H
	mov	rdx, QWORD PTR ctx$[rbp]
	mov	rax, QWORD PTR signal$[rbp]
	mov	rcx, QWORD PTR [rax+4]
	call	memcpy

; 112  : 	memcpy(signal->signalState, &thr->frame, sizeof(AuThreadFrame));

	mov	rax, QWORD PTR thr$[rbp]
	mov	r8d, 216				; 000000d8H
	mov	rdx, rax
	mov	rax, QWORD PTR signal$[rbp]
	mov	rcx, QWORD PTR [rax+12]
	call	memcpy

; 113  : 	uint64_t rsp_val = (uint64_t)frame->rsp;

	mov	rax, QWORD PTR frame$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR rsp_val$[rbp], rax

; 114  : 	rsp_val -= 8;

	mov	rax, QWORD PTR rsp_val$[rbp]
	sub	rax, 8
	mov	QWORD PTR rsp_val$[rbp], rax

; 115  : 	rsp_val &= 0xFFFFFFFFFFFFFFF0;

	mov	rax, QWORD PTR rsp_val$[rbp]
	and	rax, -16
	mov	QWORD PTR rsp_val$[rbp], rax

; 116  : 	uint64_t* rsp_ = (uint64_t*)rsp_val;

	mov	rax, QWORD PTR rsp_val$[rbp]
	mov	QWORD PTR rsp_$[rbp], rax

; 117  : 	for (int i = 0; i < 2; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuPrepareS
$LN2@AuPrepareS:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuPrepareS:
	cmp	DWORD PTR i$1[rbp], 2
	jge	SHORT $LN3@AuPrepareS

; 118  : 		AuMapPage((uint64_t)AuPmmngrAlloc(), 0x700000 + i * 4096, X86_64_PAGING_USER);

	imul	eax, DWORD PTR i$1[rbp], 4096		; 00001000H
	add	eax, 7340032				; 00700000H
	cdqe
	mov	QWORD PTR tv85[rbp], rax
	call	AuPmmngrAlloc
	mov	r8b, 4
	mov	rcx, QWORD PTR tv85[rbp]
	mov	rdx, rcx
	mov	rcx, rax
	call	AuMapPage
	jmp	SHORT $LN2@AuPrepareS
$LN3@AuPrepareS:

; 119  : 	memcpy((void*)0x700000, &SigRet, 8192);

	mov	r8d, 8192				; 00002000H
	lea	rdx, OFFSET FLAT:SigRet
	mov	ecx, 7340032				; 00700000H
	call	memcpy

; 120  : 	*rsp_ = 0x700000;

	mov	rax, QWORD PTR rsp_$[rbp]
	mov	QWORD PTR [rax], 7340032		; 00700000H

; 121  : 
; 122  : 	thr->frame.rbp = (uint64_t)rsp_;

	mov	rax, QWORD PTR thr$[rbp]
	mov	rcx, QWORD PTR rsp_$[rbp]
	mov	QWORD PTR [rax+88], rcx

; 123  : 	thr->frame.rcx = signal->signum;

	mov	rax, QWORD PTR signal$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR thr$[rbp]
	mov	QWORD PTR [rcx+56], rax

; 124  : 	thr->frame.rip = (uint64_t)thr->singals[signal->signum];

	mov	rax, QWORD PTR signal$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR thr$[rbp]
	mov	rdx, QWORD PTR thr$[rbp]
	mov	rax, QWORD PTR [rdx+rax*8+312]
	mov	QWORD PTR [rcx+32], rax

; 125  : 	thr->frame.rsp = (uint64_t)frame->rsp;

	mov	rax, QWORD PTR thr$[rbp]
	mov	rcx, QWORD PTR frame$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+8], rcx

; 126  : 	thr->frame.rflags = 0x286;

	mov	rax, QWORD PTR thr$[rbp]
	mov	QWORD PTR [rax+16], 646			; 00000286H

; 127  : 	
; 128  : 	frame->rsp = (uint64_t)rsp_;

	mov	rax, QWORD PTR frame$[rbp]
	mov	rcx, QWORD PTR rsp_$[rbp]
	mov	QWORD PTR [rax+40], rcx

; 129  : 	frame->rip = thr->frame.rip;

	mov	rax, QWORD PTR frame$[rbp]
	mov	rcx, QWORD PTR thr$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+16], rcx

; 130  : 	frame->rflags = 0x286;

	mov	rax, QWORD PTR frame$[rbp]
	mov	QWORD PTR [rax+32], 646			; 00000286H

; 131  : 	frame->cs = SEGVAL(GDT_ENTRY_USER_CODE, 3);

	mov	rax, QWORD PTR frame$[rbp]
	mov	QWORD PTR [rax+24], 43			; 0000002bH

; 132  : 	frame->ss = SEGVAL(GDT_ENTRY_USER_DATA, 3);

	mov	rax, QWORD PTR frame$[rbp]
	mov	QWORD PTR [rax+48], 35			; 00000023H

; 133  : 	thr->returnableSignal = signal;

	mov	rax, QWORD PTR thr$[rbp]
	mov	rcx, QWORD PTR signal$[rbp]
	mov	QWORD PTR [rax+633], rcx

; 134  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?AuPrepareSignal@@YAXPEAU_au_thread_@@PEAUinterrupt_stack_frame@@PEAU_signal_@@@Z ENDP ; AuPrepareSignal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_signal.cpp
;	COMDAT ?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z
_TEXT	SEGMENT
sig$ = 0
temp$ = 8
curr_thr$ = 96
?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z PROC	; AuGetSignal, COMDAT

; 85   : Signal *AuGetSignal(AuThread* curr_thr) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__EEB9E740_x86_64_signal@cpp
	call	__CheckForDebuggerJustMyCode

; 86   : 	if (!curr_thr->signalQueue)

	mov	rax, QWORD PTR curr_thr$[rbp]
	cmp	QWORD PTR [rax+624], 0
	jne	SHORT $LN2@AuGetSigna

; 87   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@AuGetSigna
$LN2@AuGetSigna:

; 88   : 	Signal* sig;
; 89   : 	SignalQueue* temp;
; 90   : 	temp = curr_thr->signalQueue;

	mov	rax, QWORD PTR curr_thr$[rbp]
	mov	rax, QWORD PTR [rax+624]
	mov	QWORD PTR temp$[rbp], rax

; 91   : 	curr_thr->signalQueue = curr_thr->signalQueue->link;

	mov	rax, QWORD PTR curr_thr$[rbp]
	mov	rax, QWORD PTR [rax+624]
	mov	rcx, QWORD PTR curr_thr$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx+624], rax

; 92   : 	temp->link = NULL;

	mov	rax, QWORD PTR temp$[rbp]
	mov	QWORD PTR [rax+8], 0

; 93   : 	sig = (Signal*)temp->Signal;

	mov	rax, QWORD PTR temp$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR sig$[rbp], rax

; 94   : 	kfree(temp);

	mov	rcx, QWORD PTR temp$[rbp]
	call	kfree

; 95   : 	curr_thr->pendingSigCount--;

	mov	rax, QWORD PTR curr_thr$[rbp]
	movzx	eax, BYTE PTR [rax+632]
	dec	al
	mov	rcx, QWORD PTR curr_thr$[rbp]
	mov	BYTE PTR [rcx+632], al

; 96   : 
; 97   : 	curr_thr->returnableSignal = sig;

	mov	rax, QWORD PTR curr_thr$[rbp]
	mov	rcx, QWORD PTR sig$[rbp]
	mov	QWORD PTR [rax+633], rcx

; 98   : 	if (!sig)

	cmp	QWORD PTR sig$[rbp], 0
	jne	SHORT $LN3@AuGetSigna

; 99   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@AuGetSigna
$LN3@AuGetSigna:

; 100  : 	return sig;

	mov	rax, QWORD PTR sig$[rbp]
$LN1@AuGetSigna:

; 101  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuGetSignal@@YAPEAU_signal_@@PEAU_au_thread_@@@Z ENDP	; AuGetSignal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_signal.cpp
;	COMDAT ?AuCheckSignal@@YA_NPEAU_au_thread_@@PEAUinterrupt_stack_frame@@@Z
_TEXT	SEGMENT
curr_thr$ = 80
frame$ = 88
?AuCheckSignal@@YA_NPEAU_au_thread_@@PEAUinterrupt_stack_frame@@@Z PROC ; AuCheckSignal, COMDAT

; 72   : bool AuCheckSignal(AuThread* curr_thr, interrupt_stack_frame *frame) {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__EEB9E740_x86_64_signal@cpp
	call	__CheckForDebuggerJustMyCode

; 73   : 	if (!curr_thr->signalQueue)

	mov	rax, QWORD PTR curr_thr$[rbp]
	cmp	QWORD PTR [rax+624], 0
	jne	SHORT $LN2@AuCheckSig

; 74   : 		return false;

	xor	al, al
	jmp	SHORT $LN1@AuCheckSig
$LN2@AuCheckSig:

; 75   : 	if (curr_thr->pendingSigCount > 0 && frame->cs == SEGVAL(GDT_ENTRY_USER_CODE,3))

	mov	rax, QWORD PTR curr_thr$[rbp]
	movzx	eax, BYTE PTR [rax+632]
	test	eax, eax
	jle	SHORT $LN3@AuCheckSig
	mov	rax, QWORD PTR frame$[rbp]
	cmp	QWORD PTR [rax+24], 43			; 0000002bH
	jne	SHORT $LN3@AuCheckSig

; 76   : 		return true;

	mov	al, 1
	jmp	SHORT $LN1@AuCheckSig
$LN3@AuCheckSig:

; 77   : 	return false;

	xor	al, al
$LN1@AuCheckSig:

; 78   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuCheckSignal@@YA_NPEAU_au_thread_@@PEAUinterrupt_stack_frame@@@Z ENDP ; AuCheckSignal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\x86_64_signal.cpp
;	COMDAT ?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z
_TEXT	SEGMENT
signal$ = 0
queue$ = 8
dest_thread$ = 96
signum$ = 104
?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z PROC		; AuAllocateSignal, COMDAT

; 49   : void AuAllocateSignal(AuThread* dest_thread, int signum) {

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__EEB9E740_x86_64_signal@cpp
	call	__CheckForDebuggerJustMyCode

; 50   : 	if (dest_thread->signalQueue)

	mov	rax, QWORD PTR dest_thread$[rbp]
	cmp	QWORD PTR [rax+624], 0
	je	SHORT $LN2@AuAllocate

; 51   : 		return;

	jmp	$LN1@AuAllocate
$LN2@AuAllocate:

; 52   : 	Signal *signal = (Signal*)kmalloc(sizeof(Signal));

	mov	ecx, 22
	call	kmalloc
	mov	QWORD PTR signal$[rbp], rax

; 53   : 	memset(signal, 0, sizeof(Signal));

	mov	r8d, 22
	xor	edx, edx
	mov	rcx, QWORD PTR signal$[rbp]
	call	memset

; 54   : 	signal->signum = signum;

	mov	rax, QWORD PTR signal$[rbp]
	mov	ecx, DWORD PTR signum$[rbp]
	mov	DWORD PTR [rax], ecx

; 55   : 	signal->signalStack = (x86_64_cpu_regs_t*)kmalloc(sizeof(x86_64_cpu_regs_t));

	mov	ecx, 160				; 000000a0H
	call	kmalloc
	mov	rcx, QWORD PTR signal$[rbp]
	mov	QWORD PTR [rcx+4], rax

; 56   : 	signal->signalState = (AuThreadFrame*)kmalloc(sizeof(AuThreadFrame));

	mov	ecx, 216				; 000000d8H
	call	kmalloc
	mov	rcx, QWORD PTR signal$[rbp]
	mov	QWORD PTR [rcx+12], rax

; 57   : 	SignalQueue* queue = (SignalQueue*)kmalloc(sizeof(SignalQueue));

	mov	ecx, 16
	call	kmalloc
	mov	QWORD PTR queue$[rbp], rax

; 58   : 	memset(queue, 0, sizeof(SignalQueue));

	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR queue$[rbp]
	call	memset

; 59   : 	queue->Signal = signal;

	mov	rax, QWORD PTR queue$[rbp]
	mov	rcx, QWORD PTR signal$[rbp]
	mov	QWORD PTR [rax], rcx

; 60   : 	queue->link = dest_thread->signalQueue;

	mov	rax, QWORD PTR queue$[rbp]
	mov	rcx, QWORD PTR dest_thread$[rbp]
	mov	rcx, QWORD PTR [rcx+624]
	mov	QWORD PTR [rax+8], rcx

; 61   : 	dest_thread->signalQueue = queue;

	mov	rax, QWORD PTR dest_thread$[rbp]
	mov	rcx, QWORD PTR queue$[rbp]
	mov	QWORD PTR [rax+624], rcx

; 62   : 	dest_thread->pendingSigCount += 1;

	mov	rax, QWORD PTR dest_thread$[rbp]
	movzx	eax, BYTE PTR [rax+632]
	inc	eax
	mov	rcx, QWORD PTR dest_thread$[rbp]
	mov	BYTE PTR [rcx+632], al

; 63   : 	signal->threadState = dest_thread->state;

	mov	rax, QWORD PTR signal$[rbp]
	mov	rcx, QWORD PTR dest_thread$[rbp]
	movzx	ecx, BYTE PTR [rcx+300]
	mov	BYTE PTR [rax+20], cl
$LN1@AuAllocate:

; 64   : 
; 65   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuAllocateSignal@@YAXPEAU_au_thread_@@H@Z ENDP		; AuAllocateSignal
_TEXT	ENDS
END
