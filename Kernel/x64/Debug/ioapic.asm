; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_IOAPICBase@@3PEAXEA				; _IOAPICBase
_BSS	SEGMENT
?_IOAPICBase@@3PEAXEA DQ 01H DUP (?)			; _IOAPICBase
_BSS	ENDS
msvcjmc	SEGMENT
__ED31D294_ioapic@cpp DB 01H
__303BDA61_stdint@h DB 01H
msvcjmc	ENDS
PUBLIC	?IOAPICInitialise@@YAXPEAX@Z			; IOAPICInitialise
PUBLIC	?IOAPICMaskIRQ@@YAXE_N@Z			; IOAPICMaskIRQ
PUBLIC	?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z	; IOAPICRegisterIRQ
PUBLIC	?IOAPICRedirect@@YAXEIGE@Z			; IOAPICRedirect
PUBLIC	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z		; raw_offset<unsigned int volatile *,void *>
PUBLIC	__JustMyCode_Default
EXTRN	AuMapMMIO:PROC
EXTRN	setvect:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IOAPICInitialise@@YAXPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$?IOAPICInitialise@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IOAPICMaskIRQ@@YAXE_N@Z DD imagerel $LN5
	DD	imagerel $LN5+123
	DD	imagerel $unwind$?IOAPICMaskIRQ@@YAXE_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z DD imagerel $LN5
	DD	imagerel $LN5+220
	DD	imagerel $unwind$?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IOAPICRedirect@@YAXEIGE@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?IOAPICRedirect@@YAXEIGE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ReadIOAPICRegister@@YAIE@Z DD imagerel ?ReadIOAPICRegister@@YAIE@Z
	DD	imagerel ?ReadIOAPICRegister@@YAIE@Z+80
	DD	imagerel $unwind$?ReadIOAPICRegister@@YAIE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WriteIOAPICRegister@@YAXEI@Z DD imagerel ?WriteIOAPICRegister@@YAXEI@Z
	DD	imagerel ?WriteIOAPICRegister@@YAXEI@Z+87
	DD	imagerel $unwind$?WriteIOAPICRegister@@YAXEI@Z
pdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	046H
	DB	04fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WriteIOAPICRegister@@YAXEI@Z DD 025031201H
	DD	0d20d2312H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	042H
	DB	048H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReadIOAPICRegister@@YAIE@Z DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IOAPICRedirect@@YAXEIGE@Z DD 025032001H
	DD	0f21b2320H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z DD 025031e01H
	DD	0d219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IOAPICMaskIRQ@@YAXE_N@Z DD 025031201H
	DD	0d20d2312H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IOAPICInitialise@@YAXPEAX@Z DD 025031201H
	DD	0f20d2312H
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\ioapic.cpp
;	COMDAT ?WriteIOAPICRegister@@YAXEI@Z
_TEXT	SEGMENT
ioregsel$ = 0
ioregwin$ = 8
offset$ = 96
val$ = 104
?WriteIOAPICRegister@@YAXEI@Z PROC			; WriteIOAPICRegister, COMDAT

; 53   : static void WriteIOAPICRegister(const uint8_t offset, const uint32_t val) {

	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ED31D294_ioapic@cpp
	call	__CheckForDebuggerJustMyCode

; 54   : 	volatile uint32_t* ioregsel = reinterpret_cast<volatile uint32_t*>(_IOAPICBase);

	mov	rax, QWORD PTR ?_IOAPICBase@@3PEAXEA	; _IOAPICBase
	mov	QWORD PTR ioregsel$[rbp], rax

; 55   : 	volatile uint32_t* ioregwin = raw_offset<volatile uint32_t*>(_IOAPICBase, 0x10);

	mov	edx, 16
	mov	rcx, QWORD PTR ?_IOAPICBase@@3PEAXEA	; _IOAPICBase
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR ioregwin$[rbp], rax

; 56   : 	*ioregsel = offset;

	movzx	eax, BYTE PTR offset$[rbp]
	mov	rcx, QWORD PTR ioregsel$[rbp]
	mov	DWORD PTR [rcx], eax

; 57   : 	*ioregwin = val;

	mov	rax, QWORD PTR ioregwin$[rbp]
	mov	ecx, DWORD PTR val$[rbp]
	mov	DWORD PTR [rax], ecx

; 58   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?WriteIOAPICRegister@@YAXEI@Z ENDP			; WriteIOAPICRegister
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z PROC		; raw_offset<unsigned int volatile *,void *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z ENDP		; raw_offset<unsigned int volatile *,void *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\ioapic.cpp
;	COMDAT ?ReadIOAPICRegister@@YAIE@Z
_TEXT	SEGMENT
ioregsel$ = 0
ioregwin$ = 8
offset$ = 96
?ReadIOAPICRegister@@YAIE@Z PROC			; ReadIOAPICRegister, COMDAT

; 41   : static uint32_t ReadIOAPICRegister(const uint8_t offset) {

	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ED31D294_ioapic@cpp
	call	__CheckForDebuggerJustMyCode

; 42   : 	volatile uint32_t* ioregsel = reinterpret_cast<volatile uint32_t*>(_IOAPICBase);

	mov	rax, QWORD PTR ?_IOAPICBase@@3PEAXEA	; _IOAPICBase
	mov	QWORD PTR ioregsel$[rbp], rax

; 43   : 	volatile uint32_t* ioregwin = raw_offset<volatile uint32_t*>(_IOAPICBase, 0x10);

	mov	edx, 16
	mov	rcx, QWORD PTR ?_IOAPICBase@@3PEAXEA	; _IOAPICBase
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile *,void *>
	mov	QWORD PTR ioregwin$[rbp], rax

; 44   : 	*ioregsel = offset;

	movzx	eax, BYTE PTR offset$[rbp]
	mov	rcx, QWORD PTR ioregsel$[rbp]
	mov	DWORD PTR [rcx], eax

; 45   : 	return *ioregwin;

	mov	rax, QWORD PTR ioregwin$[rbp]
	mov	eax, DWORD PTR [rax]

; 46   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ReadIOAPICRegister@@YAIE@Z ENDP			; ReadIOAPICRegister
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\ioapic.cpp
;	COMDAT ?IOAPICRedirect@@YAXEIGE@Z
_TEXT	SEGMENT
ioapic_base$ = 0
redirection$ = 8
ioredtbl$ = 16
irq$ = 112
gsi$ = 120
flags$ = 128
apic$ = 136
?IOAPICRedirect@@YAXEIGE@Z PROC				; IOAPICRedirect, COMDAT

; 90   : void IOAPICRedirect(uint8_t irq, uint32_t gsi, uint16_t flags, uint8_t apic) {

$LN5:
	mov	BYTE PTR [rsp+32], r9b
	mov	WORD PTR [rsp+24], r8w
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ED31D294_ioapic@cpp
	call	__CheckForDebuggerJustMyCode

; 91   : 	uint32_t ioapic_base = 0xfec00000;

	mov	DWORD PTR ioapic_base$[rbp], -20971520	; fec00000H

; 92   : 	uint64_t redirection = irq + 32;

	movzx	eax, BYTE PTR irq$[rbp]
	add	eax, 32					; 00000020H
	cdqe
	mov	QWORD PTR redirection$[rbp], rax

; 93   : 
; 94   : 	if (flags & 2)

	movzx	eax, WORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN2@IOAPICRedi

; 95   : 		redirection |= 1 << 13;

	mov	rax, QWORD PTR redirection$[rbp]
	bts	rax, 13
	mov	QWORD PTR redirection$[rbp], rax
$LN2@IOAPICRedi:

; 96   : 	
; 97   : 	if (flags & 8)

	movzx	eax, WORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN3@IOAPICRedi

; 98   : 		redirection |= 1 << 15;

	mov	rax, QWORD PTR redirection$[rbp]
	bts	rax, 15
	mov	QWORD PTR redirection$[rbp], rax
$LN3@IOAPICRedi:

; 99   : 
; 100  : 	redirection |= ((uint64_t)apic) << 56;

	movzx	eax, BYTE PTR apic$[rbp]
	shl	rax, 56					; 00000038H
	mov	rcx, QWORD PTR redirection$[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR redirection$[rbp], rax

; 101  : 
; 102  : 	uint32_t ioredtbl = (gsi - 0) * 2 + 16;

	mov	eax, DWORD PTR gsi$[rbp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR ioredtbl$[rbp], eax

; 103  : 
; 104  : 	WriteIOAPICRegister(ioredtbl + 0, (uint32_t)redirection);

	mov	edx, DWORD PTR redirection$[rbp]
	movzx	ecx, BYTE PTR ioredtbl$[rbp]
	call	?WriteIOAPICRegister@@YAXEI@Z		; WriteIOAPICRegister

; 105  : 	WriteIOAPICRegister(ioredtbl + 1, (uint32_t)(redirection >> 32));

	mov	rax, QWORD PTR redirection$[rbp]
	shr	rax, 32					; 00000020H
	mov	ecx, DWORD PTR ioredtbl$[rbp]
	inc	ecx
	mov	edx, eax
	call	?WriteIOAPICRegister@@YAXEI@Z		; WriteIOAPICRegister

; 106  : 
; 107  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?IOAPICRedirect@@YAXEIGE@Z ENDP				; IOAPICRedirect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\ioapic.cpp
;	COMDAT ?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z
_TEXT	SEGMENT
reg$ = 0
high_reg$ = 4
low$ = 8
vector$ = 96
fn$ = 104
irq$ = 112
level$ = 120
?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z PROC		; IOAPICRegisterIRQ, COMDAT

; 67   : void IOAPICRegisterIRQ(size_t vector, void(*fn)(size_t, void*), uint8_t irq, bool level) {

$LN5:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ED31D294_ioapic@cpp
	call	__CheckForDebuggerJustMyCode

; 68   : 	uint32_t reg = IOAPIC_REG_RED_TBL_BASE + irq * 2;

	movzx	eax, BYTE PTR irq$[rbp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$[rbp], eax

; 69   : 	uint32_t high_reg = ReadIOAPICRegister(reg + 1);

	mov	eax, DWORD PTR reg$[rbp]
	inc	eax
	movzx	ecx, al
	call	?ReadIOAPICRegister@@YAIE@Z		; ReadIOAPICRegister
	mov	DWORD PTR high_reg$[rbp], eax

; 70   : 	high_reg &= ~0xff000000;

	mov	eax, DWORD PTR high_reg$[rbp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR high_reg$[rbp], eax

; 71   : 	high_reg |= (0 << 24);

	mov	eax, DWORD PTR high_reg$[rbp]
	mov	DWORD PTR high_reg$[rbp], eax

; 72   : 	WriteIOAPICRegister(reg + 1, high_reg);

	mov	eax, DWORD PTR reg$[rbp]
	inc	eax
	mov	edx, DWORD PTR high_reg$[rbp]
	movzx	ecx, al
	call	?WriteIOAPICRegister@@YAXEI@Z		; WriteIOAPICRegister

; 73   : 	uint32_t low = ReadIOAPICRegister(reg);

	movzx	ecx, BYTE PTR reg$[rbp]
	call	?ReadIOAPICRegister@@YAIE@Z		; ReadIOAPICRegister
	mov	DWORD PTR low$[rbp], eax

; 74   : 
; 75   : 	low &= ~(1 << 16);

	mov	eax, DWORD PTR low$[rbp]
	btr	eax, 16
	mov	DWORD PTR low$[rbp], eax

; 76   : 
; 77   : 	if (level)

	movzx	eax, BYTE PTR level$[rbp]
	test	eax, eax
	je	SHORT $LN2@IOAPICRegi

; 78   : 		low |= (1 << 15);

	mov	eax, DWORD PTR low$[rbp]
	bts	eax, 15
	mov	DWORD PTR low$[rbp], eax
	jmp	SHORT $LN3@IOAPICRegi
$LN2@IOAPICRegi:

; 79   : 	else
; 80   : 		low |= (0 << 15);

	mov	eax, DWORD PTR low$[rbp]
	mov	DWORD PTR low$[rbp], eax
$LN3@IOAPICRegi:

; 81   : 	
; 82   : 	low |= (0 << 13);

	mov	eax, DWORD PTR low$[rbp]
	mov	DWORD PTR low$[rbp], eax

; 83   : 	low |= (0 << 11);

	mov	eax, DWORD PTR low$[rbp]
	mov	DWORD PTR low$[rbp], eax

; 84   : 	low |= vector + 32;

	mov	rax, QWORD PTR vector$[rbp]
	add	rax, 32					; 00000020H
	mov	ecx, DWORD PTR low$[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR low$[rbp], eax

; 85   : 	WriteIOAPICRegister(reg, low);

	mov	edx, DWORD PTR low$[rbp]
	movzx	ecx, BYTE PTR reg$[rbp]
	call	?WriteIOAPICRegister@@YAXEI@Z		; WriteIOAPICRegister

; 86   : 	setvect(vector + 32, fn);

	mov	rax, QWORD PTR vector$[rbp]
	add	rax, 32					; 00000020H
	mov	rdx, QWORD PTR fn$[rbp]
	mov	rcx, rax
	call	setvect

; 87   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?IOAPICRegisterIRQ@@YAX_KP6AX0PEAX@ZE_N@Z ENDP		; IOAPICRegisterIRQ
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\ioapic.cpp
;	COMDAT ?IOAPICMaskIRQ@@YAXE_N@Z
_TEXT	SEGMENT
reg$ = 0
low$ = 4
irq$ = 96
value$ = 104
?IOAPICMaskIRQ@@YAXE_N@Z PROC				; IOAPICMaskIRQ, COMDAT

; 115  : void IOAPICMaskIRQ(uint8_t irq, bool value) {

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ED31D294_ioapic@cpp
	call	__CheckForDebuggerJustMyCode

; 116  : 	uint32_t reg = IOAPIC_REG_RED_TBL_BASE + irq * 2;

	movzx	eax, BYTE PTR irq$[rbp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$[rbp], eax

; 117  : 	WriteIOAPICRegister(reg + 1, ReadIOAPICRegister(0x02) << 24);

	mov	cl, 2
	call	?ReadIOAPICRegister@@YAIE@Z		; ReadIOAPICRegister
	shl	eax, 24
	mov	ecx, DWORD PTR reg$[rbp]
	inc	ecx
	mov	edx, eax
	call	?WriteIOAPICRegister@@YAXEI@Z		; WriteIOAPICRegister

; 118  : 	uint32_t low = ReadIOAPICRegister(reg);

	movzx	ecx, BYTE PTR reg$[rbp]
	call	?ReadIOAPICRegister@@YAIE@Z		; ReadIOAPICRegister
	mov	DWORD PTR low$[rbp], eax

; 119  : 
; 120  : 	if (value)

	movzx	eax, BYTE PTR value$[rbp]
	test	eax, eax
	je	SHORT $LN2@IOAPICMask

; 121  : 		low |= (1 << 16);

	mov	eax, DWORD PTR low$[rbp]
	bts	eax, 16
	mov	DWORD PTR low$[rbp], eax
	jmp	SHORT $LN3@IOAPICMask
$LN2@IOAPICMask:

; 122  : 	else
; 123  : 		low &= ~(1 << 16);

	mov	eax, DWORD PTR low$[rbp]
	btr	eax, 16
	mov	DWORD PTR low$[rbp], eax
$LN3@IOAPICMask:

; 124  : 
; 125  : 	WriteIOAPICRegister(reg, low);

	mov	edx, DWORD PTR low$[rbp]
	movzx	ecx, BYTE PTR reg$[rbp]
	call	?WriteIOAPICRegister@@YAXEI@Z		; WriteIOAPICRegister

; 126  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?IOAPICMaskIRQ@@YAXE_N@Z ENDP				; IOAPICMaskIRQ
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\ioapic.cpp
;	COMDAT ?IOAPICInitialise@@YAXPEAX@Z
_TEXT	SEGMENT
ioapic_phys$ = 0
ver$ = 8
intr_num$ = 12
n$1 = 16
reg$2 = 24
val$3 = 28
address$ = 112
?IOAPICInitialise@@YAXPEAX@Z PROC			; IOAPICInitialise, COMDAT

; 132  : void IOAPICInitialise(void* address) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__ED31D294_ioapic@cpp
	call	__CheckForDebuggerJustMyCode

; 133  : 	uint64_t ioapic_phys = (uint64_t)address;

	mov	rax, QWORD PTR address$[rbp]
	mov	QWORD PTR ioapic_phys$[rbp], rax

; 134  : 	_IOAPICBase = (void*)AuMapMMIO(ioapic_phys, 2);

	mov	edx, 2
	mov	rcx, QWORD PTR ioapic_phys$[rbp]
	call	AuMapMMIO
	mov	QWORD PTR ?_IOAPICBase@@3PEAXEA, rax	; _IOAPICBase

; 135  : 
; 136  : 	uint32_t ver = ReadIOAPICRegister(IOAPIC_REG_VER);

	mov	cl, 1
	call	?ReadIOAPICRegister@@YAIE@Z		; ReadIOAPICRegister
	mov	DWORD PTR ver$[rbp], eax

; 137  : 	uint32_t intr_num = (ver >> 16) & 0xff;

	mov	eax, DWORD PTR ver$[rbp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR intr_num$[rbp], eax

; 138  : 	for (size_t n = 0; n <= intr_num; ++n) {

	mov	QWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@IOAPICInit
$LN2@IOAPICInit:
	mov	rax, QWORD PTR n$1[rbp]
	inc	rax
	mov	QWORD PTR n$1[rbp], rax
$LN4@IOAPICInit:
	mov	eax, DWORD PTR intr_num$[rbp]
	cmp	QWORD PTR n$1[rbp], rax
	ja	SHORT $LN3@IOAPICInit

; 139  : 		uint32_t reg = IOAPIC_REG_RED_TBL_BASE + n * 2;

	mov	rax, QWORD PTR n$1[rbp]
	lea	rax, QWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$2[rbp], eax

; 140  : 		uint32_t val = ReadIOAPICRegister(reg);

	movzx	ecx, BYTE PTR reg$2[rbp]
	call	?ReadIOAPICRegister@@YAIE@Z		; ReadIOAPICRegister
	mov	DWORD PTR val$3[rbp], eax

; 141  : 		WriteIOAPICRegister(reg, val | (1 << 16));

	mov	eax, DWORD PTR val$3[rbp]
	bts	eax, 16
	mov	edx, eax
	movzx	ecx, BYTE PTR reg$2[rbp]
	call	?WriteIOAPICRegister@@YAXEI@Z		; WriteIOAPICRegister

; 142  : 	}

	jmp	SHORT $LN2@IOAPICInit
$LN3@IOAPICInit:

; 143  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?IOAPICInitialise@@YAXPEAX@Z ENDP			; IOAPICInitialise
_TEXT	ENDS
END
