; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?timerFirst@@3PEAU_timer_@@EA			; timerFirst
PUBLIC	?timerLast@@3PEAU_timer_@@EA			; timerLast
_BSS	SEGMENT
?timerFirst@@3PEAU_timer_@@EA DQ 01H DUP (?)		; timerFirst
?timerLast@@3PEAU_timer_@@EA DQ 01H DUP (?)		; timerLast
_BSS	ENDS
PUBLIC	?AuTimerDataInitialise@@YAXXZ			; AuTimerDataInitialise
PUBLIC	?AuTimerCreate@@YAXGHE@Z			; AuTimerCreate
PUBLIC	?AuTimerStart@@YAXG@Z				; AuTimerStart
PUBLIC	?AuTimerStop@@YAXG@Z				; AuTimerStop
PUBLIC	?AuTimerDestroy@@YAXG@Z				; AuTimerDestroy
PUBLIC	?AuTimerFire@@YAXHHH@Z				; AuTimerFire
PUBLIC	?AuTimerInsert@@YAXPEAU_timer_@@@Z		; AuTimerInsert
PUBLIC	?AuTimerDelete@@YAXPEAU_timer_@@@Z		; AuTimerDelete
PUBLIC	?AuTimerPostMessage@@YAXPEAU_timer_@@@Z		; AuTimerPostMessage
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	memset:PROC
EXTRN	?PostBoxPutEvent@@YAXPEAU_post_event_@@@Z:PROC	; PostBoxPutEvent
pdata	SEGMENT
$pdata$?AuTimerCreate@@YAXGHE@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?AuTimerCreate@@YAXGHE@Z
$pdata$?AuTimerStart@@YAXG@Z DD imagerel $LN7
	DD	imagerel $LN7+75
	DD	imagerel $unwind$?AuTimerStart@@YAXG@Z
$pdata$?AuTimerStop@@YAXG@Z DD imagerel $LN7
	DD	imagerel $LN7+75
	DD	imagerel $unwind$?AuTimerStop@@YAXG@Z
$pdata$?AuTimerDestroy@@YAXG@Z DD imagerel $LN7
	DD	imagerel $LN7+82
	DD	imagerel $unwind$?AuTimerDestroy@@YAXG@Z
$pdata$?AuTimerFire@@YAXHHH@Z DD imagerel $LN28
	DD	imagerel $LN28+472
	DD	imagerel $unwind$?AuTimerFire@@YAXHHH@Z
$pdata$?AuTimerDelete@@YAXPEAU_timer_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+146
	DD	imagerel $unwind$?AuTimerDelete@@YAXPEAU_timer_@@@Z
$pdata$?AuTimerPostMessage@@YAXPEAU_timer_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$?AuTimerPostMessage@@YAXPEAU_timer_@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuTimerCreate@@YAXGHE@Z DD 011201H
	DD	06212H
$unwind$?AuTimerStart@@YAXG@Z DD 010901H
	DD	02209H
$unwind$?AuTimerStop@@YAXG@Z DD 010901H
	DD	02209H
$unwind$?AuTimerDestroy@@YAXG@Z DD 010901H
	DD	06209H
$unwind$?AuTimerFire@@YAXHHH@Z DD 011101H
	DD	06211H
$unwind$?AuTimerDelete@@YAXPEAU_timer_@@@Z DD 010901H
	DD	04209H
$unwind$?AuTimerPostMessage@@YAXPEAU_timer_@@@Z DD 020c01H
	DD	01b010cH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
e$ = 32
t$ = 224
?AuTimerPostMessage@@YAXPEAU_timer_@@@Z PROC		; AuTimerPostMessage

; 144  : void AuTimerPostMessage(AuTimer* t) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H

; 145  : 	PostEvent e;
; 146  : 	memset(&e, 0, sizeof(PostEvent));

	mov	r8d, 169				; 000000a9H
	xor	edx, edx
	lea	rcx, QWORD PTR e$[rsp]
	call	memset

; 147  : 	e.type = TIMER_MESSAGE_CODE;

	mov	BYTE PTR e$[rsp], 8

; 148  : 	e.to_id = t->threadId;

	mov	rax, QWORD PTR t$[rsp]
	movzx	eax, WORD PTR [rax+5]
	mov	WORD PTR e$[rsp+1], ax

; 149  : 	e.dword = t->lastTick;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR e$[rsp+5], eax

; 150  : 	e.dword2 = t->tickDifference;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+7]
	mov	DWORD PTR e$[rsp+9], eax

; 151  : 	PostBoxPutEvent(&e);

	lea	rcx, QWORD PTR e$[rsp]
	call	?PostBoxPutEvent@@YAXPEAU_post_event_@@@Z ; PostBoxPutEvent

; 152  : }

	add	rsp, 216				; 000000d8H
	ret	0
?AuTimerPostMessage@@YAXPEAU_timer_@@@Z ENDP		; AuTimerPostMessage
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
timer$ = 48
?AuTimerDelete@@YAXPEAU_timer_@@@Z PROC			; AuTimerDelete

; 65   : void AuTimerDelete(AuTimer* timer) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 66   : 	if (timerFirst == NULL)

	cmp	QWORD PTR ?timerFirst@@3PEAU_timer_@@EA, 0 ; timerFirst
	jne	SHORT $LN5@AuTimerDel

; 67   : 		return;

	jmp	SHORT $LN6@AuTimerDel
$LN5@AuTimerDel:

; 68   : 
; 69   : 	if (timer == timerFirst){

	mov	rax, QWORD PTR ?timerFirst@@3PEAU_timer_@@EA ; timerFirst
	cmp	QWORD PTR timer$[rsp], rax
	jne	SHORT $LN4@AuTimerDel

; 70   : 		timerFirst = timerFirst->next;

	mov	rax, QWORD PTR ?timerFirst@@3PEAU_timer_@@EA ; timerFirst
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR ?timerFirst@@3PEAU_timer_@@EA, rax ; timerFirst

; 71   : 	}
; 72   : 	else {

	jmp	SHORT $LN3@AuTimerDel
$LN4@AuTimerDel:

; 73   : 		timer->prev->next = timer->next;

	mov	rax, QWORD PTR timer$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR timer$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
$LN3@AuTimerDel:

; 74   : 	}
; 75   : 
; 76   : 	if (timer == timerLast){

	mov	rax, QWORD PTR ?timerLast@@3PEAU_timer_@@EA ; timerLast
	cmp	QWORD PTR timer$[rsp], rax
	jne	SHORT $LN2@AuTimerDel

; 77   : 		timerLast = timer->prev;

	mov	rax, QWORD PTR timer$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR ?timerLast@@3PEAU_timer_@@EA, rax ; timerLast

; 78   : 	}
; 79   : 	else {

	jmp	SHORT $LN1@AuTimerDel
$LN2@AuTimerDel:

; 80   : 		timer->next->prev = timer->prev;

	mov	rax, QWORD PTR timer$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR timer$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx
$LN1@AuTimerDel:

; 81   : 	}
; 82   : 	kfree(timer);

	mov	rcx, QWORD PTR timer$[rsp]
	call	kfree
$LN6@AuTimerDel:

; 83   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuTimerDelete@@YAXPEAU_timer_@@@Z ENDP			; AuTimerDelete
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
timer$ = 8
?AuTimerInsert@@YAXPEAU_timer_@@@Z PROC			; AuTimerInsert

; 49   : void AuTimerInsert(AuTimer* timer) {

	mov	QWORD PTR [rsp+8], rcx

; 50   : 	timer->next = NULL;

	mov	rax, QWORD PTR timer$[rsp]
	mov	QWORD PTR [rax+16], 0

; 51   : 	timer->prev = NULL;

	mov	rax, QWORD PTR timer$[rsp]
	mov	QWORD PTR [rax+24], 0

; 52   : 
; 53   : 	if (timerFirst == NULL){

	cmp	QWORD PTR ?timerFirst@@3PEAU_timer_@@EA, 0 ; timerFirst
	jne	SHORT $LN2@AuTimerIns

; 54   : 		timerLast = timer;

	mov	rax, QWORD PTR timer$[rsp]
	mov	QWORD PTR ?timerLast@@3PEAU_timer_@@EA, rax ; timerLast

; 55   : 		timerFirst = timer;

	mov	rax, QWORD PTR timer$[rsp]
	mov	QWORD PTR ?timerFirst@@3PEAU_timer_@@EA, rax ; timerFirst

; 56   : 	}
; 57   : 	else {

	jmp	SHORT $LN1@AuTimerIns
$LN2@AuTimerIns:

; 58   : 		timerLast->next = timer;

	mov	rax, QWORD PTR ?timerLast@@3PEAU_timer_@@EA ; timerLast
	mov	rcx, QWORD PTR timer$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 59   : 		timer->prev = timerLast;

	mov	rax, QWORD PTR timer$[rsp]
	mov	rcx, QWORD PTR ?timerLast@@3PEAU_timer_@@EA ; timerLast
	mov	QWORD PTR [rax+24], rcx
$LN1@AuTimerIns:

; 60   : 	}
; 61   : 
; 62   : 	timerLast = timer;

	mov	rax, QWORD PTR timer$[rsp]
	mov	QWORD PTR ?timerLast@@3PEAU_timer_@@EA, rax ; timerLast

; 63   : }

	ret	0
?AuTimerInsert@@YAXPEAU_timer_@@@Z ENDP			; AuTimerInsert
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
t$1 = 32
sec$ = 64
min$ = 72
hour$ = 80
?AuTimerFire@@YAXHHH@Z PROC				; AuTimerFire

; 160  : void AuTimerFire(int sec, int min, int hour) {

$LN28:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 161  : 	if (timerFirst) {

	cmp	QWORD PTR ?timerFirst@@3PEAU_timer_@@EA, 0 ; timerFirst
	je	$LN25@AuTimerFir

; 162  : 		for (AuTimer* t = timerFirst; t != NULL; t = t->next) {

	mov	rax, QWORD PTR ?timerFirst@@3PEAU_timer_@@EA ; timerFirst
	mov	QWORD PTR t$1[rsp], rax
	jmp	SHORT $LN24@AuTimerFir
$LN23@AuTimerFir:
	mov	rax, QWORD PTR t$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR t$1[rsp], rax
$LN24@AuTimerFir:
	cmp	QWORD PTR t$1[rsp], 0
	je	$LN22@AuTimerFir

; 163  : 			if (t->run) {

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, BYTE PTR [rax+15]
	test	eax, eax
	je	$LN21@AuTimerFir

; 164  : 				if (t->updateOrder == TIMER_UPDATE_ORDER_HOUR) {

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, BYTE PTR [rax+4]
	cmp	eax, 3
	jne	SHORT $LN20@AuTimerFir

; 165  : 					if (t->maxTick != -1) {

	mov	rax, QWORD PTR t$1[rsp]
	cmp	DWORD PTR [rax+11], -1
	je	SHORT $LN19@AuTimerFir

; 166  : 						if (t->lastTick == t->maxTick)

	mov	rax, QWORD PTR t$1[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR [rcx+11]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN18@AuTimerFir

; 167  : 							t->run = false;

	mov	rax, QWORD PTR t$1[rsp]
	mov	BYTE PTR [rax+15], 0
$LN18@AuTimerFir:
$LN19@AuTimerFir:

; 168  : 					}
; 169  : 					if (t->lastTick != hour) {

	mov	rax, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR hour$[rsp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN17@AuTimerFir

; 170  : 						if (t->maxTick != -1){

	mov	rax, QWORD PTR t$1[rsp]
	cmp	DWORD PTR [rax+11], -1
	je	SHORT $LN16@AuTimerFir

; 171  : 							if (t->lastTick == t->maxTick)

	mov	rax, QWORD PTR t$1[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR [rcx+11]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN15@AuTimerFir

; 172  : 								t->run = false;

	mov	rax, QWORD PTR t$1[rsp]
	mov	BYTE PTR [rax+15], 0
$LN15@AuTimerFir:
$LN16@AuTimerFir:

; 173  : 						}
; 174  : 						AuTimerPostMessage(t);

	mov	rcx, QWORD PTR t$1[rsp]
	call	?AuTimerPostMessage@@YAXPEAU_timer_@@@Z	; AuTimerPostMessage

; 175  : 						t->lastTick = hour;

	mov	rax, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR hour$[rsp]
	mov	DWORD PTR [rax], ecx
$LN17@AuTimerFir:

; 176  : 					}
; 177  : 				}

	jmp	$LN14@AuTimerFir
$LN20@AuTimerFir:

; 178  : 				else if (t->updateOrder == TIMER_UPDATE_ORDER_MINUTE){

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, BYTE PTR [rax+4]
	cmp	eax, 2
	jne	SHORT $LN13@AuTimerFir

; 179  : 					if (t->maxTick != -1){

	mov	rax, QWORD PTR t$1[rsp]
	cmp	DWORD PTR [rax+11], -1
	je	SHORT $LN12@AuTimerFir

; 180  : 						if (t->lastTick == t->maxTick)

	mov	rax, QWORD PTR t$1[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR [rcx+11]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN11@AuTimerFir

; 181  : 							t->run = false;

	mov	rax, QWORD PTR t$1[rsp]
	mov	BYTE PTR [rax+15], 0
$LN11@AuTimerFir:
$LN12@AuTimerFir:

; 182  : 					}
; 183  : 					if (t->lastTick != min) {

	mov	rax, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR min$[rsp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN10@AuTimerFir

; 184  : 						AuTimerPostMessage(t);

	mov	rcx, QWORD PTR t$1[rsp]
	call	?AuTimerPostMessage@@YAXPEAU_timer_@@@Z	; AuTimerPostMessage

; 185  : 						t->lastTick = min;

	mov	rax, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR min$[rsp]
	mov	DWORD PTR [rax], ecx
$LN10@AuTimerFir:

; 186  : 					}
; 187  : 				}

	jmp	$LN9@AuTimerFir
$LN13@AuTimerFir:

; 188  : 				else if (t->updateOrder == TIMER_UPDATE_ORDER_SECOND) {

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, BYTE PTR [rax+4]
	cmp	eax, 1
	jne	SHORT $LN8@AuTimerFir

; 189  : 					if (t->maxTick != -1){

	mov	rax, QWORD PTR t$1[rsp]
	cmp	DWORD PTR [rax+11], -1
	je	SHORT $LN7@AuTimerFir

; 190  : 						if (t->lastTick == t->maxTick)

	mov	rax, QWORD PTR t$1[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR [rcx+11]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN6@AuTimerFir

; 191  : 							t->run = false;

	mov	rax, QWORD PTR t$1[rsp]
	mov	BYTE PTR [rax+15], 0
$LN6@AuTimerFir:
$LN7@AuTimerFir:

; 192  : 					}
; 193  : 					if (t->lastTick != sec){

	mov	rax, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR sec$[rsp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN5@AuTimerFir

; 194  : 						AuTimerPostMessage(t);

	mov	rcx, QWORD PTR t$1[rsp]
	call	?AuTimerPostMessage@@YAXPEAU_timer_@@@Z	; AuTimerPostMessage

; 195  : 						t->lastTick = sec;

	mov	rax, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR sec$[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@AuTimerFir:

; 196  : 					}
; 197  : 				}

	jmp	SHORT $LN4@AuTimerFir
$LN8@AuTimerFir:

; 198  : 				else if (t->updateOrder == TIMER_UPDATE_ORDER_INTERVAL) {

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, BYTE PTR [rax+4]
	cmp	eax, 4
	jne	SHORT $LN3@AuTimerFir

; 199  : 					if (t->lastTick >= t->tickDifference) {

	mov	rax, QWORD PTR t$1[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR [rcx+7]
	cmp	DWORD PTR [rax], ecx
	jl	SHORT $LN2@AuTimerFir

; 200  : 						AuTimerPostMessage(t);

	mov	rcx, QWORD PTR t$1[rsp]
	call	?AuTimerPostMessage@@YAXPEAU_timer_@@@Z	; AuTimerPostMessage

; 201  : 						t->lastTick = 0;

	mov	rax, QWORD PTR t$1[rsp]
	mov	DWORD PTR [rax], 0

; 202  : 					}
; 203  : 					else{

	jmp	SHORT $LN1@AuTimerFir
$LN2@AuTimerFir:

; 204  : 						t->lastTick++;

	mov	rax, QWORD PTR t$1[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR t$1[rsp]
	mov	DWORD PTR [rcx], eax
$LN1@AuTimerFir:
$LN3@AuTimerFir:
$LN4@AuTimerFir:
$LN9@AuTimerFir:
$LN14@AuTimerFir:
$LN21@AuTimerFir:

; 205  : 					}
; 206  : 				}
; 207  : 			}
; 208  : 		}

	jmp	$LN23@AuTimerFir
$LN22@AuTimerFir:
$LN25@AuTimerFir:

; 209  : 	}
; 210  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuTimerFire@@YAXHHH@Z ENDP				; AuTimerFire
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
t$1 = 32
threadID$ = 64
?AuTimerDestroy@@YAXG@Z PROC				; AuTimerDestroy

; 130  : void AuTimerDestroy(uint16_t threadID) {

$LN7:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 56					; 00000038H

; 131  : 	for (AuTimer* t = timerFirst; t != NULL; t = t->next) {

	mov	rax, QWORD PTR ?timerFirst@@3PEAU_timer_@@EA ; timerFirst
	mov	QWORD PTR t$1[rsp], rax
	jmp	SHORT $LN4@AuTimerDes
$LN3@AuTimerDes:
	mov	rax, QWORD PTR t$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR t$1[rsp], rax
$LN4@AuTimerDes:
	cmp	QWORD PTR t$1[rsp], 0
	je	SHORT $LN2@AuTimerDes

; 132  : 		if (t->threadId == threadID){

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, WORD PTR [rax+5]
	movzx	ecx, WORD PTR threadID$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@AuTimerDes

; 133  : 			AuTimerDelete(t);

	mov	rcx, QWORD PTR t$1[rsp]
	call	?AuTimerDelete@@YAXPEAU_timer_@@@Z	; AuTimerDelete

; 134  : 			break;

	jmp	SHORT $LN2@AuTimerDes
$LN1@AuTimerDes:

; 135  : 		}
; 136  : 	}

	jmp	SHORT $LN3@AuTimerDes
$LN2@AuTimerDes:

; 137  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuTimerDestroy@@YAXG@Z ENDP				; AuTimerDestroy
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
t$1 = 0
threadId$ = 32
?AuTimerStop@@YAXG@Z PROC				; AuTimerStop

; 116  : void AuTimerStop(uint16_t threadId) {

$LN7:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 24

; 117  : 	for (AuTimer* t = timerFirst; t != NULL; t = t->next) {

	mov	rax, QWORD PTR ?timerFirst@@3PEAU_timer_@@EA ; timerFirst
	mov	QWORD PTR t$1[rsp], rax
	jmp	SHORT $LN4@AuTimerSto
$LN3@AuTimerSto:
	mov	rax, QWORD PTR t$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR t$1[rsp], rax
$LN4@AuTimerSto:
	cmp	QWORD PTR t$1[rsp], 0
	je	SHORT $LN2@AuTimerSto

; 118  : 		if (t->threadId == threadId){

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, WORD PTR [rax+5]
	movzx	ecx, WORD PTR threadId$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@AuTimerSto

; 119  : 			t->run = false;

	mov	rax, QWORD PTR t$1[rsp]
	mov	BYTE PTR [rax+15], 0

; 120  : 			break;

	jmp	SHORT $LN2@AuTimerSto
$LN1@AuTimerSto:

; 121  : 		}
; 122  : 	}

	jmp	SHORT $LN3@AuTimerSto
$LN2@AuTimerSto:

; 123  : }

	add	rsp, 24
	ret	0
?AuTimerStop@@YAXG@Z ENDP				; AuTimerStop
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
t$1 = 0
threadId$ = 32
?AuTimerStart@@YAXG@Z PROC				; AuTimerStart

; 102  : void AuTimerStart(uint16_t threadId) {

$LN7:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 24

; 103  : 	for (AuTimer* t = timerFirst; t != NULL; t = t->next) {

	mov	rax, QWORD PTR ?timerFirst@@3PEAU_timer_@@EA ; timerFirst
	mov	QWORD PTR t$1[rsp], rax
	jmp	SHORT $LN4@AuTimerSta
$LN3@AuTimerSta:
	mov	rax, QWORD PTR t$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR t$1[rsp], rax
$LN4@AuTimerSta:
	cmp	QWORD PTR t$1[rsp], 0
	je	SHORT $LN2@AuTimerSta

; 104  : 		if (t->threadId == threadId) {

	mov	rax, QWORD PTR t$1[rsp]
	movzx	eax, WORD PTR [rax+5]
	movzx	ecx, WORD PTR threadId$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@AuTimerSta

; 105  : 			t->run = true;

	mov	rax, QWORD PTR t$1[rsp]
	mov	BYTE PTR [rax+15], 1

; 106  : 			break;

	jmp	SHORT $LN2@AuTimerSta
$LN1@AuTimerSta:

; 107  : 		}
; 108  : 	}

	jmp	SHORT $LN3@AuTimerSta
$LN2@AuTimerSta:

; 109  : }

	add	rsp, 24
	ret	0
?AuTimerStart@@YAXG@Z ENDP				; AuTimerStart
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
timer$ = 32
thread_id$ = 64
maxTickLimit$ = 72
updateOrder$ = 80
?AuTimerCreate@@YAXGHE@Z PROC				; AuTimerCreate

; 88   : void AuTimerCreate(uint16_t thread_id, int maxTickLimit, uint8_t updateOrder){

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 56					; 00000038H

; 89   : 	AuTimer* timer = (AuTimer*)kmalloc(sizeof(AuTimer));

	mov	ecx, 32					; 00000020H
	call	kmalloc
	mov	QWORD PTR timer$[rsp], rax

; 90   : 	memset(timer, 0, sizeof(AuTimer));

	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR timer$[rsp]
	call	memset

; 91   : 	timer->threadId = thread_id;

	mov	rax, QWORD PTR timer$[rsp]
	movzx	ecx, WORD PTR thread_id$[rsp]
	mov	WORD PTR [rax+5], cx

; 92   : 	timer->maxTick = maxTickLimit;

	mov	rax, QWORD PTR timer$[rsp]
	mov	ecx, DWORD PTR maxTickLimit$[rsp]
	mov	DWORD PTR [rax+11], ecx

; 93   : 	timer->updateOrder = updateOrder;

	mov	rax, QWORD PTR timer$[rsp]
	movzx	ecx, BYTE PTR updateOrder$[rsp]
	mov	BYTE PTR [rax+4], cl

; 94   : 	timer->run = false;

	mov	rax, QWORD PTR timer$[rsp]
	mov	BYTE PTR [rax+15], 0

; 95   : 	AuTimerInsert(timer);

	mov	rcx, QWORD PTR timer$[rsp]
	call	?AuTimerInsert@@YAXPEAU_timer_@@@Z	; AuTimerInsert

; 96   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuTimerCreate@@YAXGHE@Z ENDP				; AuTimerCreate
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\autimer.cpp
_TEXT	SEGMENT
?AuTimerDataInitialise@@YAXXZ PROC			; AuTimerDataInitialise

; 45   : 	timerFirst = NULL;

	mov	QWORD PTR ?timerFirst@@3PEAU_timer_@@EA, 0 ; timerFirst

; 46   : 	timerLast = NULL;

	mov	QWORD PTR ?timerLast@@3PEAU_timer_@@EA, 0 ; timerLast

; 47   : }

	ret	0
?AuTimerDataInitialise@@YAXXZ ENDP			; AuTimerDataInitialise
_TEXT	ENDS
END
