; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG4414	DB	' _test ', 0dH, 0aH, 00H
	ORG $+6
$SG4421	DB	'BootDev HID -> %x, UID -> %x, CID -> %x ', 0dH, 0aH, 00H
	ORG $+5
$SG4422	DB	'CPU ID OF BSP -> %d ', 0dH, 0aH, 00H
	ORG $+1
$SG4426	DB	'test_', 00H
CONST	ENDS
PUBLIC	?_test@@YAX_K@Z					; _test
PUBLIC	?_AuMain@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z		; _AuMain
EXTRN	?AuConsoleInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@_N@Z:PROC ; AuConsoleInitialize
EXTRN	?AuConsolePostInitialise@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z:PROC ; AuConsolePostInitialise
EXTRN	?AuPmmngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z:PROC ; AuPmmngrInitialize
EXTRN	AuPmmngrAlloc:PROC
EXTRN	P2V:PROC
EXTRN	?AuVmmngrInitialize@@YAXXZ:PROC			; AuVmmngrInitialize
EXTRN	?AuVmmngrBootFree@@YAXXZ:PROC			; AuVmmngrBootFree
EXTRN	?AuVFSInitialise@@YAXXZ:PROC			; AuVFSInitialise
EXTRN	?AuSchedulerStart@@YAXXZ:PROC			; AuSchedulerStart
EXTRN	?AuSchedulerInitialise@@YAXXZ:PROC		; AuSchedulerInitialise
EXTRN	AuCreateKthread:PROC
EXTRN	?AuStartRootProc@@YAXXZ:PROC			; AuStartRootProc
EXTRN	?AuInitialiseSHMMan@@YAXXZ:PROC			; AuInitialiseSHMMan
EXTRN	AuHalInitialise:PROC
EXTRN	AuHalPostInitialise:PROC
EXTRN	x64_cli:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	?AuInitialiseSerial@@YAXXZ:PROC			; AuInitialiseSerial
EXTRN	SeTextOut:PROC
EXTRN	?AuPerCPUGetCpuID@@YAEXZ:PROC			; AuPerCPUGetCpuID
EXTRN	AuHeapInitialize:PROC
EXTRN	?AuAHCIInitialise@@YAXXZ:PROC			; AuAHCIInitialise
EXTRN	?AuPS2MouseInitialise@@YAXXZ:PROC		; AuPS2MouseInitialise
EXTRN	?AuPS2KybrdInitialize@@YAXXZ:PROC		; AuPS2KybrdInitialize
EXTRN	?AuRTCInitialize@@YAXXZ:PROC			; AuRTCInitialize
EXTRN	?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z:PROC ; AuDrvMngrInitialize
EXTRN	?AuInitialiseLoader@@YAXXZ:PROC			; AuInitialiseLoader
pdata	SEGMENT
$pdata$?_test@@YAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+35
	DD	imagerel $unwind$?_test@@YAX_K@Z
$pdata$?_AuMain@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD imagerel $LN5
	DD	imagerel $LN5+281
	DD	imagerel $unwind$?_AuMain@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?_test@@YAX_K@Z DD 010901H
	DD	04209H
$unwind$?_AuMain@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD 010901H
	DD	06209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\init.cpp
_TEXT	SEGMENT
tv83 = 32
t$ = 40
info$ = 64
?_AuMain@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z PROC		; _AuMain

; 73   : void _AuMain(KERNEL_BOOT_INFO *info) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 74   : 	AuConsoleInitialize(info, true);

	mov	dl, 1
	mov	rcx, QWORD PTR info$[rsp]
	call	?AuConsoleInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@_N@Z ; AuConsoleInitialize

; 75   : 	AuPmmngrInitialize(info);

	mov	rcx, QWORD PTR info$[rsp]
	call	?AuPmmngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; AuPmmngrInitialize

; 76   : 	AuVmmngrInitialize();

	call	?AuVmmngrInitialize@@YAXXZ		; AuVmmngrInitialize

; 77   : 	AuHeapInitialize();

	call	AuHeapInitialize

; 78   : 
; 79   : 	AuHalInitialise(info);

	mov	rcx, QWORD PTR info$[rsp]
	call	AuHalInitialise

; 80   : 	AuInitialiseSerial();

	call	?AuInitialiseSerial@@YAXXZ		; AuInitialiseSerial

; 81   : 	AuVFSInitialise();

	call	?AuVFSInitialise@@YAXXZ			; AuVFSInitialise

; 82   : 	SeTextOut("BootDev HID -> %x, UID -> %x, CID -> %x \r\n", info->hid, info->uid, info->cid);

	mov	rax, QWORD PTR info$[rsp]
	mov	r9d, DWORD PTR [rax+178]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+174]
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+170]
	lea	rcx, OFFSET FLAT:$SG4421
	call	SeTextOut

; 83   : 	AuAHCIInitialise();

	call	?AuAHCIInitialise@@YAXXZ		; AuAHCIInitialise

; 84   : 	
; 85   : 	AuConsolePostInitialise(info);

	mov	rcx, QWORD PTR info$[rsp]
	call	?AuConsolePostInitialise@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; AuConsolePostInitialise

; 86   : 	/* Here initialize all legacy bus system
; 87   : 	 * like ps2.... using AuLegacyBusInitialize() */
; 88   : 	AuPS2MouseInitialise();

	call	?AuPS2MouseInitialise@@YAXXZ		; AuPS2MouseInitialise

; 89   : 	AuRTCInitialize();

	call	?AuRTCInitialize@@YAXXZ			; AuRTCInitialize

; 90   : 	AuPS2KybrdInitialize();

	call	?AuPS2KybrdInitialize@@YAXXZ		; AuPS2KybrdInitialize

; 91   : 
; 92   : 	/* initialise the shared mem man */
; 93   : 	AuInitialiseSHMMan();

	call	?AuInitialiseSHMMan@@YAXXZ		; AuInitialiseSHMMan

; 94   : 
; 95   : 	x64_cli();

	call	x64_cli

; 96   : 	AuSchedulerInitialise();

	call	?AuSchedulerInitialise@@YAXXZ		; AuSchedulerInitialise

; 97   : 	
; 98   : 	/*initialise aurora driver manager*/
; 99   : 	AuDrvMngrInitialize(info);

	mov	rcx, QWORD PTR info$[rsp]
	call	?AuDrvMngrInitialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; AuDrvMngrInitialize

; 100  : 
; 101  : 	/* initialise all application processors*/
; 102  : 	AuHalPostInitialise();

	call	AuHalPostInitialise

; 103  : 
; 104  : 	SeTextOut("CPU ID OF BSP -> %d \r\n", AuPerCPUGetCpuID());

	call	?AuPerCPUGetCpuID@@YAEXZ		; AuPerCPUGetCpuID
	movzx	eax, al
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG4422
	call	SeTextOut

; 105  : 
; 106  : 	AuInitialiseLoader();

	call	?AuInitialiseLoader@@YAXXZ		; AuInitialiseLoader

; 107  : 
; 108  : 	/* make the kernel standalone*/
; 109  : 	AuVmmngrBootFree();

	call	?AuVmmngrBootFree@@YAXXZ		; AuVmmngrBootFree

; 110  : 
; 111  : 	/* Process initialisation begins here */
; 112  : 	AuStartRootProc();

	call	?AuStartRootProc@@YAXXZ			; AuStartRootProc

; 113  : 	AuThread *t = AuCreateKthread(_test, (uint64_t)P2V((uint64_t)AuPmmngrAlloc() + 4096), x64_read_cr3(), "test_");

	call	x64_read_cr3
	mov	QWORD PTR tv83[rsp], rax
	call	AuPmmngrAlloc
	add	rax, 4096				; 00001000H
	mov	rcx, rax
	call	P2V
	lea	r9, OFFSET FLAT:$SG4426
	mov	rcx, QWORD PTR tv83[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?_test@@YAX_K@Z	; _test
	call	AuCreateKthread
	mov	QWORD PTR t$[rsp], rax

; 114  : 	AuSchedulerStart();

	call	?AuSchedulerStart@@YAXXZ		; AuSchedulerStart
$LN2@AuMain:

; 115  : 	for (;;);

	jmp	SHORT $LN2@AuMain

; 116  : }

	add	rsp, 56					; 00000038H
	ret	0
?_AuMain@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ENDP		; _AuMain
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\init.cpp
_TEXT	SEGMENT
t$ = 48
?_test@@YAX_K@Z PROC					; _test

; 61   : void _test(uint64_t t) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 62   : 	SeTextOut(" _test \r\n");

	lea	rcx, OFFSET FLAT:$SG4414
	call	SeTextOut
$LN2@test:

; 63   : 	while (1) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@test

; 64   : 		//
; 65   : 	}

	jmp	SHORT $LN2@test
$LN1@test:

; 66   : }

	add	rsp, 40					; 00000028H
	ret	0
?_test@@YAX_K@Z ENDP					; _test
_TEXT	ENDS
END
