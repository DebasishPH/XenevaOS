; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA	; __AuroraBasicAcpi
PUBLIC	?__PCIESupported@@3_NA				; __PCIESupported
PUBLIC	?__ACPIRSDP@@3PEAXEA				; __ACPIRSDP
_BSS	SEGMENT
?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA DQ 01H DUP (?) ; __AuroraBasicAcpi
?__PCIESupported@@3_NA DB 01H DUP (?)			; __PCIESupported
	ALIGN	8

?__ACPIRSDP@@3PEAXEA DQ 01H DUP (?)			; __ACPIRSDP
_BSS	ENDS
msvcjmc	SEGMENT
__3F0F154D_basicacpi@cpp DB 01H
__303BDA61_stdint@h DB 01H
msvcjmc	ENDS
PUBLIC	?AuACPIEnable@@YAXXZ				; AuACPIEnable
PUBLIC	?AuACPIInitialise@@YAXPEAX@Z			; AuACPIInitialise
PUBLIC	?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ		; AuACPIGetMCFG
PUBLIC	?AuACPIPCIESupported@@YA_NXZ			; AuACPIPCIESupported
PUBLIC	?AuACPIGetRSDP@@YAPEAXXZ			; AuACPIGetRSDP
PUBLIC	?AuInitialiseACPISubsys@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; AuInitialiseACPISubsys
PUBLIC	?AuGetCPUCount@@YAEXZ				; AuGetCPUCount
PUBLIC	?AuACPIPowerButtonEnable@@YAXXZ			; AuACPIPowerButtonEnable
PUBLIC	?search_s5@@YAPEAEPEAUacpiDsdt@@@Z		; search_s5
PUBLIC	?AuFADTHandler@@YAX_KPEAX@Z			; AuFADTHandler
PUBLIC	?AuACPIParseMADT@@YAXXZ				; AuACPIParseMADT
PUBLIC	??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z ; raw_diff<_acpi_apic_header_,acpiMadt>
PUBLIC	??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z ; raw_offset<_acpi_apic_header_ *,_acpi_apic_header_ *>
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
PUBLIC	??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z ; raw_offset<_IMAGE_SECTION_HEADER *,_IMAGE_OPTIONAL_HEADER_PE32PLUS *>
PUBLIC	??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z		; raw_offset<void *,unsigned char *>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CF@EIFLIELN@?$FLACPI?$FN?3?5Data?5structures?5incompl@ ; `string'
PUBLIC	??_C@_0BK@IENMAIKJ@?$FLACPI?$FN?3?5Already?5enabled?5?6@ ; `string'
PUBLIC	??_C@_0BL@LCNOKLDO@ACPI?5Enabled?5successfully?6@ ; `string'
PUBLIC	??_C@_0BG@KDHAOJPI@FADT?5Handler?5called?5?6@	; `string'
PUBLIC	??_C@_0BH@PDLCJJN@acpi?5cpu?5count?5?9?$DO?5?$CFd?5?6@ ; `string'
PUBLIC	??_C@_0CE@KOPGPFHK@acpi?5ioapic?5base?5?9?$DO?5?$CFx?0?5gsi?5?9?$DO?5@ ; `string'
PUBLIC	??_C@_0DF@IBGEACJK@acpi?5interrupt?5source?5override?5@ ; `string'
PUBLIC	??_C@_04FKBPEJO@FACP@				; `string'
PUBLIC	??_C@_0BG@OJKENPPK@acpi?5fadt?5supported?5?6@	; `string'
PUBLIC	??_C@_04EFEMGNDI@CIPA@				; `string'
PUBLIC	??_C@_04DDFMNMDA@APIC@				; `string'
PUBLIC	??_C@_0BG@FMCOMLOA@acpi?5madt?5supported?5?6@	; `string'
PUBLIC	??_C@_04IIOFAFHH@SRAT@				; `string'
PUBLIC	??_C@_0BG@PGDDJOOM@acpi?5srat?5supported?5?6@	; `string'
PUBLIC	??_C@_04DGDAHEGD@SLIT@				; `string'
PUBLIC	??_C@_0BG@PPBPJKFO@acpi?5slit?5supported?5?6@	; `string'
PUBLIC	??_C@_04NLDAELHJ@MCFG@				; `string'
PUBLIC	??_C@_0BG@GJNLEGKF@acpi?5mcfg?5supported?5?6@	; `string'
PUBLIC	??_C@_04DCNFMDLD@HPET@				; `string'
PUBLIC	??_C@_0BG@FJDEFDIL@acpi?5hpet?5supported?5?6@	; `string'
PUBLIC	??_C@_04EPCNELPN@MCHI@				; `string'
PUBLIC	??_C@_0DF@PJODNDG@acpi?5management?5controller?5host@ ; `string'
PUBLIC	??_C@_0CG@JKBHOOKC@Failed?5to?5initialise?5acpi?5subsy@ ; `string'
PUBLIC	??_C@_0BN@HKOKFJKN@Failed?5to?5load?5acpi?5tables?5?6@ ; `string'
EXTRN	AuHalRegisterIRQ:PROC
EXTRN	AuInterruptEnd:PROC
EXTRN	strlen:PROC
EXTRN	strncmp:PROC
EXTRN	strncpy:PROC
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	x64_inportw:PROC
EXTRN	x64_outportb:PROC
EXTRN	AuTextOut:PROC
EXTRN	kmalloc:PROC
EXTRN	AuMapPage:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	?AuKernelLinkDLL@@YAXPEAX@Z:PROC		; AuKernelLinkDLL
EXTRN	?AuKernelLinkImports@@YAXPEAX@Z:PROC		; AuKernelLinkImports
EXTRN	__imp_AcpiInitializeSubsystem:PROC
EXTRN	__imp_AcpiLoadTables:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuACPIEnable@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+283
	DD	imagerel $unwind$?AuACPIEnable@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuACPIInitialise@@YAXPEAX@Z DD imagerel $LN25
	DD	imagerel $LN25+1014
	DD	imagerel $unwind$?AuACPIInitialise@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuACPIPCIESupported@@YA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?AuACPIPCIESupported@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuACPIGetRSDP@@YAPEAXXZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?AuACPIGetRSDP@@YAPEAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuInitialiseACPISubsys@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD imagerel $LN14
	DD	imagerel $LN14+591
	DD	imagerel $unwind$?AuInitialiseACPISubsys@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuGetCPUCount@@YAEXZ DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?AuGetCPUCount@@YAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuACPIPowerButtonEnable@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?AuACPIPowerButtonEnable@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?search_s5@@YAPEAEPEAUacpiDsdt@@@Z DD imagerel $LN6
	DD	imagerel $LN6+117
	DD	imagerel $unwind$?search_s5@@YAPEAEPEAUacpiDsdt@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuFADTHandler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?AuFADTHandler@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuACPIParseMADT@@YAXXZ DD imagerel $LN12
	DD	imagerel $LN12+292
	DD	imagerel $unwind$?AuACPIParseMADT@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z
pdata	ENDS
;	COMDAT ??_C@_0BN@HKOKFJKN@Failed?5to?5load?5acpi?5tables?5?6@
CONST	SEGMENT
??_C@_0BN@HKOKFJKN@Failed?5to?5load?5acpi?5tables?5?6@ DB 'Failed to load'
	DB	' acpi tables ', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JKBHOOKC@Failed?5to?5initialise?5acpi?5subsy@
CONST	SEGMENT
??_C@_0CG@JKBHOOKC@Failed?5to?5initialise?5acpi?5subsy@ DB 'Failed to ini'
	DB	'tialise acpi subsystem ', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PJODNDG@acpi?5management?5controller?5host@
CONST	SEGMENT
??_C@_0DF@PJODNDG@acpi?5management?5controller?5host@ DB 'acpi management'
	DB	' controller host interface supported', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EPCNELPN@MCHI@
CONST	SEGMENT
??_C@_04EPCNELPN@MCHI@ DB 'MCHI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FJDEFDIL@acpi?5hpet?5supported?5?6@
CONST	SEGMENT
??_C@_0BG@FJDEFDIL@acpi?5hpet?5supported?5?6@ DB 'acpi hpet supported ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04DCNFMDLD@HPET@
CONST	SEGMENT
??_C@_04DCNFMDLD@HPET@ DB 'HPET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GJNLEGKF@acpi?5mcfg?5supported?5?6@
CONST	SEGMENT
??_C@_0BG@GJNLEGKF@acpi?5mcfg?5supported?5?6@ DB 'acpi mcfg supported ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLDAELHJ@MCFG@
CONST	SEGMENT
??_C@_04NLDAELHJ@MCFG@ DB 'MCFG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PPBPJKFO@acpi?5slit?5supported?5?6@
CONST	SEGMENT
??_C@_0BG@PPBPJKFO@acpi?5slit?5supported?5?6@ DB 'acpi slit supported ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGDAHEGD@SLIT@
CONST	SEGMENT
??_C@_04DGDAHEGD@SLIT@ DB 'SLIT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PGDDJOOM@acpi?5srat?5supported?5?6@
CONST	SEGMENT
??_C@_0BG@PGDDJOOM@acpi?5srat?5supported?5?6@ DB 'acpi srat supported ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04IIOFAFHH@SRAT@
CONST	SEGMENT
??_C@_04IIOFAFHH@SRAT@ DB 'SRAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMCOMLOA@acpi?5madt?5supported?5?6@
CONST	SEGMENT
??_C@_0BG@FMCOMLOA@acpi?5madt?5supported?5?6@ DB 'acpi madt supported ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFMNMDA@APIC@
CONST	SEGMENT
??_C@_04DDFMNMDA@APIC@ DB 'APIC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFEMGNDI@CIPA@
CONST	SEGMENT
??_C@_04EFEMGNDI@CIPA@ DB 'CIPA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OJKENPPK@acpi?5fadt?5supported?5?6@
CONST	SEGMENT
??_C@_0BG@OJKENPPK@acpi?5fadt?5supported?5?6@ DB 'acpi fadt supported ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKBPEJO@FACP@
CONST	SEGMENT
??_C@_04FKBPEJO@FACP@ DB 'FACP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IBGEACJK@acpi?5interrupt?5source?5override?5@
CONST	SEGMENT
??_C@_0DF@IBGEACJK@acpi?5interrupt?5source?5override?5@ DB 'acpi interrup'
	DB	't source override gsi -> %d, src-> %d ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KOPGPFHK@acpi?5ioapic?5base?5?9?$DO?5?$CFx?0?5gsi?5?9?$DO?5@
CONST	SEGMENT
??_C@_0CE@KOPGPFHK@acpi?5ioapic?5base?5?9?$DO?5?$CFx?0?5gsi?5?9?$DO?5@ DB 'a'
	DB	'cpi ioapic base -> %x, gsi -> %d ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PDLCJJN@acpi?5cpu?5count?5?9?$DO?5?$CFd?5?6@
CONST	SEGMENT
??_C@_0BH@PDLCJJN@acpi?5cpu?5count?5?9?$DO?5?$CFd?5?6@ DB 'acpi cpu count'
	DB	' -> %d ', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KDHAOJPI@FADT?5Handler?5called?5?6@
CONST	SEGMENT
??_C@_0BG@KDHAOJPI@FADT?5Handler?5called?5?6@ DB 'FADT Handler called ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LCNOKLDO@ACPI?5Enabled?5successfully?6@
CONST	SEGMENT
??_C@_0BL@LCNOKLDO@ACPI?5Enabled?5successfully?6@ DB 'ACPI Enabled succes'
	DB	'sfully', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IENMAIKJ@?$FLACPI?$FN?3?5Already?5enabled?5?6@
CONST	SEGMENT
??_C@_0BK@IENMAIKJ@?$FLACPI?$FN?3?5Already?5enabled?5?6@ DB '[ACPI]: Alre'
	DB	'ady enabled ', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EIFLIELN@?$FLACPI?$FN?3?5Data?5structures?5incompl@
CONST	SEGMENT
??_C@_0CF@EIFLIELN@?$FLACPI?$FN?3?5Data?5structures?5incompl@ DB '[ACPI]:'
	DB	' Data structures incomplete ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuACPIParseMADT@@YAXXZ DD 025040e01H
	DD	0109230eH
	DD	050020012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuFADTHandler@@YAX_KPEAX@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?search_s5@@YAPEAEPEAUacpiDsdt@@@Z DD 025031201H
	DD	0f20d2312H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuACPIPowerButtonEnable@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuGetCPUCount@@YAEXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuInitialiseACPISubsys@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD 025041201H
	DD	010d2312H
	DD	050060018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuACPIGetRSDP@@YAPEAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuACPIPCIESupported@@YA_NXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuACPIInitialise@@YAXPEAX@Z DD 025041201H
	DD	010d2312H
	DD	050060014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuACPIEnable@@YAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z PROC		; raw_offset<void *,unsigned char *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z ENDP		; raw_offset<void *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z PROC ; raw_offset<_IMAGE_SECTION_HEADER *,_IMAGE_OPTIONAL_HEADER_PE32PLUS *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z ENDP ; raw_offset<_IMAGE_SECTION_HEADER *,_IMAGE_OPTIONAL_HEADER_PE32PLUS *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z
_TEXT	SEGMENT
p1$ = 80
offset$ = 88
??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z PROC ; raw_offset<_acpi_apic_header_ *,_acpi_apic_header_ *>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 208  : 		return (T)((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rbp]
	mov	rcx, QWORD PTR p1$[rbp]
	add	rcx, rax
	mov	rax, rcx

; 209  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z ENDP ; raw_offset<_acpi_apic_header_ *,_acpi_apic_header_ *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\BaseHdr\stdint.h
;	COMDAT ??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z
_TEXT	SEGMENT
p1$ = 80
p2$ = 88
??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z PROC ; raw_diff<_acpi_apic_header_,acpiMadt>, COMDAT

; 203  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__303BDA61_stdint@h
	call	__CheckForDebuggerJustMyCode

; 204  : 		return (intptr_t)p1 - (intptr_t)p2;

	mov	eax, DWORD PTR p2$[rbp]
	mov	ecx, DWORD PTR p1$[rbp]
	sub	ecx, eax
	mov	eax, ecx

; 205  : 	};

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z ENDP ; raw_diff<_acpi_apic_header_,acpiMadt>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuACPIParseMADT@@YAXXZ
_TEXT	SEGMENT
apic_header$ = 0
lapic$1 = 8
io_apic$2 = 16
over$3 = 24
tv76 = 96
?AuACPIParseMADT@@YAXXZ PROC				; AuACPIParseMADT, COMDAT

; 117  : void AuACPIParseMADT() {

$LN12:
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 118  : 	acpiApicHeader* apic_header = (acpiApicHeader*)__AuroraBasicAcpi->madt->entry;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+1]
	add	rax, 44					; 0000002cH
	mov	QWORD PTR apic_header$[rbp], rax
$LN2@AuACPIPars:

; 119  : 
; 120  : 	while (raw_diff(apic_header, __AuroraBasicAcpi->madt) < __AuroraBasicAcpi->madt->header.length) {

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rdx, QWORD PTR [rax+1]
	mov	rcx, QWORD PTR apic_header$[rbp]
	call	??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z ; raw_diff<_acpi_apic_header_,acpiMadt>
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR [rcx+1]
	cmp	eax, DWORD PTR [rcx+4]
	jae	$LN3@AuACPIPars

; 121  : 		switch (apic_header->type) {

	mov	rax, QWORD PTR apic_header$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv76[rbp], al
	cmp	BYTE PTR tv76[rbp], 0
	je	SHORT $LN6@AuACPIPars
	cmp	BYTE PTR tv76[rbp], 1
	je	SHORT $LN8@AuACPIPars
	cmp	BYTE PTR tv76[rbp], 2
	je	SHORT $LN9@AuACPIPars
	jmp	$LN10@AuACPIPars
$LN6@AuACPIPars:

; 122  : 		case ACPI_APICTYPE_LAPIC: {
; 123  : 									  acpiLocalApic* lapic = (acpiLocalApic*)apic_header;

	mov	rax, QWORD PTR apic_header$[rbp]
	mov	QWORD PTR lapic$1[rbp], rax

; 124  : 									  if (lapic->procId != 0)

	mov	rax, QWORD PTR lapic$1[rbp]
	movzx	eax, BYTE PTR [rax+2]
	test	eax, eax
	je	SHORT $LN7@AuACPIPars

; 125  : 										  __AuroraBasicAcpi->num_cpu = lapic->procId;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR lapic$1[rbp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+45], cl
$LN7@AuACPIPars:

; 126  : 									  AuTextOut("acpi cpu count -> %d \n", __AuroraBasicAcpi->num_cpu);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	movzx	eax, BYTE PTR [rax+45]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0BH@PDLCJJN@acpi?5cpu?5count?5?9?$DO?5?$CFd?5?6@
	call	AuTextOut

; 127  : 									  break;

	jmp	SHORT $LN4@AuACPIPars
$LN8@AuACPIPars:

; 128  : 		}
; 129  : 		case ACPI_APICTYPE_IOAPIC:{
; 130  : 									  acpiIoApic* io_apic = (acpiIoApic*)apic_header;

	mov	rax, QWORD PTR apic_header$[rbp]
	mov	QWORD PTR io_apic$2[rbp], rax

; 131  : 									  AuTextOut("acpi ioapic base -> %x, gsi -> %d \n", io_apic->ioApicAddr, io_apic->gsiBase);

	mov	rax, QWORD PTR io_apic$2[rbp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR io_apic$2[rbp]
	mov	edx, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:??_C@_0CE@KOPGPFHK@acpi?5ioapic?5base?5?9?$DO?5?$CFx?0?5gsi?5?9?$DO?5@
	call	AuTextOut

; 132  : 									  break;

	jmp	SHORT $LN4@AuACPIPars
$LN9@AuACPIPars:

; 133  : 		}
; 134  : 		case ACPI_APICTYPE_ISOVER:{
; 135  : 									  apic_interrupt_override* over = (apic_interrupt_override*)apic_header;

	mov	rax, QWORD PTR apic_header$[rbp]
	mov	QWORD PTR over$3[rbp], rax

; 136  : 									  AuTextOut("acpi interrupt source override gsi -> %d, src-> %d \n", over->interrupt, over->source);

	mov	rax, QWORD PTR over$3[rbp]
	movzx	eax, BYTE PTR [rax+3]
	mov	r8d, eax
	mov	rax, QWORD PTR over$3[rbp]
	mov	edx, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:??_C@_0DF@IBGEACJK@acpi?5interrupt?5source?5override?5@
	call	AuTextOut
$LN10@AuACPIPars:
$LN4@AuACPIPars:

; 137  : 									  break;
; 138  : 		}
; 139  : 
; 140  : 		default:
; 141  : 			break;
; 142  : 		}
; 143  : 
; 144  : 		apic_header = raw_offset<acpiApicHeader*>(apic_header, apic_header->length);

	mov	rax, QWORD PTR apic_header$[rbp]
	movzx	eax, BYTE PTR [rax+1]
	mov	edx, eax
	mov	rcx, QWORD PTR apic_header$[rbp]
	call	??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z ; raw_offset<_acpi_apic_header_ *,_acpi_apic_header_ *>
	mov	QWORD PTR apic_header$[rbp], rax

; 145  : 	}

	jmp	$LN2@AuACPIPars
$LN3@AuACPIPars:

; 146  : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?AuACPIParseMADT@@YAXXZ ENDP				; AuACPIParseMADT
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuFADTHandler@@YAX_KPEAX@Z
_TEXT	SEGMENT
v$ = 80
p$ = 88
?AuFADTHandler@@YAX_KPEAX@Z PROC			; AuFADTHandler, COMDAT

; 108  : void AuFADTHandler(size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 109  : 	AuTextOut("FADT Handler called \n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@KDHAOJPI@FADT?5Handler?5called?5?6@
	call	AuTextOut

; 110  : 	AuInterruptEnd(__AuroraBasicAcpi->fadt->sciInt);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	movzx	ecx, BYTE PTR [rax+46]
	call	AuInterruptEnd

; 111  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuFADTHandler@@YAX_KPEAX@Z ENDP			; AuFADTHandler
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?search_s5@@YAPEAEPEAUacpiDsdt@@@Z
_TEXT	SEGMENT
l$ = 0
S5$ = 8
tv72 = 80
header$ = 112
?search_s5@@YAPEAEPEAUacpiDsdt@@@Z PROC			; search_s5, COMDAT

; 91   : uint8_t* search_s5(acpiDsdt* header) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 92   : 	uint32_t l;
; 93   : 	uint32_t* S5;
; 94   : 
; 95   : 	l = header->header.length - sizeof(acpiDsdt);

	mov	rax, QWORD PTR header$[rbp]
	mov	eax, DWORD PTR [rax+4]
	sub	rax, 36					; 00000024H
	mov	DWORD PTR l$[rbp], eax

; 96   : 	S5 = (uint32_t*)(header + sizeof(acpiDsdt));

	mov	rax, QWORD PTR header$[rbp]
	add	rax, 1296				; 00000510H
	mov	QWORD PTR S5$[rbp], rax
$LN2@search_s5:

; 97   : 	while (l--) {

	mov	eax, DWORD PTR l$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	mov	eax, DWORD PTR l$[rbp]
	dec	eax
	mov	DWORD PTR l$[rbp], eax
	cmp	DWORD PTR tv72[rbp], 0
	je	SHORT $LN3@search_s5

; 98   : 		if (*S5 == (uint32_t)'_5S_') {

	mov	rax, QWORD PTR S5$[rbp]
	cmp	DWORD PTR [rax], 1597330271		; 5f35535fH
	jne	SHORT $LN4@search_s5

; 99   : 			return (uint8_t*)S5;

	mov	rax, QWORD PTR S5$[rbp]
	jmp	SHORT $LN1@search_s5
$LN4@search_s5:

; 100  : 		}
; 101  : 		S5 = (uint32_t*)((uint32_t)S5 + 1);

	mov	eax, DWORD PTR S5$[rbp]
	inc	eax
	mov	eax, eax
	mov	QWORD PTR S5$[rbp], rax

; 102  : 	}

	jmp	SHORT $LN2@search_s5
$LN3@search_s5:

; 103  : 
; 104  : 	return (uint8_t*)NULL;

	xor	eax, eax
$LN1@search_s5:

; 105  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?search_s5@@YAPEAEPEAUacpiDsdt@@@Z ENDP			; search_s5
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuACPIPowerButtonEnable@@YAXXZ
_TEXT	SEGMENT
?AuACPIPowerButtonEnable@@YAXXZ PROC			; AuACPIPowerButtonEnable, COMDAT

; 56   : void AuACPIPowerButtonEnable() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 57   : 	__AuroraBasicAcpi->fadt->pm1aEventBlock = (1<<9) |  ACPI_POWER_BUTTON_ENABLE | 1<<5;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	mov	DWORD PTR [rax+56], 800			; 00000320H

; 58   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuACPIPowerButtonEnable@@YAXXZ ENDP			; AuACPIPowerButtonEnable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuGetCPUCount@@YAEXZ
_TEXT	SEGMENT
?AuGetCPUCount@@YAEXZ PROC				; AuGetCPUCount, COMDAT

; 296  : uint8_t AuGetCPUCount() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 297  : 	return __AuroraBasicAcpi->num_cpu;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	movzx	eax, BYTE PTR [rax+45]

; 298  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuGetCPUCount@@YAEXZ ENDP				; AuGetCPUCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuInitialiseACPISubsys@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z
_TEXT	SEGMENT
dos_header$ = 0
ntHeaders$ = 8
secthdr$ = 16
imageBase$ = 24
hdrsz$ = 32
i$1 = 40
i$2 = 48
load_addr$3 = 56
sectSize$4 = 64
j$5 = 72
status$ = 76
tv157 = 144
tv151 = 144
tv143 = 144
tv89 = 144
info$ = 176
?AuInitialiseACPISubsys@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z PROC ; AuInitialiseACPISubsys, COMDAT

; 260  : void AuInitialiseACPISubsys(KERNEL_BOOT_INFO *info) {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 192				; 000000c0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 261  : 	/* get the image size and base address */
; 262  : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)info->driver_entry1;

	mov	rax, QWORD PTR info$[rbp]
	mov	rax, QWORD PTR [rax+114]
	mov	QWORD PTR dos_header$[rbp], rax

; 263  : 	PIMAGE_NT_HEADERS ntHeaders = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rbp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rbp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS *,_IMAGE_DOS_HEADER_ *>
	mov	QWORD PTR ntHeaders$[rbp], rax

; 264  : 	PSECTION_HEADER secthdr = raw_offset<PSECTION_HEADER>(&ntHeaders->OptionalHeader, ntHeaders->FileHeader.SizeOfOptionaHeader);

	mov	rax, QWORD PTR ntHeaders$[rbp]
	movzx	eax, WORD PTR [rax+20]
	mov	rcx, QWORD PTR ntHeaders$[rbp]
	add	rcx, 24
	mov	edx, eax
	call	??$raw_offset@PEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@@@YAPEAU_IMAGE_SECTION_HEADER@@PEAU_IMAGE_OPTIONAL_HEADER_PE32PLUS@@H@Z ; raw_offset<_IMAGE_SECTION_HEADER *,_IMAGE_OPTIONAL_HEADER_PE32PLUS *>
	mov	QWORD PTR secthdr$[rbp], rax

; 265  : 	size_t imageBase = ntHeaders->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR ntHeaders$[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR imageBase$[rbp], rax

; 266  : 	size_t hdrsz = ntHeaders->OptionalHeader.SizeOfHeaders;

	mov	rax, QWORD PTR ntHeaders$[rbp]
	mov	eax, DWORD PTR [rax+84]
	mov	QWORD PTR hdrsz$[rbp], rax

; 267  : 
; 268  : 	for (size_t i = 0; i < hdrsz / 4096 + 1; i++)

	mov	QWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuInitiali
$LN2@AuInitiali:
	mov	rax, QWORD PTR i$1[rbp]
	inc	rax
	mov	QWORD PTR i$1[rbp], rax
$LN4@AuInitiali:
	xor	edx, edx
	mov	rax, QWORD PTR hdrsz$[rbp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	inc	rax
	cmp	QWORD PTR i$1[rbp], rax
	jae	SHORT $LN3@AuInitiali

; 269  : 		AuMapPage((uint64_t)AuPmmngrAlloc(), imageBase + i * 4096, 0);

	imul	rax, QWORD PTR i$1[rbp], 4096		; 00001000H
	mov	rcx, QWORD PTR imageBase$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv89[rbp], rax
	call	AuPmmngrAlloc
	xor	r8d, r8d
	mov	rcx, QWORD PTR tv89[rbp]
	mov	rdx, rcx
	mov	rcx, rax
	call	AuMapPage
	jmp	SHORT $LN2@AuInitiali
$LN3@AuInitiali:

; 270  : 	memcpy((void*)imageBase, info->driver_entry1, hdrsz);

	mov	r8, QWORD PTR hdrsz$[rbp]
	mov	rax, QWORD PTR info$[rbp]
	mov	rdx, QWORD PTR [rax+114]
	mov	rcx, QWORD PTR imageBase$[rbp]
	call	memcpy

; 271  : 
; 272  : 	for (size_t i = 0; i < ntHeaders->FileHeader.NumberOfSections; i++) {

	mov	QWORD PTR i$2[rbp], 0
	jmp	SHORT $LN7@AuInitiali
$LN5@AuInitiali:
	mov	rax, QWORD PTR i$2[rbp]
	inc	rax
	mov	QWORD PTR i$2[rbp], rax
$LN7@AuInitiali:
	mov	rax, QWORD PTR ntHeaders$[rbp]
	movzx	eax, WORD PTR [rax+6]
	cmp	QWORD PTR i$2[rbp], rax
	jae	$LN6@AuInitiali

; 273  : 		size_t load_addr = imageBase + secthdr[i].VirtualAddress;

	imul	rax, QWORD PTR i$2[rbp], 40		; 00000028H
	mov	rcx, QWORD PTR secthdr$[rbp]
	mov	eax, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR imageBase$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR load_addr$3[rbp], rax

; 274  : 		size_t sectSize = secthdr[i].SizeOfRawData;

	imul	rax, QWORD PTR i$2[rbp], 40		; 00000028H
	mov	rcx, QWORD PTR secthdr$[rbp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	QWORD PTR sectSize$4[rbp], rax

; 275  : 		for (int j = 0; j < sectSize / 4096 + 4; j++)

	mov	DWORD PTR j$5[rbp], 0
	jmp	SHORT $LN10@AuInitiali
$LN8@AuInitiali:
	mov	eax, DWORD PTR j$5[rbp]
	inc	eax
	mov	DWORD PTR j$5[rbp], eax
$LN10@AuInitiali:
	movsxd	rax, DWORD PTR j$5[rbp]
	mov	QWORD PTR tv143[rbp], rax
	xor	edx, edx
	mov	rax, QWORD PTR sectSize$4[rbp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	add	rax, 4
	mov	rcx, QWORD PTR tv143[rbp]
	cmp	rcx, rax
	jae	SHORT $LN9@AuInitiali

; 276  : 			AuMapPage((uint64_t)AuPmmngrAlloc(), load_addr + j * 4096, NULL);

	imul	eax, DWORD PTR j$5[rbp], 4096		; 00001000H
	cdqe
	mov	rcx, QWORD PTR load_addr$3[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv151[rbp], rax
	call	AuPmmngrAlloc
	xor	r8d, r8d
	mov	rcx, QWORD PTR tv151[rbp]
	mov	rdx, rcx
	mov	rcx, rax
	call	AuMapPage
	jmp	SHORT $LN8@AuInitiali
$LN9@AuInitiali:

; 277  : 
; 278  : 		memcpy((void*)load_addr, raw_offset<void*>(info->driver_entry1, secthdr[i].PointerToRawData), secthdr[i].SizeOfRawData);

	imul	rax, QWORD PTR i$2[rbp], 40		; 00000028H
	mov	rcx, QWORD PTR secthdr$[rbp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv157[rbp], rax
	imul	rcx, QWORD PTR i$2[rbp], 40		; 00000028H
	mov	rdx, QWORD PTR secthdr$[rbp]
	mov	edx, DWORD PTR [rdx+rcx+20]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+114]
	call	??$raw_offset@PEAXPEAE@@YAPEAXPEAEH@Z	; raw_offset<void *,unsigned char *>
	mov	rcx, QWORD PTR tv157[rbp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR load_addr$3[rbp]
	call	memcpy

; 279  : 	}

	jmp	$LN5@AuInitiali
$LN6@AuInitiali:

; 280  : 
; 281  : 	AuKernelLinkImports((void*)imageBase);

	mov	rcx, QWORD PTR imageBase$[rbp]
	call	?AuKernelLinkImports@@YAXPEAX@Z		; AuKernelLinkImports

; 282  : 	AuKernelLinkDLL((void*)imageBase);

	mov	rcx, QWORD PTR imageBase$[rbp]
	call	?AuKernelLinkDLL@@YAXPEAX@Z		; AuKernelLinkDLL

; 283  : 	
; 284  : 	ACPI_STATUS status = AcpiInitializeSubsystem();

	call	QWORD PTR __imp_AcpiInitializeSubsystem
	mov	DWORD PTR status$[rbp], eax

; 285  : 	if (ACPI_FAILURE(status))

	cmp	DWORD PTR status$[rbp], 0
	je	SHORT $LN11@AuInitiali

; 286  : 		AuTextOut("Failed to initialise acpi subsystem \n");

	lea	rcx, OFFSET FLAT:??_C@_0CG@JKBHOOKC@Failed?5to?5initialise?5acpi?5subsy@
	call	AuTextOut
$LN11@AuInitiali:

; 287  : 	status = AcpiLoadTables();

	call	QWORD PTR __imp_AcpiLoadTables
	mov	DWORD PTR status$[rbp], eax

; 288  : 	if (ACPI_FAILURE(status))

	cmp	DWORD PTR status$[rbp], 0
	je	SHORT $LN12@AuInitiali

; 289  : 		AuTextOut("Failed to load acpi tables \n");

	lea	rcx, OFFSET FLAT:??_C@_0BN@HKOKFJKN@Failed?5to?5load?5acpi?5tables?5?6@
	call	AuTextOut
$LN12@AuInitiali:

; 290  : }

	lea	rsp, QWORD PTR [rbp+160]
	pop	rbp
	ret	0
?AuInitialiseACPISubsys@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ENDP ; AuInitialiseACPISubsys
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuACPIGetRSDP@@YAPEAXXZ
_TEXT	SEGMENT
?AuACPIGetRSDP@@YAPEAXXZ PROC				; AuACPIGetRSDP, COMDAT

; 251  : void* AuACPIGetRSDP() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 252  : 	return __ACPIRSDP;

	mov	rax, QWORD PTR ?__ACPIRSDP@@3PEAXEA	; __ACPIRSDP

; 253  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuACPIGetRSDP@@YAPEAXXZ ENDP				; AuACPIGetRSDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuACPIPCIESupported@@YA_NXZ
_TEXT	SEGMENT
?AuACPIPCIESupported@@YA_NXZ PROC			; AuACPIPCIESupported, COMDAT

; 243  : bool AuACPIPCIESupported() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 244  : 	return __PCIESupported;

	movzx	eax, BYTE PTR ?__PCIESupported@@3_NA	; __PCIESupported

; 245  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuACPIPCIESupported@@YA_NXZ ENDP			; AuACPIPCIESupported
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ
_TEXT	SEGMENT
?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ PROC			; AuACPIGetMCFG, COMDAT

; 235  : acpiMcfg *AuACPIGetMCFG() {

$LN3:
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 236  : 	return __AuroraBasicAcpi->mcfg;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+33]

; 237  : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?AuACPIGetMCFG@@YAPEAUacpiMcfg@@XZ ENDP			; AuACPIGetMCFG
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuACPIInitialise@@YAXPEAX@Z
_TEXT	SEGMENT
rsdp$ = 0
rsdt$ = 8
xsdt$ = 16
sig$ = 24
entries$ = 32
header$ = 40
count$1 = 48
S5Block$2 = 56
acpi_base$ = 144
?AuACPIInitialise@@YAXPEAX@Z PROC			; AuACPIInitialise, COMDAT

; 153  : void AuACPIInitialise(void* acpi_base) {

$LN25:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 160				; 000000a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 154  : 	__AuroraBasicAcpi = (AuroraBasicACPI*)kmalloc(sizeof(AuroraBasicACPI));

	mov	ecx, 46					; 0000002eH
	call	kmalloc
	mov	QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA, rax ; __AuroraBasicAcpi

; 155  : 	memset(__AuroraBasicAcpi, 0, sizeof(AuroraBasicACPI));

	mov	r8d, 46					; 0000002eH
	xor	edx, edx
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	call	memset

; 156  : 	__ACPIRSDP = acpi_base;

	mov	rax, QWORD PTR acpi_base$[rbp]
	mov	QWORD PTR ?__ACPIRSDP@@3PEAXEA, rax	; __ACPIRSDP

; 157  : 	acpiRsdp *rsdp = (acpiRsdp*)acpi_base;

	mov	rax, QWORD PTR acpi_base$[rbp]
	mov	QWORD PTR rsdp$[rbp], rax

; 158  : 	acpiRsdt* rsdt = (acpiRsdt*)rsdp->rsdtAddr;

	mov	rax, QWORD PTR rsdp$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	QWORD PTR rsdt$[rbp], rax

; 159  : 	acpiXsdt* xsdt = (acpiXsdt*)rsdp->xsdtAddr;

	mov	rax, QWORD PTR rsdp$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR xsdt$[rbp], rax

; 160  : 	char sig[5];
; 161  : 	int entries = (rsdt->header.length - sizeof(rsdt->header)) / 4;

	mov	rax, QWORD PTR rsdt$[rbp]
	mov	eax, DWORD PTR [rax+4]
	sub	rax, 36					; 00000024H
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	DWORD PTR entries$[rbp], eax

; 162  : 	acpiSysDescHeader* header = NULL;

	mov	QWORD PTR header$[rbp], 0

; 163  : 	__PCIESupported = false;

	mov	BYTE PTR ?__PCIESupported@@3_NA, 0	; __PCIESupported

; 164  : 
; 165  : 	for (int count = 0; count < entries; count++) {

	mov	DWORD PTR count$1[rbp], 0
	jmp	SHORT $LN4@AuACPIInit
$LN2@AuACPIInit:
	mov	eax, DWORD PTR count$1[rbp]
	inc	eax
	mov	DWORD PTR count$1[rbp], eax
$LN4@AuACPIInit:
	mov	eax, DWORD PTR entries$[rbp]
	cmp	DWORD PTR count$1[rbp], eax
	jge	$LN3@AuACPIInit

; 166  : 		header = (acpiSysDescHeader*)rsdt->entry[count];

	movsxd	rax, DWORD PTR count$1[rbp]
	mov	rcx, QWORD PTR rsdt$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4+36]
	mov	QWORD PTR header$[rbp], rax

; 167  : 		strncpy(sig, header->signature, 4);

	mov	rax, QWORD PTR header$[rbp]
	mov	r8d, 4
	mov	rdx, rax
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncpy

; 168  : 		sig[4] = '\0';

	mov	eax, 1
	imul	rax, rax, 4
	mov	BYTE PTR sig$[rbp+rax], 0

; 169  : 
; 170  : 		if (!strncmp(sig, ACPI_SIG_FADT, strlen(ACPI_SIG_FADT))) {

	lea	rcx, OFFSET FLAT:??_C@_04FKBPEJO@FACP@
	call	strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_04FKBPEJO@FACP@
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN5@AuACPIInit

; 171  : 			__AuroraBasicAcpi->fadt = (acpiFadt*)header;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR header$[rbp]
	mov	QWORD PTR [rax+9], rcx

; 172  : 			AuTextOut("acpi fadt supported \n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@OJKENPPK@acpi?5fadt?5supported?5?6@
	call	AuTextOut

; 173  : 		}

	jmp	$LN6@AuACPIInit
$LN5@AuACPIInit:

; 174  : 
; 175  : 		else if (!strncmp(sig, ACPI_SIG_APIC, strlen("CIPA"))) {

	lea	rcx, OFFSET FLAT:??_C@_04EFEMGNDI@CIPA@
	call	strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_04DDFMNMDA@APIC@
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN7@AuACPIInit

; 176  : 			__AuroraBasicAcpi->madt = (acpiMadt*)header;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR header$[rbp]
	mov	QWORD PTR [rax+1], rcx

; 177  : 			AuTextOut("acpi madt supported \n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@FMCOMLOA@acpi?5madt?5supported?5?6@
	call	AuTextOut

; 178  : 		}

	jmp	$LN8@AuACPIInit
$LN7@AuACPIInit:

; 179  : 		else if (!strncmp(sig, ACPI_SIG_SRAT, strlen(ACPI_SIG_SRAT))) {

	lea	rcx, OFFSET FLAT:??_C@_04IIOFAFHH@SRAT@
	call	strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_04IIOFAFHH@SRAT@
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN9@AuACPIInit

; 180  : 			AuTextOut("acpi srat supported \n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@PGDDJOOM@acpi?5srat?5supported?5?6@
	call	AuTextOut

; 181  : 			/* here needs to parse the srat table for
; 182  : 			 * numa memory */
; 183  : 		}

	jmp	$LN10@AuACPIInit
$LN9@AuACPIInit:

; 184  : 		else if (!strncmp(sig, ACPI_SIG_SLIT, strlen(ACPI_SIG_SLIT))) {

	lea	rcx, OFFSET FLAT:??_C@_04DGDAHEGD@SLIT@
	call	strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_04DGDAHEGD@SLIT@
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN11@AuACPIInit

; 185  : 			AuTextOut("acpi slit supported \n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@PPBPJKFO@acpi?5slit?5supported?5?6@
	call	AuTextOut

; 186  : 		}

	jmp	$LN12@AuACPIInit
$LN11@AuACPIInit:

; 187  : 		else if (!strncmp(sig, ACPI_SIG_MCFG, strlen(ACPI_SIG_MCFG))) {

	lea	rcx, OFFSET FLAT:??_C@_04NLDAELHJ@MCFG@
	call	strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_04NLDAELHJ@MCFG@
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN13@AuACPIInit

; 188  : 			AuTextOut("acpi mcfg supported \n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@GJNLEGKF@acpi?5mcfg?5supported?5?6@
	call	AuTextOut

; 189  : 			__AuroraBasicAcpi->mcfg = (acpiMcfg*)header;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR header$[rbp]
	mov	QWORD PTR [rax+33], rcx

; 190  : 			__PCIESupported = true;

	mov	BYTE PTR ?__PCIESupported@@3_NA, 1	; __PCIESupported

; 191  : 		}

	jmp	SHORT $LN14@AuACPIInit
$LN13@AuACPIInit:

; 192  : 		else if (!strncmp(sig, ACPI_SIG_HPET, strlen(ACPI_SIG_HPET))) {

	lea	rcx, OFFSET FLAT:??_C@_04DCNFMDLD@HPET@
	call	strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_04DCNFMDLD@HPET@
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN15@AuACPIInit

; 193  : 			AuTextOut("acpi hpet supported \n");

	lea	rcx, OFFSET FLAT:??_C@_0BG@FJDEFDIL@acpi?5hpet?5supported?5?6@
	call	AuTextOut

; 194  : 		}

	jmp	SHORT $LN16@AuACPIInit
$LN15@AuACPIInit:

; 195  : 		else if (!strncmp(sig, ACPI_SIG_MCHI, strlen(ACPI_SIG_MCHI))) {

	lea	rcx, OFFSET FLAT:??_C@_04EPCNELPN@MCHI@
	call	strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_04EPCNELPN@MCHI@
	lea	rcx, QWORD PTR sig$[rbp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN17@AuACPIInit

; 196  : 			AuTextOut("acpi management controller host interface supported\n");

	lea	rcx, OFFSET FLAT:??_C@_0DF@PJODNDG@acpi?5management?5controller?5host@
	call	AuTextOut
$LN17@AuACPIInit:
$LN16@AuACPIInit:
$LN14@AuACPIInit:
$LN12@AuACPIInit:
$LN10@AuACPIInit:
$LN8@AuACPIInit:
$LN6@AuACPIInit:

; 197  : 		}
; 198  : 	}

	jmp	$LN2@AuACPIInit
$LN3@AuACPIInit:

; 199  : 
; 200  : 	if (__AuroraBasicAcpi->fadt && __AuroraBasicAcpi->fadt->facsAddr) 

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	cmp	QWORD PTR [rax+9], 0
	je	SHORT $LN18@AuACPIInit
	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN18@AuACPIInit

; 201  : 		__AuroraBasicAcpi->facs = (acpiFacs*)__AuroraBasicAcpi->fadt->facsAddr;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	mov	eax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	QWORD PTR [rcx+17], rax
$LN18@AuACPIInit:

; 202  : 
; 203  : 	if (__AuroraBasicAcpi->fadt && __AuroraBasicAcpi->fadt->dsdtAddr) {

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	cmp	QWORD PTR [rax+9], 0
	je	$LN19@AuACPIInit
	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+40], 0
	je	$LN19@AuACPIInit

; 204  : 		__AuroraBasicAcpi->dsdt = (acpiDsdt*)__AuroraBasicAcpi->fadt->dsdtAddr;

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	QWORD PTR [rcx+25], rax

; 205  : 		AuHalRegisterIRQ(__AuroraBasicAcpi->fadt->sciInt, AuFADTHandler, __AuroraBasicAcpi->fadt->sciInt, false);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR [rcx+9]
	movzx	ecx, WORD PTR [rcx+46]
	xor	r9d, r9d
	movzx	r8d, BYTE PTR [rax+46]
	lea	rdx, OFFSET FLAT:?AuFADTHandler@@YAX_KPEAX@Z ; AuFADTHandler
	call	AuHalRegisterIRQ

; 206  : 
; 207  : 		uint8_t *S5Block = search_s5(__AuroraBasicAcpi->dsdt);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR [rax+25]
	call	?search_s5@@YAPEAEPEAUacpiDsdt@@@Z	; search_s5
	mov	QWORD PTR S5Block$2[rbp], rax

; 208  : 		if (S5Block) {

	cmp	QWORD PTR S5Block$2[rbp], 0
	je	$LN20@AuACPIInit

; 209  : 			S5Block += 4;

	mov	rax, QWORD PTR S5Block$2[rbp]
	add	rax, 4
	mov	QWORD PTR S5Block$2[rbp], rax

; 210  : 			S5Block += ((*S5Block & 0xC0) >> 6) + 2;

	mov	rax, QWORD PTR S5Block$2[rbp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	sar	eax, 6
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR S5Block$2[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR S5Block$2[rbp], rax

; 211  : 
; 212  : 			if (*S5Block == 0x0A)

	mov	rax, QWORD PTR S5Block$2[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN21@AuACPIInit

; 213  : 				S5Block++;

	mov	rax, QWORD PTR S5Block$2[rbp]
	inc	rax
	mov	QWORD PTR S5Block$2[rbp], rax
$LN21@AuACPIInit:

; 214  : 			__AuroraBasicAcpi->slp_typa = *S5Block;

	mov	rax, QWORD PTR S5Block$2[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	WORD PTR [rcx+41], ax

; 215  : 			S5Block++;

	mov	rax, QWORD PTR S5Block$2[rbp]
	inc	rax
	mov	QWORD PTR S5Block$2[rbp], rax

; 216  : 
; 217  : 			if(*S5Block == 0x0A)

	mov	rax, QWORD PTR S5Block$2[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN22@AuACPIInit

; 218  : 				S5Block++;

	mov	rax, QWORD PTR S5Block$2[rbp]
	inc	rax
	mov	QWORD PTR S5Block$2[rbp], rax
$LN22@AuACPIInit:

; 219  : 
; 220  : 			__AuroraBasicAcpi->slp_typb = *S5Block;

	mov	rax, QWORD PTR S5Block$2[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	WORD PTR [rcx+43], ax
$LN20@AuACPIInit:
$LN19@AuACPIInit:

; 221  : 
; 222  : 		}
; 223  : 	}
; 224  : 
; 225  : 	if (__AuroraBasicAcpi->madt)

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	cmp	QWORD PTR [rax+1], 0
	je	SHORT $LN23@AuACPIInit

; 226  : 		AuACPIParseMADT();

	call	?AuACPIParseMADT@@YAXXZ			; AuACPIParseMADT
$LN23@AuACPIInit:

; 227  : 
; 228  : 	AuACPIEnable();

	call	?AuACPIEnable@@YAXXZ			; AuACPIEnable

; 229  : }

	lea	rsp, QWORD PTR [rbp+128]
	pop	rbp
	ret	0
?AuACPIInitialise@@YAXPEAX@Z ENDP			; AuACPIInitialise
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Hal\basicacpi.cpp
;	COMDAT ?AuACPIEnable@@YAXXZ
_TEXT	SEGMENT
word$ = 0
word_1$ = 4
word_3$1 = 8
?AuACPIEnable@@YAXXZ PROC				; AuACPIEnable, COMDAT

; 64   : void AuACPIEnable() {

$LN9:
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3F0F154D_basicacpi@cpp
	call	__CheckForDebuggerJustMyCode

; 65   : 	if (!__AuroraBasicAcpi->fadt || !__AuroraBasicAcpi->fadt->pm1aCtrlBlock) {

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	cmp	QWORD PTR [rax+9], 0
	je	SHORT $LN3@AuACPIEnab
	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+64], 0
	jne	SHORT $LN2@AuACPIEnab
$LN3@AuACPIEnab:

; 66   : 		AuTextOut("[ACPI]: Data structures incomplete \n");

	lea	rcx, OFFSET FLAT:??_C@_0CF@EIFLIELN@?$FLACPI?$FN?3?5Data?5structures?5incompl@
	call	AuTextOut

; 67   : 		return;

	jmp	$LN1@AuACPIEnab
$LN2@AuACPIEnab:

; 68   : 	}
; 69   : 
; 70   : 	uint16_t word = x64_inportw(__AuroraBasicAcpi->fadt->pm1aCtrlBlock);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	movzx	ecx, WORD PTR [rax+64]
	call	x64_inportw
	mov	WORD PTR word$[rbp], ax

; 71   : 	if ((word & ACPI_PMCTRL_SCI_EN) == 1) {

	movzx	eax, WORD PTR word$[rbp]
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN4@AuACPIEnab

; 72   : 		AuTextOut("[ACPI]: Already enabled \n");

	lea	rcx, OFFSET FLAT:??_C@_0BK@IENMAIKJ@?$FLACPI?$FN?3?5Already?5enabled?5?6@
	call	AuTextOut

; 73   : 		return;

	jmp	$LN1@AuACPIEnab
$LN4@AuACPIEnab:

; 74   : 	}
; 75   : 
; 76   : 	x64_outportb(__AuroraBasicAcpi->fadt->sciCmdPort, __AuroraBasicAcpi->fadt->acpiEnable);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	mov	rcx, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rcx, QWORD PTR [rcx+9]
	movzx	edx, BYTE PTR [rax+52]
	movzx	ecx, WORD PTR [rcx+48]
	call	x64_outportb

; 77   : 	uint16_t word_1 = x64_inportw(__AuroraBasicAcpi->fadt->pm1aCtrlBlock);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	movzx	ecx, WORD PTR [rax+64]
	call	x64_inportw
	mov	WORD PTR word_1$[rbp], ax

; 78   : 	if ((word_1 & ACPI_PMCTRL_SCI_EN) == 1)

	movzx	eax, WORD PTR word_1$[rbp]
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN5@AuACPIEnab

; 79   : 		AuTextOut("ACPI Enabled successfully\n");

	lea	rcx, OFFSET FLAT:??_C@_0BL@LCNOKLDO@ACPI?5Enabled?5successfully?6@
	call	AuTextOut
$LN5@AuACPIEnab:

; 80   : 
; 81   : 	if (__AuroraBasicAcpi->fadt->pm1bCtrlBlock) {

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+68], 0
	je	SHORT $LN6@AuACPIEnab

; 82   : 		uint16_t word_3 = x64_inportw(__AuroraBasicAcpi->fadt->pm1bCtrlBlock);

	mov	rax, QWORD PTR ?__AuroraBasicAcpi@@3PEAU_aurora_acpi_@@EA ; __AuroraBasicAcpi
	mov	rax, QWORD PTR [rax+9]
	movzx	ecx, WORD PTR [rax+68]
	call	x64_inportw
	mov	WORD PTR word_3$1[rbp], ax

; 83   : 		if ((word_3 & ACPI_PMCTRL_SCI_EN) == 1)

	movzx	eax, WORD PTR word_3$1[rbp]
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN7@AuACPIEnab

; 84   : 			AuTextOut("ACPI Enabled successfully\n");

	lea	rcx, OFFSET FLAT:??_C@_0BL@LCNOKLDO@ACPI?5Enabled?5successfully?6@
	call	AuTextOut
$LN7@AuACPIEnab:
$LN6@AuACPIEnab:

; 85   : 
; 86   : 	}
; 87   : 
; 88   : 	AuACPIPowerButtonEnable();

	call	?AuACPIPowerButtonEnable@@YAXXZ		; AuACPIPowerButtonEnable
$LN1@AuACPIEnab:

; 89   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuACPIEnable@@YAXXZ ENDP				; AuACPIEnable
_TEXT	ENDS
END
