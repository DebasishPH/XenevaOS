; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__BF7302FE_ps2kybrd@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?AuPS2KybrdHandler@@YAX_KPEAX@Z			; AuPS2KybrdHandler
PUBLIC	?AuPS2KybrdInitialize@@YAXXZ			; AuPS2KybrdInitialize
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_04PJHBAHNI@?1dev@				; `string'
PUBLIC	??_C@_09BOJJHODL@?1ps2kybrd@			; `string'
PUBLIC	??_C@_0O@NPHEJAME@?1dev?1ps2kybrd@		; `string'
EXTRN	AuHalRegisterIRQ:PROC
EXTRN	AuInterruptEnd:PROC
EXTRN	AuVFSFind:PROC
EXTRN	x64_inportb:PROC
EXTRN	x64_outportb:PROC
EXTRN	?AuDevFSCreateFile@@YAHPEAU__VFS_NODE__@@PEADE@Z:PROC ; AuDevFSCreateFile
EXTRN	?AuDevFSOpen@@YAPEAU__VFS_NODE__@@PEAU1@PEAD@Z:PROC ; AuDevFSOpen
EXTRN	memset:PROC
EXTRN	AuDevWriteKybrd:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPS2KybrdHandler@@YAX_KPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$?AuPS2KybrdHandler@@YAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuPS2KybrdInitialize@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?AuPS2KybrdInitialize@@YAXXZ
pdata	ENDS
;	COMDAT ??_C@_0O@NPHEJAME@?1dev?1ps2kybrd@
CONST	SEGMENT
??_C@_0O@NPHEJAME@?1dev?1ps2kybrd@ DB '/dev/ps2kybrd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BOJJHODL@?1ps2kybrd@
CONST	SEGMENT
??_C@_09BOJJHODL@?1ps2kybrd@ DB '/ps2kybrd', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJHBAHNI@?1dev@
CONST	SEGMENT
??_C@_04PJHBAHNI@?1dev@ DB '/dev', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPS2KybrdInitialize@@YAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuPS2KybrdHandler@@YAX_KPEAX@Z DD 025041701H
	DD	01122317H
	DD	0500b0012H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Drivers\ps2kybrd.cpp
;	COMDAT ?AuPS2KybrdInitialize@@YAXXZ
_TEXT	SEGMENT
fs$ = 0
kybrd$ = 8
?AuPS2KybrdInitialize@@YAXXZ PROC			; AuPS2KybrdInitialize, COMDAT

; 68   : void AuPS2KybrdInitialize() {

$LN3:
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__BF7302FE_ps2kybrd@cpp
	call	__CheckForDebuggerJustMyCode

; 69   : 	AuHalRegisterIRQ(1, AuPS2KybrdHandler, 1, false);

	xor	r9d, r9d
	mov	r8b, 1
	lea	rdx, OFFSET FLAT:?AuPS2KybrdHandler@@YAX_KPEAX@Z ; AuPS2KybrdHandler
	mov	ecx, 1
	call	AuHalRegisterIRQ

; 70   : 
; 71   : 	x64_outportb(0xF0, 1);

	mov	dl, 1
	mov	cx, 240					; 000000f0H
	call	x64_outportb

; 72   : 	/* start the registration process */
; 73   : 	AuVFSNode* fs = AuVFSFind("/dev");

	lea	rcx, OFFSET FLAT:??_C@_04PJHBAHNI@?1dev@
	call	AuVFSFind
	mov	QWORD PTR fs$[rbp], rax

; 74   : 	AuDevFSCreateFile(fs, "/ps2kybrd", FS_FLAG_DEVICE);

	mov	r8b, 8
	lea	rdx, OFFSET FLAT:??_C@_09BOJJHODL@?1ps2kybrd@
	mov	rcx, QWORD PTR fs$[rbp]
	call	?AuDevFSCreateFile@@YAHPEAU__VFS_NODE__@@PEADE@Z ; AuDevFSCreateFile

; 75   : 	AuVFSNode* kybrd = AuDevFSOpen(fs, "/dev/ps2kybrd");

	lea	rdx, OFFSET FLAT:??_C@_0O@NPHEJAME@?1dev?1ps2kybrd@
	mov	rcx, QWORD PTR fs$[rbp]
	call	?AuDevFSOpen@@YAPEAU__VFS_NODE__@@PEAU1@PEAD@Z ; AuDevFSOpen
	mov	QWORD PTR kybrd$[rbp], rax

; 76   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuPS2KybrdInitialize@@YAXXZ ENDP			; AuPS2KybrdInitialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Drivers\ps2kybrd.cpp
;	COMDAT ?AuPS2KybrdHandler@@YAX_KPEAX@Z
_TEXT	SEGMENT
code$1 = 0
msg$2 = 8
v$ = 128
p$ = 136
?AuPS2KybrdHandler@@YAX_KPEAX@Z PROC			; AuPS2KybrdHandler, COMDAT

; 46   : void AuPS2KybrdHandler(size_t v, void* p) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__BF7302FE_ps2kybrd@cpp
	call	__CheckForDebuggerJustMyCode

; 47   : 	if (x64_inportb(0x64) & 1) {

	mov	cx, 100					; 00000064H
	call	x64_inportb
	movzx	eax, al
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@AuPS2Kybrd

; 48   : 		int code = x64_inportb(0x60);

	mov	cx, 96					; 00000060H
	call	x64_inportb
	movzx	eax, al
	mov	DWORD PTR code$1[rbp], eax

; 49   : 
; 50   : 		/* for testing purpose lets send 
; 51   : 		 * a signal to deodhai thread which is
; 52   : 		 * in thread id 4, in a hacky way
; 53   : 		 */
; 54   : 		AuInputMessage msg;
; 55   : 		memset(&msg, 0, sizeof(AuInputMessage));

	mov	r8d, 26
	xor	edx, edx
	lea	rcx, QWORD PTR msg$2[rbp]
	call	memset

; 56   : 		msg.type = AU_INPUT_KEYBOARD;

	mov	BYTE PTR msg$2[rbp], 2

; 57   : 		msg.code = code;

	mov	eax, DWORD PTR code$1[rbp]
	mov	DWORD PTR msg$2[rbp+10], eax

; 58   : 		AuDevWriteKybrd(&msg);

	lea	rcx, QWORD PTR msg$2[rbp]
	call	AuDevWriteKybrd
$LN2@AuPS2Kybrd:

; 59   : 		
; 60   : 	}
; 61   : 	AuInterruptEnd(1);

	mov	cl, 1
	call	AuInterruptEnd

; 62   : }

	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?AuPS2KybrdHandler@@YAX_KPEAX@Z ENDP			; AuPS2KybrdHandler
_TEXT	ENDS
END
