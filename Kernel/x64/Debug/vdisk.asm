; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?VdiskArray@@3PAPEAU_VDISK_@@A			; VdiskArray
_BSS	SEGMENT
?VdiskArray@@3PAPEAU_VDISK_@@A DQ 01aH DUP (?)		; VdiskArray
_BSS	ENDS
msvcjmc	SEGMENT
__E5A64090_vdisk@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?AuVDiskInitialise@@YAXXZ			; AuVDiskInitialise
PUBLIC	AuVDiskGetIndex
PUBLIC	AuVDiskRegister
PUBLIC	AuCreateVDisk
PUBLIC	AuVDiskRead
PUBLIC	AuVDiskWrite
PUBLIC	AuVDiskDestroy
PUBLIC	?AuGetVDiskInfo@@YAHEPEAX@Z			; AuGetVDiskInfo
PUBLIC	?AuGetVDiskPartitionInfo@@YAHEEPEAX@Z		; AuGetVDiskPartitionInfo
PUBLIC	?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z	; AuVDiskRegisterPartition
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_08BOGKMBPC@EFI?5PART@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0CJ@JIAAONDN@VDisk?5partition?5created?5startLB@ ; `string'
PUBLIC	??_C@_0BI@HLBBEFGK@vDisk?5partition?5guid?5?3?5@ ; `string'
PUBLIC	??_C@_0BC@KGAAOHKL@0x?$CFx?90x?$CFx?90x?$CFx?90x@ ; `string'
PUBLIC	??_C@_02NJNOFBBI@?$CFx@				; `string'
PUBLIC	??_C@_0CM@EOIAENHA@Vdisk?5registered?5name?5?9?$DO?5?$CFs?0?5se@ ; `string'
PUBLIC	??_C@_0BK@KEOIEEBA@FILE?5SYSTEM?5NAME?5?9?$DO?5?$CFs?5?$AN?6@ ; `string'
EXTRN	?AuGPTInitialise_FileSystem@@YAXPEAU_VDISK_@@@Z:PROC ; AuGPTInitialise_FileSystem
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	AuTextOut:PROC
EXTRN	strcmp:PROC
EXTRN	strcpy:PROC
EXTRN	memset:PROC
EXTRN	SeTextOut:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuPmmngrFree:PROC
EXTRN	x64_cli:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuVDiskInitialise@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+73
	DD	imagerel $unwind$?AuVDiskInitialise@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuVDiskGetIndex DD imagerel $LN7
	DD	imagerel $LN7+79
	DD	imagerel $unwind$AuVDiskGetIndex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuVDiskRegister DD imagerel $LN4
	DD	imagerel $LN4+130
	DD	imagerel $unwind$AuVDiskRegister
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuCreateVDisk DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$AuCreateVDisk
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuVDiskRead DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$AuVDiskRead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuVDiskWrite DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$AuVDiskWrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AuVDiskDestroy DD imagerel $LN7
	DD	imagerel $LN7+129
	DD	imagerel $unwind$AuVDiskDestroy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuGetVDiskInfo@@YAHEPEAX@Z DD imagerel $LN5
	DD	imagerel $LN5+200
	DD	imagerel $unwind$?AuGetVDiskInfo@@YAHEPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuGetVDiskPartitionInfo@@YAHEEPEAX@Z DD imagerel $LN12
	DD	imagerel $LN12+401
	DD	imagerel $unwind$?AuGetVDiskPartitionInfo@@YAHEEPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z DD imagerel $LN23
	DD	imagerel $LN23+874
	DD	imagerel $unwind$?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z
pdata	ENDS
;	COMDAT ??_C@_0BK@KEOIEEBA@FILE?5SYSTEM?5NAME?5?9?$DO?5?$CFs?5?$AN?6@
CONST	SEGMENT
??_C@_0BK@KEOIEEBA@FILE?5SYSTEM?5NAME?5?9?$DO?5?$CFs?5?$AN?6@ DB 'FILE SY'
	DB	'STEM NAME -> %s ', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EOIAENHA@Vdisk?5registered?5name?5?9?$DO?5?$CFs?0?5se@
CONST	SEGMENT
??_C@_0CM@EOIAENHA@Vdisk?5registered?5name?5?9?$DO?5?$CFs?0?5se@ DB 'Vdis'
	DB	'k registered name -> %s, serial -> %s ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJNOFBBI@?$CFx@
CONST	SEGMENT
??_C@_02NJNOFBBI@?$CFx@ DB '%x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KGAAOHKL@0x?$CFx?90x?$CFx?90x?$CFx?90x@
CONST	SEGMENT
??_C@_0BC@KGAAOHKL@0x?$CFx?90x?$CFx?90x?$CFx?90x@ DB '0x%x-0x%x-0x%x-0x', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HLBBEFGK@vDisk?5partition?5guid?5?3?5@
CONST	SEGMENT
??_C@_0BI@HLBBEFGK@vDisk?5partition?5guid?5?3?5@ DB 'vDisk partition guid'
	DB	' : ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JIAAONDN@VDisk?5partition?5created?5startLB@
CONST	SEGMENT
??_C@_0CJ@JIAAONDN@VDisk?5partition?5created?5startLB@ DB 'VDisk partitio'
	DB	'n created startLBA -> %d ', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BOGKMBPC@EFI?5PART@
CONST	SEGMENT
??_C@_08BOGKMBPC@EFI?5PART@ DB 'EFI PART', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z DD 025041201H
	DD	010d2312H
	DD	050060016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuGetVDiskPartitionInfo@@YAHEEPEAX@Z DD 025031a01H
	DD	0f215231aH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuGetVDiskInfo@@YAHEPEAX@Z DD 025031301H
	DD	0d20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuVDiskDestroy DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuVDiskWrite DD 025031e01H
	DD	0b219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuVDiskRead DD 025031e01H
	DD	0b219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuCreateVDisk DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuVDiskRegister DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AuVDiskGetIndex DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AuVDiskInitialise@@YAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT ?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z
_TEXT	SEGMENT
buffer$ = 0
aligned_buf$ = 8
header$ = 16
i$1 = 24
part_lba$ = 32
i$2 = 40
part$3 = 48
m$4 = 56
m$5 = 60
j$6 = 64
k$7 = 68
vdisk$ = 160
?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z PROC	; AuVDiskRegisterPartition, COMDAT

; 107  : void AuVDiskRegisterPartition(AuVDisk* vdisk){

$LN23:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 176				; 000000b0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 108  : 	uint64_t* buffer = (uint64_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR buffer$[rbp], rax

; 109  : 	memset(buffer, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR buffer$[rbp]
	call	memset

; 110  : 	vdisk->Read(vdisk,1, 1, buffer);

	mov	r9, QWORD PTR buffer$[rbp]
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	rax, QWORD PTR vdisk$[rbp]
	call	QWORD PTR [rax+142]

; 111  : 	uint8_t* aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	mov	QWORD PTR aligned_buf$[rbp], rax

; 112  : 
; 113  : 	GPTHeader* header = (GPTHeader*)aligned_buf;

	mov	rax, QWORD PTR aligned_buf$[rbp]
	mov	QWORD PTR header$[rbp], rax

; 114  : 
; 115  : 	/* check if it's Efi partition */
; 116  : 	if (strcmp(header->sig, "EFI PART") != 0)

	mov	rax, QWORD PTR header$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_08BOGKMBPC@EFI?5PART@
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	je	SHORT $LN20@AuVDiskReg

; 117  : 		return;

	jmp	$LN1@AuVDiskReg
$LN20@AuVDiskReg:

; 118  : 	for (int i = 0; i < 8; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuVDiskReg
$LN2@AuVDiskReg:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuVDiskReg:
	cmp	DWORD PTR i$1[rbp], 8
	jge	SHORT $LN3@AuVDiskReg

; 119  : 		SeTextOut("%c", aligned_buf[i]);

	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR aligned_buf$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	call	SeTextOut
	jmp	SHORT $LN2@AuVDiskReg
$LN3@AuVDiskReg:

; 120  : 
; 121  : 	uint64_t part_lba = header->part_table_lba;

	mov	rax, QWORD PTR header$[rbp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR part_lba$[rbp], rax

; 122  : 	vdisk->num_partition = header->num_part_entries;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR header$[rbp]
	movzx	ecx, BYTE PTR [rcx+80]
	mov	BYTE PTR [rax+85], cl

; 123  : 	for (int i = 0; i < header->num_part_entries; i++) {

	mov	DWORD PTR i$2[rbp], 0
	jmp	SHORT $LN7@AuVDiskReg
$LN5@AuVDiskReg:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN7@AuVDiskReg:
	mov	rax, QWORD PTR header$[rbp]
	mov	eax, DWORD PTR [rax+80]
	cmp	DWORD PTR i$2[rbp], eax
	jae	$LN6@AuVDiskReg

; 124  : 		memset(buffer, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR buffer$[rbp]
	call	memset

; 125  : 		vdisk->Read(vdisk, part_lba, 1, buffer);

	mov	r9, QWORD PTR buffer$[rbp]
	mov	r8d, 1
	mov	rdx, QWORD PTR part_lba$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	rax, QWORD PTR vdisk$[rbp]
	call	QWORD PTR [rax+142]

; 126  : 		aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	mov	QWORD PTR aligned_buf$[rbp], rax

; 127  : 		GPTPartition* part = (GPTPartition*)aligned_buf;

	mov	rax, QWORD PTR aligned_buf$[rbp]
	mov	QWORD PTR part$3[rbp], rax

; 128  : 		if (part->first_lba != 0) {

	mov	rax, QWORD PTR part$3[rbp]
	cmp	QWORD PTR [rax+32], 0
	je	$LN21@AuVDiskReg

; 129  : 			vdisk->startingLBA = part->first_lba;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+86], rcx

; 130  : 			vdisk->currentLBA = vdisk->startingLBA;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR [rcx+86]
	mov	QWORD PTR [rax+94], rcx

; 131  : 			vdisk->num_partition = 1;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	BYTE PTR [rax+85], 1

; 132  : 			vdisk->part_guid.Data1 = part->part_guid.Data1;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+102], ecx

; 133  : 			vdisk->part_guid.Data2 = part->part_guid.Data2;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+106], cx

; 134  : 			vdisk->part_guid.Data3 = part->part_guid.Data3;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+108], cx

; 135  : 			for (int m = 0; m < 8; m++)

	mov	DWORD PTR m$4[rbp], 0
	jmp	SHORT $LN10@AuVDiskReg
$LN8@AuVDiskReg:
	mov	eax, DWORD PTR m$4[rbp]
	inc	eax
	mov	DWORD PTR m$4[rbp], eax
$LN10@AuVDiskReg:
	cmp	DWORD PTR m$4[rbp], 8
	jge	SHORT $LN9@AuVDiskReg

; 136  : 				vdisk->part_guid.Data4[m] = part->part_guid.Data4[m];

	movsxd	rax, DWORD PTR m$4[rbp]
	movsxd	rcx, DWORD PTR m$4[rbp]
	mov	rdx, QWORD PTR vdisk$[rbp]
	mov	r8, QWORD PTR part$3[rbp]
	movzx	eax, BYTE PTR [r8+rax+8]
	mov	BYTE PTR [rdx+rcx+110], al
	jmp	SHORT $LN8@AuVDiskReg
$LN9@AuVDiskReg:

; 137  : 
; 138  : 			vdisk->part_unique_guid.Data1 = part->part_unique_guid.Data1;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+118], ecx

; 139  : 			vdisk->part_unique_guid.Data2 = part->part_unique_guid.Data2;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	movzx	ecx, WORD PTR [rcx+20]
	mov	WORD PTR [rax+122], cx

; 140  : 			vdisk->part_unique_guid.Data3 = part->part_unique_guid.Data3;

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	movzx	ecx, WORD PTR [rcx+22]
	mov	WORD PTR [rax+124], cx

; 141  : 			for (int m = 0; m < 8; m++)

	mov	DWORD PTR m$5[rbp], 0
	jmp	SHORT $LN13@AuVDiskReg
$LN11@AuVDiskReg:
	mov	eax, DWORD PTR m$5[rbp]
	inc	eax
	mov	DWORD PTR m$5[rbp], eax
$LN13@AuVDiskReg:
	cmp	DWORD PTR m$5[rbp], 8
	jge	SHORT $LN12@AuVDiskReg

; 142  : 				vdisk->part_unique_guid.Data4[m] = part->part_guid.Data4[m];

	movsxd	rax, DWORD PTR m$5[rbp]
	movsxd	rcx, DWORD PTR m$5[rbp]
	mov	rdx, QWORD PTR vdisk$[rbp]
	mov	r8, QWORD PTR part$3[rbp]
	movzx	eax, BYTE PTR [r8+rax+8]
	mov	BYTE PTR [rdx+rcx+126], al
	jmp	SHORT $LN11@AuVDiskReg
$LN12@AuVDiskReg:

; 143  : 
; 144  : 			for (int j = 0; j < 70; j++)

	mov	DWORD PTR j$6[rbp], 0
	jmp	SHORT $LN16@AuVDiskReg
$LN14@AuVDiskReg:
	mov	eax, DWORD PTR j$6[rbp]
	inc	eax
	mov	DWORD PTR j$6[rbp], eax
$LN16@AuVDiskReg:
	cmp	DWORD PTR j$6[rbp], 70			; 00000046H
	jge	SHORT $LN15@AuVDiskReg

; 145  : 				AuTextOut("%c", part->part_name[j]);

	movsxd	rax, DWORD PTR j$6[rbp]
	mov	rcx, QWORD PTR part$3[rbp]
	movsx	eax, BYTE PTR [rcx+rax+56]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	call	AuTextOut
	jmp	SHORT $LN14@AuVDiskReg
$LN15@AuVDiskReg:
$LN21@AuVDiskReg:

; 146  : 		}
; 147  : 		part_lba++;

	mov	rax, QWORD PTR part_lba$[rbp]
	inc	rax
	mov	QWORD PTR part_lba$[rbp], rax

; 148  : 	}

	jmp	$LN5@AuVDiskReg
$LN6@AuVDiskReg:

; 149  : 	AuTextOut("\n");

	lea	rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	call	AuTextOut

; 150  : 	AuTextOut("VDisk partition created startLBA -> %d \n", vdisk->startingLBA);

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rdx, QWORD PTR [rax+86]
	lea	rcx, OFFSET FLAT:??_C@_0CJ@JIAAONDN@VDisk?5partition?5created?5startLB@
	call	AuTextOut

; 151  : 	AuTextOut("vDisk partition guid : ");

	lea	rcx, OFFSET FLAT:??_C@_0BI@HLBBEFGK@vDisk?5partition?5guid?5?3?5@
	call	AuTextOut

; 152  : 	AuTextOut("0x%x-0x%x-0x%x-0x", vdisk->part_guid.Data1, vdisk->part_guid.Data2, vdisk->part_guid.Data3);

	mov	rax, QWORD PTR vdisk$[rbp]
	movzx	eax, WORD PTR [rax+108]
	mov	rcx, QWORD PTR vdisk$[rbp]
	movzx	ecx, WORD PTR [rcx+106]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rax, QWORD PTR vdisk$[rbp]
	mov	edx, DWORD PTR [rax+102]
	lea	rcx, OFFSET FLAT:??_C@_0BC@KGAAOHKL@0x?$CFx?90x?$CFx?90x?$CFx?90x@
	call	AuTextOut

; 153  : 	for (int k = 0; k < 8; k++)

	mov	DWORD PTR k$7[rbp], 0
	jmp	SHORT $LN19@AuVDiskReg
$LN17@AuVDiskReg:
	mov	eax, DWORD PTR k$7[rbp]
	inc	eax
	mov	DWORD PTR k$7[rbp], eax
$LN19@AuVDiskReg:
	cmp	DWORD PTR k$7[rbp], 8
	jge	SHORT $LN18@AuVDiskReg

; 154  : 		AuTextOut("%x", vdisk->part_guid.Data4[k]);

	movsxd	rax, DWORD PTR k$7[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+110]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_02NJNOFBBI@?$CFx@
	call	AuTextOut
	jmp	SHORT $LN17@AuVDiskReg
$LN18@AuVDiskReg:

; 155  : 
; 156  : 	AuTextOut("\n");

	lea	rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	call	AuTextOut

; 157  : 	/* call gpt file system verifier to load
; 158  : 	 * the desired file system 
; 159  : 	 */
; 160  : 	AuGPTInitialise_FileSystem(vdisk);

	mov	rcx, QWORD PTR vdisk$[rbp]
	call	?AuGPTInitialise_FileSystem@@YAXPEAU_VDISK_@@@Z ; AuGPTInitialise_FileSystem

; 161  : 
; 162  : 	AuTextOut("\n");

	lea	rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	call	AuTextOut

; 163  : 	AuPmmngrFree(buffer);

	mov	rcx, QWORD PTR buffer$[rbp]
	call	AuPmmngrFree
$LN1@AuVDiskReg:

; 164  : 
; 165  : }

	lea	rsp, QWORD PTR [rbp+144]
	pop	rbp
	ret	0
?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z ENDP	; AuVDiskRegisterPartition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT ?AuGetVDiskPartitionInfo@@YAHEEPEAX@Z
_TEXT	SEGMENT
vdisk$ = 0
pinfo$ = 8
i$1 = 16
i$2 = 20
vdiskID$ = 112
partition_ID$ = 120
buffer$ = 128
?AuGetVDiskPartitionInfo@@YAHEEPEAX@Z PROC		; AuGetVDiskPartitionInfo, COMDAT

; 236  : int AuGetVDiskPartitionInfo(uint8_t vdiskID,uint8_t partition_ID, void* buffer) {

$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 237  : 	/*
; 238  : 	 *FUTURE WORK:
; 239  : 	 * VDisk *disk = VdiskArray[vdiskID];
; 240  : 	 * AuVDiskPartitionInfo* pinfo = (AuVDiskPartitionInfo*)buffer;
; 241  : 	 * strcpy(pinfo->mountedName, disk->partitions[partition_ID].mountedName);
; 242  : 	 * pinfo->startingLBA = disk->partition[partition_ID].startingLBA;
; 243  : 	 */
; 244  : 	x64_cli();

	call	x64_cli

; 245  : 	if (!buffer)

	cmp	QWORD PTR buffer$[rbp], 0
	jne	SHORT $LN8@AuGetVDisk

; 246  : 		return -1;

	mov	eax, -1
	jmp	$LN1@AuGetVDisk
$LN8@AuGetVDisk:

; 247  : 	AuVDisk* vdisk = VdiskArray[vdiskID];

	movzx	eax, BYTE PTR vdiskID$[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR vdisk$[rbp], rax

; 248  : 	if (!vdisk)

	cmp	QWORD PTR vdisk$[rbp], 0
	jne	SHORT $LN9@AuGetVDisk

; 249  : 		return -1;

	mov	eax, -1
	jmp	$LN1@AuGetVDisk
$LN9@AuGetVDisk:

; 250  : 	if (!vdisk->fsys)

	mov	rax, QWORD PTR vdisk$[rbp]
	cmp	QWORD PTR [rax+134], 0
	jne	SHORT $LN10@AuGetVDisk

; 251  : 		return 1;

	mov	eax, 1
	jmp	$LN1@AuGetVDisk
$LN10@AuGetVDisk:

; 252  : 	AuVDiskPartitionInfo* pinfo = (AuVDiskPartitionInfo*)buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	mov	QWORD PTR pinfo$[rbp], rax

; 253  : 	strcpy(pinfo->mountedName, vdisk->fsys->filename);

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rax, QWORD PTR [rax+134]
	mov	rcx, QWORD PTR pinfo$[rbp]
	mov	rdx, rax
	call	strcpy

; 254  : 	SeTextOut("FILE SYSTEM NAME -> %s \r\n", vdisk->fsys->filename);

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rax, QWORD PTR [rax+134]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_0BK@KEOIEEBA@FILE?5SYSTEM?5NAME?5?9?$DO?5?$CFs?5?$AN?6@
	call	SeTextOut

; 255  : 	pinfo->partitionGUID.Data1 = vdisk->part_guid.Data1;

	mov	rax, QWORD PTR pinfo$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	ecx, DWORD PTR [rcx+102]
	mov	DWORD PTR [rax+32], ecx

; 256  : 	pinfo->partitionGUID.Data2 = vdisk->part_guid.Data2;

	mov	rax, QWORD PTR pinfo$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	movzx	ecx, WORD PTR [rcx+106]
	mov	WORD PTR [rax+36], cx

; 257  : 	pinfo->partitionGUID.Data3 = vdisk->part_guid.Data3;

	mov	rax, QWORD PTR pinfo$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	movzx	ecx, WORD PTR [rcx+108]
	mov	WORD PTR [rax+38], cx

; 258  : 	for (int i = 0; i < 8; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuGetVDisk
$LN2@AuGetVDisk:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuGetVDisk:
	cmp	DWORD PTR i$1[rbp], 8
	jge	SHORT $LN3@AuGetVDisk

; 259  : 		pinfo->partitionGUID.Data4[i] = vdisk->part_guid.Data4[i];

	movsxd	rax, DWORD PTR i$1[rbp]
	movsxd	rcx, DWORD PTR i$1[rbp]
	mov	rdx, QWORD PTR pinfo$[rbp]
	mov	r8, QWORD PTR vdisk$[rbp]
	movzx	eax, BYTE PTR [r8+rax+110]
	mov	BYTE PTR [rdx+rcx+40], al
	jmp	SHORT $LN2@AuGetVDisk
$LN3@AuGetVDisk:

; 260  : 
; 261  : 	pinfo->uniqueGUID.Data1 = vdisk->part_unique_guid.Data1;

	mov	rax, QWORD PTR pinfo$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	ecx, DWORD PTR [rcx+118]
	mov	DWORD PTR [rax+48], ecx

; 262  : 	pinfo->uniqueGUID.Data2 = vdisk->part_unique_guid.Data2;

	mov	rax, QWORD PTR pinfo$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	movzx	ecx, WORD PTR [rcx+122]
	mov	WORD PTR [rax+52], cx

; 263  : 	pinfo->uniqueGUID.Data3 = vdisk->part_unique_guid.Data3;

	mov	rax, QWORD PTR pinfo$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	movzx	ecx, WORD PTR [rcx+124]
	mov	WORD PTR [rax+54], cx

; 264  : 	for (int i = 0; i < 8; i++)

	mov	DWORD PTR i$2[rbp], 0
	jmp	SHORT $LN7@AuGetVDisk
$LN5@AuGetVDisk:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN7@AuGetVDisk:
	cmp	DWORD PTR i$2[rbp], 8
	jge	SHORT $LN6@AuGetVDisk

; 265  : 		pinfo->uniqueGUID.Data4[i] = vdisk->part_unique_guid.Data4[i];

	movsxd	rax, DWORD PTR i$2[rbp]
	movsxd	rcx, DWORD PTR i$2[rbp]
	mov	rdx, QWORD PTR pinfo$[rbp]
	mov	r8, QWORD PTR vdisk$[rbp]
	movzx	eax, BYTE PTR [r8+rax+126]
	mov	BYTE PTR [rdx+rcx+56], al
	jmp	SHORT $LN5@AuGetVDisk
$LN6@AuGetVDisk:

; 266  : 	pinfo->startingLBA = vdisk->startingLBA;

	mov	rax, QWORD PTR pinfo$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR [rcx+86]
	mov	QWORD PTR [rax+64], rcx

; 267  : 	return 0;

	xor	eax, eax
$LN1@AuGetVDisk:

; 268  : }

	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?AuGetVDiskPartitionInfo@@YAHEEPEAX@Z ENDP		; AuGetVDiskPartitionInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT ?AuGetVDiskInfo@@YAHEPEAX@Z
_TEXT	SEGMENT
vdisk$ = 0
info$ = 8
vdiskID$ = 96
buffer$ = 104
?AuGetVDiskInfo@@YAHEPEAX@Z PROC			; AuGetVDiskInfo, COMDAT

; 212  : int AuGetVDiskInfo(uint8_t vdiskID, void* buffer) {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 213  : 	x64_cli();

	call	x64_cli

; 214  : 	if (!buffer)

	cmp	QWORD PTR buffer$[rbp], 0
	jne	SHORT $LN2@AuGetVDisk

; 215  : 		return -1;

	mov	eax, -1
	jmp	$LN1@AuGetVDisk
$LN2@AuGetVDisk:

; 216  : 	AuVDisk* vdisk = VdiskArray[vdiskID];

	movzx	eax, BYTE PTR vdiskID$[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR vdisk$[rbp], rax

; 217  : 	if (!vdisk)

	cmp	QWORD PTR vdisk$[rbp], 0
	jne	SHORT $LN3@AuGetVDisk

; 218  : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN1@AuGetVDisk
$LN3@AuGetVDisk:

; 219  : 	AuVDiskInfo* info = (AuVDiskInfo*)buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	mov	QWORD PTR info$[rbp], rax

; 220  : 	strcpy(info->diskname, vdisk->diskname);

	mov	rax, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rdx, rax
	call	strcpy

; 221  : 	strcpy(info->serialNumber, vdisk->serialNumber);

	mov	rax, QWORD PTR vdisk$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR info$[rbp]
	add	rcx, 40					; 00000028H
	mov	rdx, rax
	call	strcpy

; 222  : 	info->vDiskID = vdiskID;

	mov	rax, QWORD PTR info$[rbp]
	movzx	ecx, BYTE PTR vdiskID$[rbp]
	mov	BYTE PTR [rax+60], cl

; 223  : 	info->maxBlocks = vdisk->max_blocks;

	mov	rax, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR [rcx+68]
	mov	QWORD PTR [rax+65], rcx

; 224  : 	info->blocksSize = vdisk->blockSize;

	mov	rax, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR vdisk$[rbp]
	mov	rcx, QWORD PTR [rcx+76]
	mov	QWORD PTR [rax+73], rcx

; 225  : 	info->num_partition = vdisk->num_partition;

	mov	rax, QWORD PTR vdisk$[rbp]
	movzx	eax, BYTE PTR [rax+85]
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+61], eax

; 226  : 	return 0;

	xor	eax, eax
$LN1@AuGetVDisk:

; 227  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuGetVDiskInfo@@YAHEPEAX@Z ENDP			; AuGetVDiskInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT AuVDiskDestroy
_TEXT	SEGMENT
_index$ = 0
i$1 = 1
disk$2 = 8
vdisk$ = 96
AuVDiskDestroy PROC					; COMDAT

; 190  : void AuVDiskDestroy(AuVDisk *vdisk) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 191  : 	uint8_t _index = 0;

	mov	BYTE PTR _index$[rbp], 0

; 192  : 	for (uint8_t i = 0; i < MAX_VDISK_DEVICES; i++){

	mov	BYTE PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuVDiskDes
$LN2@AuVDiskDes:
	movzx	eax, BYTE PTR i$1[rbp]
	inc	al
	mov	BYTE PTR i$1[rbp], al
$LN4@AuVDiskDes:
	movzx	eax, BYTE PTR i$1[rbp]
	cmp	eax, 26
	jge	SHORT $LN3@AuVDiskDes

; 193  : 		AuVDisk *disk = VdiskArray[i];

	movzx	eax, BYTE PTR i$1[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR disk$2[rbp], rax

; 194  : 		if (disk == vdisk){

	mov	rax, QWORD PTR vdisk$[rbp]
	cmp	QWORD PTR disk$2[rbp], rax
	jne	SHORT $LN5@AuVDiskDes

; 195  : 			_index = i;

	movzx	eax, BYTE PTR i$1[rbp]
	mov	BYTE PTR _index$[rbp], al

; 196  : 			break;

	jmp	SHORT $LN3@AuVDiskDes
$LN5@AuVDiskDes:

; 197  : 		}
; 198  : 	}

	jmp	SHORT $LN2@AuVDiskDes
$LN3@AuVDiskDes:

; 199  : 
; 200  : 	VdiskArray[_index] = NULL;

	movzx	eax, BYTE PTR _index$[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	mov	QWORD PTR [rcx+rax*8], 0

; 201  : 	kfree(vdisk);

	mov	rcx, QWORD PTR vdisk$[rbp]
	call	kfree

; 202  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
AuVDiskDestroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT AuVDiskWrite
_TEXT	SEGMENT
disk$ = 80
lba$ = 88
count$ = 96
buffer$ = 104
AuVDiskWrite PROC					; COMDAT

; 94   : size_t AuVDiskWrite(AuVDisk* disk, uint64_t lba, uint32_t count, uint64_t* buffer) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 95   : 	if (disk->Write)

	mov	rax, QWORD PTR disk$[rbp]
	cmp	QWORD PTR [rax+150], 0
	je	SHORT $LN2@AuVDiskWri

; 96   : 		return disk->Write(disk, disk->startingLBA + lba, count, buffer);

	mov	rax, QWORD PTR disk$[rbp]
	mov	rax, QWORD PTR [rax+86]
	add	rax, QWORD PTR lba$[rbp]
	mov	r9, QWORD PTR buffer$[rbp]
	mov	r8d, DWORD PTR count$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR disk$[rbp]
	mov	rax, QWORD PTR disk$[rbp]
	call	QWORD PTR [rax+150]
	cdqe
	jmp	SHORT $LN1@AuVDiskWri
$LN2@AuVDiskWri:

; 97   : 	return 0;

	xor	eax, eax
$LN1@AuVDiskWri:

; 98   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuVDiskWrite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT AuVDiskRead
_TEXT	SEGMENT
disk$ = 80
lba$ = 88
count$ = 96
buffer$ = 104
AuVDiskRead PROC					; COMDAT

; 80   : size_t AuVDiskRead(AuVDisk *disk, uint64_t lba, uint32_t count, uint64_t* buffer) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 81   : 	if (disk->Read) 

	mov	rax, QWORD PTR disk$[rbp]
	cmp	QWORD PTR [rax+142], 0
	je	SHORT $LN2@AuVDiskRea

; 82   : 		return disk->Read(disk, disk->startingLBA + lba, count, buffer);

	mov	rax, QWORD PTR disk$[rbp]
	mov	rax, QWORD PTR [rax+86]
	add	rax, QWORD PTR lba$[rbp]
	mov	r9, QWORD PTR buffer$[rbp]
	mov	r8d, DWORD PTR count$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR disk$[rbp]
	mov	rax, QWORD PTR disk$[rbp]
	call	QWORD PTR [rax+142]
	cdqe
	jmp	SHORT $LN1@AuVDiskRea
$LN2@AuVDiskRea:

; 83   : 	return 0;

	xor	eax, eax
$LN1@AuVDiskRea:

; 84   : }

	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
AuVDiskRead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT AuCreateVDisk
_TEXT	SEGMENT
vdisk$ = 0
AuCreateVDisk PROC					; COMDAT

; 67   : AuVDisk *AuCreateVDisk(){

$LN3:
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 68   : 	AuVDisk* vdisk = (AuVDisk*)kmalloc(sizeof(AuVDisk));

	mov	ecx, 158				; 0000009eH
	call	kmalloc
	mov	QWORD PTR vdisk$[rbp], rax

; 69   : 	memset(vdisk, 0, sizeof(AuVDisk));

	mov	r8d, 158				; 0000009eH
	xor	edx, edx
	mov	rcx, QWORD PTR vdisk$[rbp]
	call	memset

; 70   : 	return vdisk;

	mov	rax, QWORD PTR vdisk$[rbp]

; 71   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
AuCreateVDisk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT AuVDiskRegister
_TEXT	SEGMENT
_index$ = 0
disk$ = 96
AuVDiskRegister PROC					; COMDAT

; 171  : void AuVDiskRegister(AuVDisk* disk) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 172  : 	uint8_t _index = AuVDiskGetIndex();

	call	AuVDiskGetIndex
	mov	BYTE PTR _index$[rbp], al

; 173  : 	/* check for last time, for any errors */
; 174  : 	if (VdiskArray[_index])

	movzx	eax, BYTE PTR _index$[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN2@AuVDiskReg

; 175  : 		return;

	jmp	SHORT $LN1@AuVDiskReg
$LN2@AuVDiskReg:

; 176  : 
; 177  : 	VdiskArray[_index] = disk;

	movzx	eax, BYTE PTR _index$[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	mov	rdx, QWORD PTR disk$[rbp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 178  : 	AuTextOut("Vdisk registered name -> %s, serial -> %s \n", disk->diskname,

	mov	rax, QWORD PTR disk$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR disk$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, OFFSET FLAT:??_C@_0CM@EOIAENHA@Vdisk?5registered?5name?5?9?$DO?5?$CFs?0?5se@
	call	AuTextOut

; 179  : 		disk->serialNumber);
; 180  : 
; 181  : 	disk->__VDiskID = _index;

	mov	rax, QWORD PTR disk$[rbp]
	movzx	ecx, BYTE PTR _index$[rbp]
	mov	BYTE PTR [rax+84], cl

; 182  : 	/* Register a partition and initialise the file system*/
; 183  : 	AuVDiskRegisterPartition(disk);

	mov	rcx, QWORD PTR disk$[rbp]
	call	?AuVDiskRegisterPartition@@YAXPEAU_VDISK_@@@Z ; AuVDiskRegisterPartition
$LN1@AuVDiskReg:

; 184  : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
AuVDiskRegister ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT AuVDiskGetIndex
_TEXT	SEGMENT
i$1 = 0
AuVDiskGetIndex PROC					; COMDAT

; 55   : uint8_t AuVDiskGetIndex() {

$LN7:
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 56   : 	for (uint8_t i = 0; i < MAX_VDISK_DEVICES; i++){

	mov	BYTE PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuVDiskGet
$LN2@AuVDiskGet:
	movzx	eax, BYTE PTR i$1[rbp]
	inc	al
	mov	BYTE PTR i$1[rbp], al
$LN4@AuVDiskGet:
	movzx	eax, BYTE PTR i$1[rbp]
	cmp	eax, 26
	jge	SHORT $LN3@AuVDiskGet

; 57   : 		if (!VdiskArray[i])

	movzx	eax, BYTE PTR i$1[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	cmp	QWORD PTR [rcx+rax*8], 0
	jne	SHORT $LN5@AuVDiskGet

; 58   : 			return i;

	movzx	eax, BYTE PTR i$1[rbp]
	jmp	SHORT $LN1@AuVDiskGet
$LN5@AuVDiskGet:

; 59   : 	}

	jmp	SHORT $LN2@AuVDiskGet
$LN3@AuVDiskGet:
$LN1@AuVDiskGet:

; 60   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
AuVDiskGetIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File E:\Xeneva Project\Aurora\Kernel\Fs\vdisk.cpp
;	COMDAT ?AuVDiskInitialise@@YAXXZ
_TEXT	SEGMENT
i$1 = 0
?AuVDiskInitialise@@YAXXZ PROC				; AuVDiskInitialise, COMDAT

; 47   : void AuVDiskInitialise() {

$LN6:
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__E5A64090_vdisk@cpp
	call	__CheckForDebuggerJustMyCode

; 48   : 	for (int i = 0; i < MAX_VDISK_DEVICES; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@AuVDiskIni
$LN2@AuVDiskIni:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@AuVDiskIni:
	cmp	DWORD PTR i$1[rbp], 26
	jge	SHORT $LN3@AuVDiskIni

; 49   : 		VdiskArray[i] = NULL;

	movsxd	rax, DWORD PTR i$1[rbp]
	lea	rcx, OFFSET FLAT:?VdiskArray@@3PAPEAU_VDISK_@@A ; VdiskArray
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@AuVDiskIni
$LN3@AuVDiskIni:

; 50   : }

	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?AuVDiskInitialise@@YAXXZ ENDP				; AuVDiskInitialise
_TEXT	ENDS
END
