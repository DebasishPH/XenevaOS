; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?master_count@@3_KA				; master_count
PUBLIC	?slave_count@@3_KA				; slave_count
PUBLIC	?root@@3PEAU__tty__@@EA				; root
PUBLIC	?last@@3PEAU__tty__@@EA				; last
_BSS	SEGMENT
?master_count@@3_KA DQ 01H DUP (?)			; master_count
?slave_count@@3_KA DQ 01H DUP (?)			; slave_count
?root@@3PEAU__tty__@@EA DQ 01H DUP (?)			; root
?last@@3PEAU__tty__@@EA DQ 01H DUP (?)			; last
_BSS	ENDS
CONST	SEGMENT
$SG3835	DB	'/dev', 00H
	ORG $+3
$SG3868	DB	'/dev', 00H
	ORG $+3
$SG3874	DB	'ttym', 00H
	ORG $+3
$SG3875	DB	'/dev/tty', 00H
	ORG $+3
$SG3880	DB	'/dev', 00H
	ORG $+3
$SG3886	DB	'ttys', 00H
	ORG $+7
$SG3887	DB	'/dev/tty', 00H
	ORG $+3
$SG3911	DB	'/dev', 00H
	ORG $+7
$SG3912	DB	'/dev/tty', 00H
CONST	ENDS
PUBLIC	?AuTTYCreate@@YAHPEAH0@Z			; AuTTYCreate
PUBLIC	?AuTTYInitialise@@YAXXZ				; AuTTYInitialise
PUBLIC	?AuTTYInsert@@YAXPEAU__tty__@@@Z		; AuTTYInsert
PUBLIC	?AuTTYDelete@@YAXPEAU__tty__@@@Z		; AuTTYDelete
PUBLIC	?AuTTYWriteSlave@@YAXPEAU__tty__@@E@Z		; AuTTYWriteSlave
PUBLIC	?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z		; AuTTYWriteMaster
PUBLIC	?AuTTYProcessLine@@YAXPEAU__tty__@@E@Z		; AuTTYProcessLine
PUBLIC	?AuTTYMasterRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYMasterRead
PUBLIC	?AuTTYMasterWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYMasterWrite
PUBLIC	?AuTTYSlaveRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYSlaveRead
PUBLIC	?AuTTYSlaveWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYSlaveWrite
PUBLIC	?AuTTYSlaveClose@@YAHPEAU__VFS_NODE__@@0@Z	; AuTTYSlaveClose
PUBLIC	?AuTTYMasterClose@@YAHPEAU__VFS_NODE__@@0@Z	; AuTTYMasterClose
PUBLIC	?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z	; AuTTYIoControl
PUBLIC	?AuTTYCreateMaster@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z ; AuTTYCreateMaster
PUBLIC	?AuTTYCreateSlave@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z ; AuTTYCreateSlave
EXTRN	?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z:PROC ; AuCircBufInitialise
EXTRN	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z:PROC	; AuCircBufPut
EXTRN	?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z:PROC	; AuCircBufGet
EXTRN	?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z:PROC	; CircBufEmpty
EXTRN	?CircBufFull@@YA_NPEAU_circ_buf_@@@Z:PROC	; CircBufFull
EXTRN	AuVFSFind:PROC
EXTRN	?AuDevFSCreateFile@@YAHPEAU__VFS_NODE__@@PEADE@Z:PROC ; AuDevFSCreateFile
EXTRN	AuDevFSAddFile:PROC
EXTRN	kmalloc:PROC
EXTRN	kfree:PROC
EXTRN	strcpy:PROC
EXTRN	memset:PROC
EXTRN	?sztoa@@YAPEAD_JPEADH@Z:PROC			; sztoa
EXTRN	AuGetCurrentThread:PROC
EXTRN	AuForceScheduler:PROC
EXTRN	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z:PROC ; AuProcessFindThread
EXTRN	?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z:PROC ; AuProcessGetFileDesc
EXTRN	x64_cli:PROC
pdata	SEGMENT
$pdata$?AuTTYCreate@@YAHPEAH0@Z DD imagerel $LN6
	DD	imagerel $LN6+538
	DD	imagerel $unwind$?AuTTYCreate@@YAHPEAH0@Z
$pdata$?AuTTYInitialise@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?AuTTYInitialise@@YAXXZ
$pdata$?AuTTYDelete@@YAXPEAU__tty__@@@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?AuTTYDelete@@YAXPEAU__tty__@@@Z
$pdata$?AuTTYWriteSlave@@YAXPEAU__tty__@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?AuTTYWriteSlave@@YAXPEAU__tty__@@E@Z
$pdata$?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z
$pdata$?AuTTYProcessLine@@YAXPEAU__tty__@@E@Z DD imagerel $LN18
	DD	imagerel $LN18+399
	DD	imagerel $unwind$?AuTTYProcessLine@@YAXPEAU__tty__@@E@Z
$pdata$?AuTTYMasterRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD imagerel $LN8
	DD	imagerel $LN8+209
	DD	imagerel $unwind$?AuTTYMasterRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
$pdata$?AuTTYMasterWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD imagerel $LN7
	DD	imagerel $LN7+130
	DD	imagerel $unwind$?AuTTYMasterWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
$pdata$?AuTTYSlaveRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD imagerel $LN7
	DD	imagerel $LN7+140
	DD	imagerel $unwind$?AuTTYSlaveRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
$pdata$?AuTTYSlaveWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD imagerel $LN9
	DD	imagerel $LN9+214
	DD	imagerel $unwind$?AuTTYSlaveWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z
$pdata$?AuTTYSlaveClose@@YAHPEAU__VFS_NODE__@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+46
	DD	imagerel $unwind$?AuTTYSlaveClose@@YAHPEAU__VFS_NODE__@@0@Z
$pdata$?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+339
	DD	imagerel $unwind$?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z
$pdata$?AuTTYCreateMaster@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z DD imagerel $LN3
	DD	imagerel $LN3+290
	DD	imagerel $unwind$?AuTTYCreateMaster@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z
$pdata$?AuTTYCreateSlave@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z DD imagerel $LN3
	DD	imagerel $LN3+290
	DD	imagerel $unwind$?AuTTYCreateSlave@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuTTYCreate@@YAHPEAH0@Z DD 010e01H
	DD	0c20eH
$unwind$?AuTTYInitialise@@YAXXZ DD 010401H
	DD	06204H
$unwind$?AuTTYDelete@@YAXPEAU__tty__@@@Z DD 010901H
	DD	04209H
$unwind$?AuTTYWriteSlave@@YAXPEAU__tty__@@E@Z DD 010d01H
	DD	0420dH
$unwind$?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z DD 010d01H
	DD	0420dH
$unwind$?AuTTYProcessLine@@YAXPEAU__tty__@@E@Z DD 010d01H
	DD	0620dH
$unwind$?AuTTYMasterRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD 011801H
	DD	08218H
$unwind$?AuTTYMasterWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD 011801H
	DD	08218H
$unwind$?AuTTYSlaveRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD 011801H
	DD	08218H
$unwind$?AuTTYSlaveWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z DD 011801H
	DD	08218H
$unwind$?AuTTYSlaveClose@@YAHPEAU__VFS_NODE__@@0@Z DD 010e01H
	DD	0620eH
$unwind$?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z DD 011201H
	DD	0a212H
$unwind$?AuTTYCreateMaster@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z DD 010901H
	DD	08209H
$unwind$?AuTTYCreateSlave@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z DD 010901H
	DD	08209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
name$ = 32
node$ = 40
fs$ = 48
tty$ = 80
?AuTTYCreateSlave@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z PROC ; AuTTYCreateSlave

; 298  : AuVFSNode* AuTTYCreateSlave(TTY* tty) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 299  : 	AuVFSNode* fs = AuVFSFind("/dev");

	lea	rcx, OFFSET FLAT:$SG3880
	call	AuVFSFind
	mov	QWORD PTR fs$[rsp], rax

; 300  : 
; 301  : 	AuVFSNode* node = (AuVFSNode*)kmalloc(sizeof(AuVFSNode));

	mov	ecx, 178				; 000000b2H
	call	kmalloc
	mov	QWORD PTR node$[rsp], rax

; 302  : 	memset(node, 0, sizeof(AuVFSNode));

	mov	r8d, 178				; 000000b2H
	xor	edx, edx
	mov	rcx, QWORD PTR node$[rsp]
	call	memset

; 303  : 	char name[5];
; 304  : 	strcpy(name, "ttys");

	lea	rdx, OFFSET FLAT:$SG3886
	lea	rcx, QWORD PTR name$[rsp]
	call	strcpy

; 305  : 	sztoa(slave_count, name + 4, 10);

	lea	rax, QWORD PTR name$[rsp+4]
	mov	r8d, 10
	mov	rdx, rax
	mov	rcx, QWORD PTR ?slave_count@@3_KA	; slave_count
	call	?sztoa@@YAPEAD_JPEADH@Z			; sztoa

; 306  : 	strcpy(node->filename, name);

	mov	rax, QWORD PTR node$[rsp]
	lea	rdx, QWORD PTR name$[rsp]
	mov	rcx, rax
	call	strcpy

; 307  : 
; 308  : 	node->size = 512;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+32], 512			; 00000200H

; 309  : 	node->flags = FS_FLAG_GENERAL | FS_FLAG_TTY;

	mov	eax, 260				; 00000104H
	mov	rcx, QWORD PTR node$[rsp]
	mov	WORD PTR [rcx+61], ax

; 310  : 	node->device = tty;

	mov	rax, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+64], rcx

; 311  : 	node->read = AuTTYSlaveRead;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYSlaveRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYSlaveRead
	mov	QWORD PTR [rax+90], rcx

; 312  : 	node->write = AuTTYSlaveWrite;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYSlaveWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYSlaveWrite
	mov	QWORD PTR [rax+98], rcx

; 313  : 	node->close = AuTTYSlaveClose;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYSlaveClose@@YAHPEAU__VFS_NODE__@@0@Z ; AuTTYSlaveClose
	mov	QWORD PTR [rax+138], rcx

; 314  : 	node->iocontrol = AuTTYIoControl;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z ; AuTTYIoControl
	mov	QWORD PTR [rax+170], rcx

; 315  : 	node->fileCopyCount = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR node$[rsp]
	mov	WORD PTR [rcx+72], ax

; 316  : 
; 317  : 	AuDevFSAddFile(fs, "/dev/tty", node);

	mov	r8, QWORD PTR node$[rsp]
	lea	rdx, OFFSET FLAT:$SG3887
	mov	rcx, QWORD PTR fs$[rsp]
	call	AuDevFSAddFile

; 318  : 	slave_count++;

	mov	rax, QWORD PTR ?slave_count@@3_KA	; slave_count
	inc	rax
	mov	QWORD PTR ?slave_count@@3_KA, rax	; slave_count

; 319  : 	return node;

	mov	rax, QWORD PTR node$[rsp]

; 320  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuTTYCreateSlave@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z ENDP ; AuTTYCreateSlave
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
name$ = 32
node$ = 40
fs$ = 48
tty$ = 80
?AuTTYCreateMaster@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z PROC ; AuTTYCreateMaster

; 269  : AuVFSNode* AuTTYCreateMaster(TTY* tty) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 270  : 	AuVFSNode* fs = AuVFSFind("/dev");

	lea	rcx, OFFSET FLAT:$SG3868
	call	AuVFSFind
	mov	QWORD PTR fs$[rsp], rax

; 271  : 
; 272  : 	AuVFSNode* node = (AuVFSNode*)kmalloc(sizeof(AuVFSNode));

	mov	ecx, 178				; 000000b2H
	call	kmalloc
	mov	QWORD PTR node$[rsp], rax

; 273  : 	memset(node, 0, sizeof(AuVFSNode));

	mov	r8d, 178				; 000000b2H
	xor	edx, edx
	mov	rcx, QWORD PTR node$[rsp]
	call	memset

; 274  : 	char name[5];
; 275  : 	strcpy(name, "ttym");

	lea	rdx, OFFSET FLAT:$SG3874
	lea	rcx, QWORD PTR name$[rsp]
	call	strcpy

; 276  : 	sztoa(master_count, name + 4, 10);

	lea	rax, QWORD PTR name$[rsp+4]
	mov	r8d, 10
	mov	rdx, rax
	mov	rcx, QWORD PTR ?master_count@@3_KA	; master_count
	call	?sztoa@@YAPEAD_JPEADH@Z			; sztoa

; 277  : 	strcpy(node->filename, name);

	mov	rax, QWORD PTR node$[rsp]
	lea	rdx, QWORD PTR name$[rsp]
	mov	rcx, rax
	call	strcpy

; 278  : 
; 279  : 	node->size = 512;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+32], 512			; 00000200H

; 280  : 	node->flags = FS_FLAG_GENERAL | FS_FLAG_TTY;

	mov	eax, 260				; 00000104H
	mov	rcx, QWORD PTR node$[rsp]
	mov	WORD PTR [rcx+61], ax

; 281  : 	node->device = tty;

	mov	rax, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+64], rcx

; 282  : 	node->read = AuTTYMasterRead;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYMasterRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYMasterRead
	mov	QWORD PTR [rax+90], rcx

; 283  : 	node->write = AuTTYMasterWrite;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYMasterWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ; AuTTYMasterWrite
	mov	QWORD PTR [rax+98], rcx

; 284  : 	node->close = AuTTYMasterClose;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYMasterClose@@YAHPEAU__VFS_NODE__@@0@Z ; AuTTYMasterClose
	mov	QWORD PTR [rax+138], rcx

; 285  : 	node->iocontrol = AuTTYIoControl;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z ; AuTTYIoControl
	mov	QWORD PTR [rax+170], rcx

; 286  : 	node->fileCopyCount = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR node$[rsp]
	mov	WORD PTR [rcx+72], ax

; 287  : 
; 288  : 	AuDevFSAddFile(fs, "/dev/tty", node);

	mov	r8, QWORD PTR node$[rsp]
	lea	rdx, OFFSET FLAT:$SG3875
	mov	rcx, QWORD PTR fs$[rsp]
	call	AuDevFSAddFile

; 289  : 	master_count++;

	mov	rax, QWORD PTR ?master_count@@3_KA	; master_count
	inc	rax
	mov	QWORD PTR ?master_count@@3_KA, rax	; master_count

; 290  : 	return node;

	mov	rax, QWORD PTR node$[rsp]

; 291  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuTTYCreateMaster@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z ENDP ; AuTTYCreateMaster
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
tv66 = 32
tty$ = 40
sz$1 = 48
sz$2 = 56
currthr$3 = 64
proc$4 = 72
file$ = 96
code$ = 104
arg$ = 112
?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z PROC	; AuTTYIoControl

; 226  : int AuTTYIoControl(AuVFSNode* file, int code, void* arg) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 227  : 	TTY* tty = (TTY*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tty$[rsp], rax

; 228  : 	if (!tty)

	cmp	QWORD PTR tty$[rsp], 0
	jne	SHORT $LN8@AuTTYIoCon

; 229  : 		return 0;

	xor	eax, eax
	jmp	$LN9@AuTTYIoCon
$LN8@AuTTYIoCon:

; 230  : 
; 231  : 	switch (code) {

	mov	eax, DWORD PTR code$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	cmp	DWORD PTR tv66[rsp], 21505		; 00005401H
	je	SHORT $LN4@AuTTYIoCon
	cmp	DWORD PTR tv66[rsp], 21506		; 00005402H
	je	SHORT $LN5@AuTTYIoCon
	cmp	DWORD PTR tv66[rsp], 21509		; 00005405H
	je	$LN3@AuTTYIoCon
	jmp	$LN6@AuTTYIoCon
$LN5@AuTTYIoCon:

; 232  : 	case TIOCSWINSZ: {
; 233  : 						 WinSize *sz = (WinSize*)arg;

	mov	rax, QWORD PTR arg$[rsp]
	mov	QWORD PTR sz$1[rsp], rax

; 234  : 						 tty->size.ws_col = sz->ws_col;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+4], cx

; 235  : 						 tty->size.ws_row = sz->ws_row;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax+2], cx

; 236  : 						 tty->size.ws_xpixel = sz->ws_xpixel;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+6], cx

; 237  : 						 tty->size.ws_ypixel = sz->ws_ypixel;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+8], cx

; 238  : 						 break;

	jmp	$LN6@AuTTYIoCon
$LN4@AuTTYIoCon:

; 239  : 	}
; 240  : 	case TIOCGWINSZ: {
; 241  : 						 WinSize* sz = (WinSize*)arg;

	mov	rax, QWORD PTR arg$[rsp]
	mov	QWORD PTR sz$2[rsp], rax

; 242  : 						 sz->ws_col = tty->size.ws_col;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+2], cx

; 243  : 						 sz->ws_row = tty->size.ws_row;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax], cx

; 244  : 						 sz->ws_xpixel = tty->size.ws_xpixel;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+4], cx

; 245  : 						 sz->ws_ypixel = tty->size.ws_ypixel;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+8]
	mov	WORD PTR [rax+6], cx

; 246  : 						 break;

	jmp	SHORT $LN6@AuTTYIoCon
$LN3@AuTTYIoCon:

; 247  : 	}
; 248  : 
; 249  : 	case TIOSPGRP: {
; 250  : 					   AuThread* currthr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR currthr$3[rsp], rax

; 251  : 					   if (!currthr)

	cmp	QWORD PTR currthr$3[rsp], 0
	jne	SHORT $LN2@AuTTYIoCon

; 252  : 						   return 0;

	xor	eax, eax
	jmp	SHORT $LN9@AuTTYIoCon
$LN2@AuTTYIoCon:

; 253  : 					   AuProcess* proc = AuProcessFindThread(currthr);

	mov	rcx, QWORD PTR currthr$3[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR proc$4[rsp], rax

; 254  : 					   if (!proc)

	cmp	QWORD PTR proc$4[rsp], 0
	jne	SHORT $LN1@AuTTYIoCon

; 255  : 						   return 0;

	xor	eax, eax
	jmp	SHORT $LN9@AuTTYIoCon
$LN1@AuTTYIoCon:

; 256  : 					   tty->slave_pid = proc->proc_id;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR proc$4[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax+114], cx
$LN6@AuTTYIoCon:

; 257  : 					   break;
; 258  : 	}
; 259  : 	}
; 260  : 
; 261  : 	return 1;

	mov	eax, 1
$LN9@AuTTYIoCon:

; 262  : }

	add	rsp, 88					; 00000058H
	ret	0
?AuTTYIoControl@@YAHPEAU__VFS_NODE__@@HPEAX@Z ENDP	; AuTTYIoControl
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
fs$ = 8
file$ = 16
?AuTTYMasterClose@@YAHPEAU__VFS_NODE__@@0@Z PROC	; AuTTYMasterClose

; 221  : int AuTTYMasterClose(AuVFSNode* fs, AuVFSNode* file) {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 222  : 
; 223  : 	return 0;

	xor	eax, eax

; 224  : }

	ret	0
?AuTTYMasterClose@@YAHPEAU__VFS_NODE__@@0@Z ENDP	; AuTTYMasterClose
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
_fs$ = 32
fs$ = 64
file$ = 72
?AuTTYSlaveClose@@YAHPEAU__VFS_NODE__@@0@Z PROC		; AuTTYSlaveClose

; 215  : int AuTTYSlaveClose(AuVFSNode* fs, AuVFSNode* file) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 216  : 	AuVFSNode* _fs = AuVFSFind("/dev");

	lea	rcx, OFFSET FLAT:$SG3835
	call	AuVFSFind
	mov	QWORD PTR _fs$[rsp], rax

; 217  : 	if (!_fs)

	cmp	QWORD PTR _fs$[rsp], 0
	jne	SHORT $LN1@AuTTYSlave

; 218  : 		return 0;

	xor	eax, eax
$LN1@AuTTYSlave:

; 219  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuTTYSlaveClose@@YAHPEAU__VFS_NODE__@@0@Z ENDP		; AuTTYSlaveClose
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
i$1 = 32
tty$ = 40
aligned_buf$ = 48
curr_th$ = 56
fsys$ = 80
file$ = 88
buffer$ = 96
len$ = 104
?AuTTYSlaveWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z PROC	; AuTTYSlaveWrite

; 187  : size_t AuTTYSlaveWrite(AuVFSNode* fsys, AuVFSNode* file, uint64_t* buffer, uint32_t len) {

$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 188  : 	x64_cli();

	call	x64_cli

; 189  : 	AuThread* curr_th = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR curr_th$[rsp], rax

; 190  : 	uint8_t* aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buf$[rsp], rax

; 191  : 	TTY* tty = (TTY*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tty$[rsp], rax

; 192  : 	if (!tty)

	cmp	QWORD PTR tty$[rsp], 0
	jne	SHORT $LN6@AuTTYSlave

; 193  : 		return 0;

	xor	eax, eax
	jmp	$LN7@AuTTYSlave
$LN6@AuTTYSlave:

; 194  : 	if (len > 512)

	cmp	DWORD PTR len$[rsp], 512		; 00000200H
	jbe	SHORT $LN5@AuTTYSlave

; 195  : 		len = 512;

	mov	DWORD PTR len$[rsp], 512		; 00000200H
$LN5@AuTTYSlave:

; 196  : 
; 197  : 	if (CircBufFull(tty->masterbuf)) {

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?CircBufFull@@YA_NPEAU_circ_buf_@@@Z	; CircBufFull
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@AuTTYSlave

; 198  : 		//AuSleepThread(curr_th, 1000000000000);
; 199  : 		AuForceScheduler();

	call	AuForceScheduler

; 200  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN7@AuTTYSlave
$LN4@AuTTYSlave:

; 201  : 	}
; 202  : 
; 203  : 	for (int i = 0; i < len; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuTTYSlave
$LN2@AuTTYSlave:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuTTYSlave:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@AuTTYSlave

; 204  : 		AuCircBufPut(tty->masterbuf, aligned_buf[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR aligned_buf$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z	; AuCircBufPut

; 205  : 		tty->master_written++;

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+104]
	inc	eax
	mov	rcx, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rcx+104], eax

; 206  : 	}

	jmp	SHORT $LN2@AuTTYSlave
$LN1@AuTTYSlave:

; 207  : 
; 208  : 	/* little bit slow down the slave process,
; 209  : 	 * it's too fast 
; 210  : 	 */
; 211  : 	//AuSleepThread(curr_th, 1000000000000);
; 212  : 	AuForceScheduler();

	call	AuForceScheduler
$LN7@AuTTYSlave:

; 213  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuTTYSlaveWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ENDP	; AuTTYSlaveWrite
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
i$1 = 32
tty$ = 40
aligned_buf$ = 48
fsys$ = 80
file$ = 88
buffer$ = 96
len$ = 104
?AuTTYSlaveRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z PROC	; AuTTYSlaveRead

; 171  : size_t AuTTYSlaveRead(AuVFSNode* fsys, AuVFSNode* file, uint64_t* buffer, uint32_t len) {

$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 172  : 	x64_cli();

	call	x64_cli

; 173  : 	uint8_t* aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buf$[rsp], rax

; 174  : 	TTY* tty = (TTY*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tty$[rsp], rax

; 175  : 	if (!tty)

	cmp	QWORD PTR tty$[rsp], 0
	jne	SHORT $LN4@AuTTYSlave

; 176  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN5@AuTTYSlave
$LN4@AuTTYSlave:

; 177  : 
; 178  : 	for (int i = 0; i < len; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuTTYSlave
$LN2@AuTTYSlave:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuTTYSlave:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@AuTTYSlave

; 179  : 		AuCircBufGet(tty->slavebuf, &aligned_buf[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR aligned_buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z ; AuCircBufGet
	jmp	SHORT $LN2@AuTTYSlave
$LN1@AuTTYSlave:

; 180  : 
; 181  : 	return 1;

	mov	eax, 1
$LN5@AuTTYSlave:

; 182  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuTTYSlaveRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ENDP	; AuTTYSlaveRead
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
i$1 = 32
type$ = 40
aligned_buf$ = 48
fs$ = 80
file$ = 88
buffer$ = 96
len$ = 104
?AuTTYMasterWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z PROC	; AuTTYMasterWrite

; 159  : size_t AuTTYMasterWrite(AuVFSNode* fs, AuVFSNode* file, uint64_t* buffer, uint32_t len) {

$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 160  : 	x64_cli();

	call	x64_cli

; 161  : 	uint8_t* aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buf$[rsp], rax

; 162  : 	TTY* type = (TTY*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR type$[rsp], rax

; 163  : 	if (!type)

	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN4@AuTTYMaste

; 164  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN5@AuTTYMaste
$LN4@AuTTYMaste:

; 165  : 
; 166  : 	for (int i = 0; i < len; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuTTYMaste
$LN2@AuTTYMaste:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuTTYMaste:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@AuTTYMaste

; 167  : 		AuCircBufPut(type->slavebuf, aligned_buf[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR aligned_buf$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z	; AuCircBufPut

; 168  : 	}

	jmp	SHORT $LN2@AuTTYMaste
$LN1@AuTTYMaste:
$LN5@AuTTYMaste:

; 169  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuTTYMasterWrite@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ENDP	; AuTTYMasterWrite
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
i$1 = 32
type$ = 40
bytes_to_ret$ = 48
aligned_buf$ = 56
fs$ = 80
file$ = 88
buffer$ = 96
len$ = 104
?AuTTYMasterRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z PROC	; AuTTYMasterRead

; 134  : size_t AuTTYMasterRead(AuVFSNode* fs, AuVFSNode* file, uint64_t* buffer, uint32_t len) {

$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 135  : 	x64_cli();

	call	x64_cli

; 136  : 	TTY* type = (TTY*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR type$[rsp], rax

; 137  : 	if (!type)

	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN5@AuTTYMaste

; 138  : 		return 0;

	xor	eax, eax
	jmp	$LN6@AuTTYMaste
$LN5@AuTTYMaste:

; 139  : 
; 140  : 	size_t bytes_to_ret = 0;

	mov	QWORD PTR bytes_to_ret$[rsp], 0

; 141  : 	uint8_t* aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buf$[rsp], rax

; 142  : 
; 143  : 	if (CircBufEmpty(type->masterbuf)) {

	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?CircBufEmpty@@YA_NPEAU_circ_buf_@@@Z	; CircBufEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@AuTTYMaste

; 144  : 		return bytes_to_ret;

	mov	rax, QWORD PTR bytes_to_ret$[rsp]
	jmp	SHORT $LN6@AuTTYMaste
$LN4@AuTTYMaste:

; 145  : 	}
; 146  : 
; 147  : 	for (int i = 0; i < type->master_written; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuTTYMaste
$LN2@AuTTYMaste:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuTTYMaste:
	mov	rax, QWORD PTR type$[rsp]
	mov	eax, DWORD PTR [rax+104]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN1@AuTTYMaste

; 148  : 		AuCircBufGet(type->masterbuf, &aligned_buf[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR aligned_buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?AuCircBufGet@@YAHPEAU_circ_buf_@@PEAE@Z ; AuCircBufGet

; 149  : 		bytes_to_ret++;

	mov	rax, QWORD PTR bytes_to_ret$[rsp]
	inc	rax
	mov	QWORD PTR bytes_to_ret$[rsp], rax

; 150  : 	}

	jmp	SHORT $LN2@AuTTYMaste
$LN1@AuTTYMaste:

; 151  : 
; 152  : 	type->master_written = 0;

	mov	rax, QWORD PTR type$[rsp]
	mov	DWORD PTR [rax+104], 0

; 153  : 	return bytes_to_ret;

	mov	rax, QWORD PTR bytes_to_ret$[rsp]
$LN6@AuTTYMaste:

; 154  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuTTYMasterRead@@YA_KPEAU__VFS_NODE__@@0PEA_KI@Z ENDP	; AuTTYMasterRead
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
sig$1 = 32
tty$ = 64
c$ = 72
?AuTTYProcessLine@@YAXPEAU__tty__@@E@Z PROC		; AuTTYProcessLine

; 90   : void AuTTYProcessLine(TTY* tty, uint8_t c) {

$LN18:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 91   : 	if (tty->term.c_lflag & ISIG) {

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, 1
	test	eax, eax
	je	$LN15@AuTTYProce

; 92   : 		int sig = -1;

	mov	DWORD PTR sig$1[rsp], -1

; 93   : 		if (c == tty->term.c_cc[VINTR])

	movzx	eax, BYTE PTR c$[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tty$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+29]
	cmp	eax, ecx
	jne	SHORT $LN14@AuTTYProce

; 94   : 			sig = SIGINT;

	mov	DWORD PTR sig$1[rsp], 2
	jmp	SHORT $LN13@AuTTYProce
$LN14@AuTTYProce:

; 95   : 		else if (c == tty->term.c_cc[VQUIT])

	movzx	eax, BYTE PTR c$[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tty$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+29]
	cmp	eax, ecx
	jne	SHORT $LN12@AuTTYProce

; 96   : 			sig = SIGQUIT;

	mov	DWORD PTR sig$1[rsp], 3
	jmp	SHORT $LN11@AuTTYProce
$LN12@AuTTYProce:

; 97   : 		else if (c == tty->term.c_cc[VSUSP])

	movzx	eax, BYTE PTR c$[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR tty$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+29]
	cmp	eax, ecx
	jne	SHORT $LN10@AuTTYProce

; 98   : 			sig = SIGTSTP;

	mov	DWORD PTR sig$1[rsp], 24
$LN10@AuTTYProce:
$LN11@AuTTYProce:
$LN13@AuTTYProce:

; 99   : 
; 100  : 		if (sig != -1) {

	cmp	DWORD PTR sig$1[rsp], -1
	je	SHORT $LN9@AuTTYProce

; 101  : 			if (tty->term.c_lflag & ECHO) {

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN8@AuTTYProce

; 102  : 				AuTTYWriteMaster(tty, '^');

	mov	dl, 94					; 0000005eH
	mov	rcx, QWORD PTR tty$[rsp]
	call	?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z	; AuTTYWriteMaster

; 103  : 				AuTTYWriteMaster(tty, ('@' + c) % 128);

	movzx	eax, BYTE PTR c$[rsp]
	add	eax, 64					; 00000040H
	cdq
	and	edx, 127				; 0000007fH
	add	eax, edx
	and	eax, 127				; 0000007fH
	sub	eax, edx
	movzx	edx, al
	mov	rcx, QWORD PTR tty$[rsp]
	call	?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z	; AuTTYWriteMaster

; 104  : 				AuTTYWriteMaster(tty, '\n');

	mov	dl, 10
	mov	rcx, QWORD PTR tty$[rsp]
	call	?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z	; AuTTYWriteMaster
$LN8@AuTTYProce:

; 105  : 			}
; 106  : 			//clear_input_buf
; 107  : 			//if foreground process group or process exist
; 108  : 				//send signal to foreground process, the sig number
; 109  : 			return;

	jmp	$LN16@AuTTYProce
$LN9@AuTTYProce:
$LN15@AuTTYProce:

; 110  : 		}
; 111  : 	}
; 112  : 
; 113  : 	if (tty->term.c_iflag & ISTRIP)

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN7@AuTTYProce

; 114  : 		c &= 0x7f;

	movzx	eax, BYTE PTR c$[rsp]
	and	eax, 127				; 0000007fH
	mov	BYTE PTR c$[rsp], al
$LN7@AuTTYProce:

; 115  : 
; 116  : 	/* ignore CR*/
; 117  : 	if ((tty->term.c_iflag & IGNCR) && c == '\r')

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN6@AuTTYProce
	movzx	eax, BYTE PTR c$[rsp]
	cmp	eax, 13
	jne	SHORT $LN6@AuTTYProce

; 118  : 		return;

	jmp	SHORT $LN16@AuTTYProce
$LN6@AuTTYProce:

; 119  : 
; 120  : 	if ((tty->term.c_iflag & INLCR) && c == '\n')

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN5@AuTTYProce
	movzx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	jne	SHORT $LN5@AuTTYProce

; 121  : 		c = '\r';

	mov	BYTE PTR c$[rsp], 13
	jmp	SHORT $LN4@AuTTYProce
$LN5@AuTTYProce:

; 122  : 	else if ((tty->term.c_iflag & ICRNL) && c == '\r')

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN3@AuTTYProce
	movzx	eax, BYTE PTR c$[rsp]
	cmp	eax, 13
	jne	SHORT $LN3@AuTTYProce

; 123  : 		c = '\n';

	mov	BYTE PTR c$[rsp], 10
$LN3@AuTTYProce:
$LN4@AuTTYProce:

; 124  : 
; 125  : 	/* handle canonical mode */
; 126  : 	if (tty->term.c_lflag & ICANON) {

	mov	rax, QWORD PTR tty$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN2@AuTTYProce

; 127  : 		if (c == tty->term.c_cc[VERASE]) {

	movzx	eax, BYTE PTR c$[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tty$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+29]
$LN2@AuTTYProce:
$LN16@AuTTYProce:

; 128  : 			/* erase the last character */
; 129  : 		}
; 130  : 	}
; 131  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuTTYProcessLine@@YAXPEAU__tty__@@E@Z ENDP		; AuTTYProcessLine
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
tty$ = 48
c$ = 56
?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z PROC		; AuTTYWriteMaster

; 85   : void AuTTYWriteMaster(TTY* tty, uint8_t c) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 86   : 	AuCircBufPut(tty->masterbuf, c);

	movzx	edx, BYTE PTR c$[rsp]
	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z	; AuCircBufPut

; 87   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuTTYWriteMaster@@YAXPEAU__tty__@@E@Z ENDP		; AuTTYWriteMaster
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
tty$ = 48
c$ = 56
?AuTTYWriteSlave@@YAXPEAU__tty__@@E@Z PROC		; AuTTYWriteSlave

; 81   : void AuTTYWriteSlave(TTY* tty, uint8_t c) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 82   : 	AuCircBufPut(tty->slavebuf, c);

	movzx	edx, BYTE PTR c$[rsp]
	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	?AuCircBufPut@@YAHPEAU_circ_buf_@@E@Z	; AuCircBufPut

; 83   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuTTYWriteSlave@@YAXPEAU__tty__@@E@Z ENDP		; AuTTYWriteSlave
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
tty$ = 48
?AuTTYDelete@@YAXPEAU__tty__@@@Z PROC			; AuTTYDelete

; 65   : void AuTTYDelete(TTY* tty) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 66   : 	if (root == NULL)

	cmp	QWORD PTR ?root@@3PEAU__tty__@@EA, 0	; root
	jne	SHORT $LN5@AuTTYDelet

; 67   : 		return;

	jmp	$LN6@AuTTYDelet
$LN5@AuTTYDelet:

; 68   : 	if (tty == root)

	mov	rax, QWORD PTR ?root@@3PEAU__tty__@@EA	; root
	cmp	QWORD PTR tty$[rsp], rax
	jne	SHORT $LN4@AuTTYDelet

; 69   : 		root = root->next;

	mov	rax, QWORD PTR ?root@@3PEAU__tty__@@EA	; root
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR ?root@@3PEAU__tty__@@EA, rax	; root

; 70   : 	else

	jmp	SHORT $LN3@AuTTYDelet
$LN4@AuTTYDelet:

; 71   : 		tty->prev->next = tty->next;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rcx+120]
	mov	QWORD PTR [rax+120], rcx
$LN3@AuTTYDelet:

; 72   : 
; 73   : 	if (tty == last)

	mov	rax, QWORD PTR ?last@@3PEAU__tty__@@EA	; last
	cmp	QWORD PTR tty$[rsp], rax
	jne	SHORT $LN2@AuTTYDelet

; 74   : 		last = tty->prev;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+128]
	mov	QWORD PTR ?last@@3PEAU__tty__@@EA, rax	; last

; 75   : 	else

	jmp	SHORT $LN1@AuTTYDelet
$LN2@AuTTYDelet:

; 76   : 		tty->next->prev = tty->prev;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rcx+128]
	mov	QWORD PTR [rax+128], rcx
$LN1@AuTTYDelet:

; 77   : 
; 78   : 	kfree(tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	kfree
$LN6@AuTTYDelet:

; 79   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuTTYDelete@@YAXPEAU__tty__@@@Z ENDP			; AuTTYDelete
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
tty$ = 8
?AuTTYInsert@@YAXPEAU__tty__@@@Z PROC			; AuTTYInsert

; 50   : void AuTTYInsert(TTY* tty) {

	mov	QWORD PTR [rsp+8], rcx

; 51   : 	tty->next = NULL;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+120], 0

; 52   : 	tty->prev = NULL;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+128], 0

; 53   : 
; 54   : 	if (root == NULL) {

	cmp	QWORD PTR ?root@@3PEAU__tty__@@EA, 0	; root
	jne	SHORT $LN2@AuTTYInser

; 55   : 		last = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?last@@3PEAU__tty__@@EA, rax	; last

; 56   : 		root = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?root@@3PEAU__tty__@@EA, rax	; root

; 57   : 	}
; 58   : 	else {

	jmp	SHORT $LN1@AuTTYInser
$LN2@AuTTYInser:

; 59   : 		last->next = tty;

	mov	rax, QWORD PTR ?last@@3PEAU__tty__@@EA	; last
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+120], rcx

; 60   : 		tty->prev = last;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR ?last@@3PEAU__tty__@@EA	; last
	mov	QWORD PTR [rax+128], rcx
$LN1@AuTTYInser:

; 61   : 	}
; 62   : 	last = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?last@@3PEAU__tty__@@EA, rax	; last

; 63   : }

	ret	0
?AuTTYInsert@@YAXPEAU__tty__@@@Z ENDP			; AuTTYInsert
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
fs$ = 32
?AuTTYInitialise@@YAXXZ PROC				; AuTTYInitialise

; 385  : void AuTTYInitialise() {

$LN3:
	sub	rsp, 56					; 00000038H

; 386  : 	root = NULL;

	mov	QWORD PTR ?root@@3PEAU__tty__@@EA, 0	; root

; 387  : 	last = NULL;

	mov	QWORD PTR ?last@@3PEAU__tty__@@EA, 0	; last

; 388  : 	master_count = 0;

	mov	QWORD PTR ?master_count@@3_KA, 0	; master_count

; 389  : 	slave_count = 0;

	mov	QWORD PTR ?slave_count@@3_KA, 0		; slave_count

; 390  : 	/* create a directory for tty's */
; 391  : 	AuVFSNode* fs = AuVFSFind("/dev");

	lea	rcx, OFFSET FLAT:$SG3911
	call	AuVFSFind
	mov	QWORD PTR fs$[rsp], rax

; 392  : 	AuDevFSCreateFile(fs, "/dev/tty", FS_FLAG_DIRECTORY);

	mov	r8b, 2
	lea	rdx, OFFSET FLAT:$SG3912
	mov	rcx, QWORD PTR fs$[rsp]
	call	?AuDevFSCreateFile@@YAHPEAU__VFS_NODE__@@PEADE@Z ; AuDevFSCreateFile

; 393  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuTTYInitialise@@YAXXZ ENDP				; AuTTYInitialise
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\aurora\kernel\fs\tty.cpp
_TEXT	SEGMENT
fd$ = 32
tty$ = 40
proc$ = 48
inbuffer$ = 56
outbuffer$ = 64
thr$ = 72
master$ = 80
slave$ = 88
master_fd$ = 112
slave_fd$ = 120
?AuTTYCreate@@YAHPEAH0@Z PROC				; AuTTYCreate

; 330  : int AuTTYCreate(int* master_fd, int* slave_fd) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 331  : 	x64_cli();

	call	x64_cli

; 332  : 
; 333  : 	AuThread* thr = AuGetCurrentThread();

	call	AuGetCurrentThread
	mov	QWORD PTR thr$[rsp], rax

; 334  : 	AuProcess* proc = AuProcessFindThread(thr);

	mov	rcx, QWORD PTR thr$[rsp]
	call	?AuProcessFindThread@@YAPEAU_au_proc_@@PEAU_au_thread_@@@Z ; AuProcessFindThread
	mov	QWORD PTR proc$[rsp], rax

; 335  : 	if (!proc)

	cmp	QWORD PTR proc$[rsp], 0
	jne	SHORT $LN3@AuTTYCreat

; 336  : 		return -1;

	mov	eax, -1
	jmp	$LN4@AuTTYCreat
$LN3@AuTTYCreat:

; 337  : 
; 338  : 	TTY* tty = (TTY*)kmalloc(sizeof(TTY));

	mov	ecx, 136				; 00000088H
	call	kmalloc
	mov	QWORD PTR tty$[rsp], rax

; 339  : 	memset(tty, 0, sizeof(TTY));

	mov	r8d, 136				; 00000088H
	xor	edx, edx
	mov	rcx, QWORD PTR tty$[rsp]
	call	memset

; 340  : 
; 341  : 	void* inbuffer = kmalloc(512);

	mov	ecx, 512				; 00000200H
	call	kmalloc
	mov	QWORD PTR inbuffer$[rsp], rax

; 342  : 	memset(inbuffer, 0, 512);

	mov	r8d, 512				; 00000200H
	xor	edx, edx
	mov	rcx, QWORD PTR inbuffer$[rsp]
	call	memset

; 343  : 	void* outbuffer = kmalloc(512);

	mov	ecx, 512				; 00000200H
	call	kmalloc
	mov	QWORD PTR outbuffer$[rsp], rax

; 344  : 	memset(outbuffer, 0, 512);

	mov	r8d, 512				; 00000200H
	xor	edx, edx
	mov	rcx, QWORD PTR outbuffer$[rsp]
	call	memset

; 345  : 
; 346  : 	tty->masterbuf = AuCircBufInitialise((uint8_t*)inbuffer, 512);

	mov	edx, 512				; 00000200H
	mov	rcx, QWORD PTR inbuffer$[rsp]
	call	?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z ; AuCircBufInitialise
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rcx+72], rax

; 347  : 	tty->slavebuf = AuCircBufInitialise((uint8_t*)outbuffer, 512);

	mov	edx, 512				; 00000200H
	mov	rcx, QWORD PTR outbuffer$[rsp]
	call	?AuCircBufInitialise@@YAPEAU_circ_buf_@@PEAE_K@Z ; AuCircBufInitialise
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rcx+80], rax

; 348  : 
; 349  : 	tty->id = slave_count;

	mov	rax, QWORD PTR tty$[rsp]
	movzx	ecx, BYTE PTR ?slave_count@@3_KA
	mov	BYTE PTR [rax], cl

; 350  : 	tty->master_written = 0;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+104], 0

; 351  : 	tty->slave_written = 0;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+108], 0

; 352  : 
; 353  : 	tty->masterbuf_ptr = inbuffer;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR inbuffer$[rsp]
	mov	QWORD PTR [rax+88], rcx

; 354  : 	tty->slavebuf_ptr = outbuffer;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR outbuffer$[rsp]
	mov	QWORD PTR [rax+96], rcx

; 355  : 
; 356  : 	tty->term.c_iflag = ICRNL | BRKINT;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+12], 258			; 00000102H

; 357  : 	tty->term.c_oflag = ONLCR | OPOST;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+16], 5

; 358  : 	tty->term.c_iflag = ECHO | ECHOE | ECHOK | ICANON | ISIG | IEXTEN;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+12], 32827		; 0000803bH

; 359  : 	tty->term.c_cflag = CREAD | CS8;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+20], 176			; 000000b0H

; 360  : 	tty->term.c_cc[VEOF] = 4;

	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 4

; 361  : 	tty->term.c_cc[VEOL] = 0;

	mov	eax, 1
	imul	rax, rax, 11
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 0

; 362  : 	tty->term.c_cc[VERASE] = 0x7f;

	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 127		; 0000007fH

; 363  : 
; 364  : 	AuVFSNode* master = AuTTYCreateMaster(tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	?AuTTYCreateMaster@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z ; AuTTYCreateMaster
	mov	QWORD PTR master$[rsp], rax

; 365  : 	AuVFSNode* slave = AuTTYCreateSlave(tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	?AuTTYCreateSlave@@YAPEAU__VFS_NODE__@@PEAU__tty__@@@Z ; AuTTYCreateSlave
	mov	QWORD PTR slave$[rsp], rax

; 366  : 
; 367  : 	int fd = AuProcessGetFileDesc(proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z ; AuProcessGetFileDesc
	mov	DWORD PTR fd$[rsp], eax

; 368  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN2@AuTTYCreat

; 369  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@AuTTYCreat
$LN2@AuTTYCreat:

; 370  : 	proc->fds[fd] = master;

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR master$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], rdx

; 371  : 	*master_fd = fd;

	mov	rax, QWORD PTR master_fd$[rsp]
	mov	ecx, DWORD PTR fd$[rsp]
	mov	DWORD PTR [rax], ecx

; 372  : 
; 373  : 	fd = AuProcessGetFileDesc(proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?AuProcessGetFileDesc@@YAHPEAU_au_proc_@@@Z ; AuProcessGetFileDesc
	mov	DWORD PTR fd$[rsp], eax

; 374  : 	if (fd == -1)

	cmp	DWORD PTR fd$[rsp], -1
	jne	SHORT $LN1@AuTTYCreat

; 375  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@AuTTYCreat
$LN1@AuTTYCreat:

; 376  : 	proc->fds[fd] = slave;

	movsxd	rax, DWORD PTR fd$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR slave$[rsp]
	mov	QWORD PTR [rcx+rax*8+576], rdx

; 377  : 	*slave_fd = fd;

	mov	rax, QWORD PTR slave_fd$[rsp]
	mov	ecx, DWORD PTR fd$[rsp]
	mov	DWORD PTR [rax], ecx

; 378  : 
; 379  : 	return 1;

	mov	eax, 1
$LN4@AuTTYCreat:

; 380  : }

	add	rsp, 104				; 00000068H
	ret	0
?AuTTYCreate@@YAHPEAH0@Z ENDP				; AuTTYCreate
_TEXT	ENDS
END
